	.text
	.file	"super.c"
                                        // Start of file scope inline assembly
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_sync_file_enter - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_sync_file_exit - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_sync_fs - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_iget - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_iget_exit - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_evict_inode - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_new_inode - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_unlink_enter - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_unlink_exit - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_drop_inode - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_truncate - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_truncate_data_blocks_range - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_truncate_blocks_enter - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_truncate_blocks_exit - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_truncate_inode_blocks_enter - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_truncate_inode_blocks_exit - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_truncate_nodes_enter - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_truncate_nodes_exit - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_truncate_node - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_truncate_partial_nodes - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_file_write_iter - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_map_blocks - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_background_gc - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_gc_begin - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_gc_end - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_get_victim - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_lookup_start - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_lookup_end - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_readdir - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_fallocate - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_direct_IO_enter - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_direct_IO_exit - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_reserve_new_blocks - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_submit_page_bio - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_submit_page_write - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_prepare_write_bio - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_prepare_read_bio - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_submit_read_bio - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_submit_write_bio - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_write_begin - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_write_end - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_writepage - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_do_write_data_page - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_readpage - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_set_page_dirty - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_vm_page_mkwrite - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_register_inmem_page - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_commit_inmem_page - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_filemap_fault - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_writepages - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_readpages - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_write_checkpoint - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_queue_discard - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_issue_discard - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_remove_discard - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_issue_reset_zone - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_issue_flush - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_lookup_extent_tree_start - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_lookup_extent_tree_end - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_update_extent_tree_range - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_shrink_extent_tree - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_destroy_extent_tree - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_sync_dirty_inodes_enter - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_sync_dirty_inodes_exit - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_shutdown - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_compress_pages_start - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_decompress_pages_start - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_compress_pages_end - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_decompress_pages_end - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_iostat - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_grading_ssr_allocate - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_dedup_ioc_create_layered_inode - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_dedup_ioc_dedup_inode - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_dedup_revoke_inode - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_dedup_revoke_fail - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_dedup_dec_inner_link - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_dedup_map_readpage - .		
	.previous					
	.section "__tracepoints_ptrs", "a"		
	.balign 4					
	.long 	__tracepoint_f2fs_dedup_map_blocks - .		
	.previous					
.section	".initcall6.init", "a"	
__initcall_init_f2fs_fs6:			
.long	init_f2fs_fs - .			
.previous					
.section	".initcall5.init", "a"	
__initcall_pw_init5:			
.long	pw_init - .			
.previous					

                                        // End of file scope inline assembly
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs__inode
	.type	trace_event_raw_event_f2fs__inode,@function
trace_event_raw_event_f2fs__inode:      // @trace_event_raw_event_f2fs__inode
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x21, [sp, #80]          // 8-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x21, [x0, #72]
	mov	x20, x0
	mov	x19, x1
	tbnz	w21, #8, .LBB0_6
// %bb.1:
	tbz	w21, #7, .LBB0_3
// %bb.2:
	mov	x0, x20
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB0_3:
	tbnz	w21, #6, .LBB0_8
// %bb.4:
	tbz	w21, #9, .LBB0_6
// %bb.5:
	mov	x0, x20
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB0_8
.LBB0_6:
	add	x0, sp, #8              // =8
	mov	w2, #72
	mov	x1, x20
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB0_8
// %bb.7:
	ldr	x8, [x19, #40]
	mov	w1, #72
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x19, #64]
	str	x8, [x0, #16]
	ldr	w8, [x19, #728]
	str	x8, [x0, #24]
	ldrh	w8, [x19]
	strh	w8, [x0, #32]
	ldr	w8, [x19, #72]
	str	w8, [x0, #48]
	ldr	x8, [x19, #80]
	str	x8, [x0, #40]
	ldr	x8, [x19, #144]
	str	x8, [x0, #56]
	ldrb	w8, [x19, #712]
	strb	w8, [x0, #64]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB0_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB0_10
// %bb.9:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldr	x21, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB0_10:
	bl	__stack_chk_fail
.Lfunc_end0:
	.size	trace_event_raw_event_f2fs__inode, .Lfunc_end0-trace_event_raw_event_f2fs__inode
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs__inode
	.type	perf_trace_f2fs__inode,@function
perf_trace_f2fs__inode:                 // @perf_trace_f2fs__inode
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x22, x21, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x22, x30
	mov	x21, x1
	mov	x19, x0
	add	x20, x9, x8
	cbnz	x10, .LBB1_2
// %bb.1:
	ldr	x8, [x20]
	cbz	x8, .LBB1_4
.LBB1_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #76
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB1_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #76
	mov	w4, #1
	stp	x8, x22, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x21, #40]
	mov	x3, x19
	mov	x6, x20
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x21, #64]
	str	x8, [x0, #16]
	ldr	w8, [x21, #728]
	str	x8, [x0, #24]
	ldrh	w8, [x21]
	strh	w8, [x0, #32]
	ldr	w8, [x21, #72]
	str	w8, [x0, #48]
	ldr	x8, [x21, #80]
	str	x8, [x0, #40]
	ldr	x8, [x21, #144]
	str	x8, [x0, #56]
	ldrb	w8, [x21, #712]
	strb	w8, [x0, #64]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB1_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB1_6
// %bb.5:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB1_6:
	bl	__stack_chk_fail
.Lfunc_end1:
	.size	perf_trace_f2fs__inode, .Lfunc_end1-perf_trace_f2fs__inode
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs__inode
	.type	trace_event_define_fields_f2fs__inode,@function
trace_event_define_fields_f2fs__inode:  // @trace_event_define_fields_f2fs__inode
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB2_8
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB2_8
// %bb.2:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.63
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.63
	mov	w3, #24
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB2_8
// %bb.3:
	adrp	x1, .L.str.64
	adrp	x2, .L.str.65
	add	x1, x1, :lo12:.L.str.64
	add	x2, x2, :lo12:.L.str.65
	mov	w3, #32
	mov	w4, #2
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB2_8
// %bb.4:
	adrp	x1, .L.str.66
	adrp	x2, .L.str.67
	add	x1, x1, :lo12:.L.str.66
	add	x2, x2, :lo12:.L.str.67
	mov	w3, #40
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB2_8
// %bb.5:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.69
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.69
	mov	w3, #48
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB2_8
// %bb.6:
	adrp	x1, .L.str.70
	adrp	x2, .L.str.71
	add	x1, x1, :lo12:.L.str.70
	add	x2, x2, :lo12:.L.str.71
	mov	w3, #56
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB2_8
// %bb.7:
	adrp	x1, .L.str.72
	adrp	x2, .L.str.73
	add	x1, x1, :lo12:.L.str.72
	add	x2, x2, :lo12:.L.str.73
	mov	w3, #64
	mov	w4, #1
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB2_8:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end2:
	.size	trace_event_define_fields_f2fs__inode, .Lfunc_end2-trace_event_define_fields_f2fs__inode
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs__inode_exit
	.type	trace_event_raw_event_f2fs__inode_exit,@function
trace_event_raw_event_f2fs__inode_exit: // @trace_event_raw_event_f2fs__inode_exit
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x22, [x0, #72]
	mov	w19, w2
	mov	x20, x0
	mov	x21, x1
	tbnz	w22, #8, .LBB3_6
// %bb.1:
	tbz	w22, #7, .LBB3_3
// %bb.2:
	mov	x0, x20
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB3_3:
	tbnz	w22, #6, .LBB3_8
// %bb.4:
	tbz	w22, #9, .LBB3_6
// %bb.5:
	mov	x0, x20
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB3_8
.LBB3_6:
	add	x0, sp, #8              // =8
	mov	w2, #32
	mov	x1, x20
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB3_8
// %bb.7:
	ldr	x8, [x21, #40]
	mov	w1, #32
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x21, #64]
	str	w19, [x0, #24]
	str	x8, [x0, #16]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB3_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB3_10
// %bb.9:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB3_10:
	bl	__stack_chk_fail
.Lfunc_end3:
	.size	trace_event_raw_event_f2fs__inode_exit, .Lfunc_end3-trace_event_raw_event_f2fs__inode_exit
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs__inode_exit
	.type	perf_trace_f2fs__inode_exit,@function
perf_trace_f2fs__inode_exit:            // @perf_trace_f2fs__inode_exit
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x23, x30
	mov	w20, w2
	mov	x22, x1
	mov	x19, x0
	add	x21, x9, x8
	cbnz	x10, .LBB4_2
// %bb.1:
	ldr	x8, [x21]
	cbz	x8, .LBB4_4
.LBB4_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #36
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB4_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #36
	mov	w4, #1
	stp	x8, x23, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x22, #40]
	mov	x3, x19
	mov	x6, x21
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x22, #64]
	str	w20, [x0, #24]
	str	x8, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB4_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB4_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB4_6:
	bl	__stack_chk_fail
.Lfunc_end4:
	.size	perf_trace_f2fs__inode_exit, .Lfunc_end4-perf_trace_f2fs__inode_exit
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs__inode_exit
	.type	trace_event_define_fields_f2fs__inode_exit,@function
trace_event_define_fields_f2fs__inode_exit: // @trace_event_define_fields_f2fs__inode_exit
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB5_3
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB5_3
// %bb.2:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.75
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.75
	mov	w3, #24
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB5_3:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end5:
	.size	trace_event_define_fields_f2fs__inode_exit, .Lfunc_end5-trace_event_define_fields_f2fs__inode_exit
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_sync_file_exit
	.type	trace_event_raw_event_f2fs_sync_file_exit,@function
trace_event_raw_event_f2fs_sync_file_exit: // @trace_event_raw_event_f2fs_sync_file_exit
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x24, [x0, #72]
	mov	w19, w4
	mov	w20, w3
	mov	w21, w2
	mov	x22, x0
	mov	x23, x1
	tbnz	w24, #8, .LBB6_6
// %bb.1:
	tbz	w24, #7, .LBB6_3
// %bb.2:
	mov	x0, x22
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB6_3:
	tbnz	w24, #6, .LBB6_8
// %bb.4:
	tbz	w24, #9, .LBB6_6
// %bb.5:
	mov	x0, x22
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB6_8
.LBB6_6:
	add	x0, sp, #8              // =8
	mov	w2, #40
	mov	x1, x22
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB6_8
// %bb.7:
	ldr	x8, [x23, #40]
	mov	w1, #40
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	stp	w21, w20, [x0, #24]
	str	w19, [x0, #32]
	str	x8, [x0, #16]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB6_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB6_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB6_10:
	bl	__stack_chk_fail
.Lfunc_end6:
	.size	trace_event_raw_event_f2fs_sync_file_exit, .Lfunc_end6-trace_event_raw_event_f2fs_sync_file_exit
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_sync_file_exit
	.type	perf_trace_f2fs_sync_file_exit,@function
perf_trace_f2fs_sync_file_exit:         // @perf_trace_f2fs_sync_file_exit
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x25, [sp, #48]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x25, x30
	mov	w20, w4
	mov	w21, w3
	mov	w23, w2
	mov	x24, x1
	mov	x19, x0
	add	x22, x9, x8
	cbnz	x10, .LBB7_2
// %bb.1:
	ldr	x8, [x22]
	cbz	x8, .LBB7_4
.LBB7_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #44
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB7_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #44
	mov	w4, #1
	stp	x8, x25, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x24, #40]
	mov	x3, x19
	mov	x6, x22
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x24, #64]
	stp	w23, w21, [x0, #24]
	str	w20, [x0, #32]
	str	x8, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB7_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB7_6
// %bb.5:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldr	x25, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB7_6:
	bl	__stack_chk_fail
.Lfunc_end7:
	.size	perf_trace_f2fs_sync_file_exit, .Lfunc_end7-perf_trace_f2fs_sync_file_exit
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_sync_file_exit
	.type	trace_event_define_fields_f2fs_sync_file_exit,@function
trace_event_define_fields_f2fs_sync_file_exit: // @trace_event_define_fields_f2fs_sync_file_exit
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB8_5
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB8_5
// %bb.2:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.77
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.77
	mov	w3, #24
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB8_5
// %bb.3:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.78
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.78
	mov	w3, #28
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB8_5
// %bb.4:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.75
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.75
	mov	w3, #32
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB8_5:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end8:
	.size	trace_event_define_fields_f2fs_sync_file_exit, .Lfunc_end8-trace_event_define_fields_f2fs_sync_file_exit
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_sync_fs
	.type	trace_event_raw_event_f2fs_sync_fs,@function
trace_event_raw_event_f2fs_sync_fs:     // @trace_event_raw_event_f2fs_sync_fs
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x22, [x0, #72]
	mov	w19, w2
	mov	x20, x0
	mov	x21, x1
	tbnz	w22, #8, .LBB9_6
// %bb.1:
	tbz	w22, #7, .LBB9_3
// %bb.2:
	mov	x0, x20
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB9_3:
	tbnz	w22, #6, .LBB9_8
// %bb.4:
	tbz	w22, #9, .LBB9_6
// %bb.5:
	mov	x0, x20
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB9_8
.LBB9_6:
	add	x0, sp, #8              // =8
	mov	w2, #20
	mov	x1, x20
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB9_8
// %bb.7:
	ldr	w8, [x21, #16]
	mov	w1, #20
	str	w8, [x0, #8]
	ldr	x8, [x21, #1008]
	ldr	x8, [x8, #80]
	and	w8, w8, #0x1
	stp	w8, w19, [x0, #12]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB9_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB9_10
// %bb.9:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB9_10:
	bl	__stack_chk_fail
.Lfunc_end9:
	.size	trace_event_raw_event_f2fs_sync_fs, .Lfunc_end9-trace_event_raw_event_f2fs_sync_fs
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_sync_fs
	.type	perf_trace_f2fs_sync_fs,@function
perf_trace_f2fs_sync_fs:                // @perf_trace_f2fs_sync_fs
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x23, x30
	mov	w20, w2
	mov	x22, x1
	mov	x19, x0
	add	x21, x9, x8
	cbnz	x10, .LBB10_2
// %bb.1:
	ldr	x8, [x21]
	cbz	x8, .LBB10_4
.LBB10_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #20
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB10_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #20
	mov	w4, #1
	stp	x8, x23, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	w8, [x22, #16]
	mov	x3, x19
	mov	x6, x21
	mov	x7, xzr
	str	w8, [x0, #8]
	ldr	x8, [x22, #1008]
	ldr	x8, [x8, #80]
	and	w8, w8, #0x1
	stp	w8, w20, [x0, #12]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB10_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB10_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB10_6:
	bl	__stack_chk_fail
.Lfunc_end10:
	.size	perf_trace_f2fs_sync_fs, .Lfunc_end10-perf_trace_f2fs_sync_fs
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_sync_fs
	.type	trace_event_define_fields_f2fs_sync_fs,@function
trace_event_define_fields_f2fs_sync_fs: // @trace_event_define_fields_f2fs_sync_fs
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB11_3
// %bb.1:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.91
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.91
	mov	w3, #12
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB11_3
// %bb.2:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.92
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.92
	mov	w3, #16
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB11_3:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end11:
	.size	trace_event_define_fields_f2fs_sync_fs, .Lfunc_end11-trace_event_define_fields_f2fs_sync_fs
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_unlink_enter
	.type	trace_event_raw_event_f2fs_unlink_enter,@function
trace_event_raw_event_f2fs_unlink_enter: // @trace_event_raw_event_f2fs_unlink_enter
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x22, [x0, #72]
	mov	x19, x2
	mov	x21, x0
	mov	x20, x1
	tbnz	w22, #8, .LBB12_6
// %bb.1:
	tbz	w22, #7, .LBB12_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB12_3:
	tbnz	w22, #6, .LBB12_8
// %bb.4:
	tbz	w22, #9, .LBB12_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB12_8
.LBB12_6:
	ldr	x8, [x19, #40]
	adrp	x23, .L.str.96
	add	x23, x23, :lo12:.L.str.96
	cmp	x8, #0                  // =0
	csel	x0, x23, x8, eq
	bl	strlen
	add	w24, w0, #1             // =1
	sxtw	x8, w24
	add	x22, x8, #48            // =48
	add	x0, sp, #8              // =8
	mov	x1, x21
	mov	x2, x22
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB12_8
// %bb.7:
	mov	w8, #44
	bfi	w8, w24, #16, #16
	str	w8, [x0, #40]
	ldr	x8, [x20, #40]
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x20, #64]
	str	x8, [x0, #16]
	ldr	x8, [x20, #80]
	str	x8, [x0, #24]
	ldr	x8, [x20, #144]
	str	x8, [x0, #32]
	ldr	x8, [x19, #40]
	add	x0, x0, #44             // =44
	cmp	x8, #0                  // =0
	csel	x1, x23, x8, eq
	bl	strcpy
	add	x0, sp, #8              // =8
	mov	x1, x22
	bl	trace_event_buffer_commit
.LBB12_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB12_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB12_10:
	bl	__stack_chk_fail
.Lfunc_end12:
	.size	trace_event_raw_event_f2fs_unlink_enter, .Lfunc_end12-trace_event_raw_event_f2fs_unlink_enter
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_unlink_enter
	.type	perf_trace_f2fs_unlink_enter,@function
perf_trace_f2fs_unlink_enter:           // @perf_trace_f2fs_unlink_enter
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x27, [sp, #48]          // 8-byte Folded Spill
	stp	x26, x25, [sp, #64]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x2, #40]
	adrp	x27, .L.str.96
	add	x27, x27, :lo12:.L.str.96
	mov	x19, x0
	cmp	x8, #0                  // =0
	csel	x0, x27, x8, eq
	mov	x24, x30
	mov	x20, x2
	mov	x22, x1
	bl	strlen
	ldr	x8, [x19, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x19, #128]
	mov	x26, x0
	add	x21, x9, x8
	cbnz	x10, .LBB13_2
// %bb.1:
	ldr	x8, [x21]
	cbz	x8, .LBB13_4
.LBB13_2:
	add	w8, w26, #60            // =60
	and	w8, w8, #0xfffffff8
	sub	w23, w8, #4             // =4
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, w23
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB13_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	w10, #44
	mov	x8, sp
	movk	w10, #1, lsl #16
	add	w10, w10, w26, lsl #16
	stp	x8, x24, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	str	w10, [x0, #40]
	ldr	x8, [x22, #40]
	mov	x25, x0
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x22, #64]
	str	x8, [x0, #16]
	ldr	x8, [x22, #80]
	str	x8, [x0, #24]
	ldr	x8, [x22, #144]
	str	x8, [x0, #32]
	ldr	x8, [x20, #40]
	add	x0, x0, #44             // =44
	cmp	x8, #0                  // =0
	csel	x1, x27, x8, eq
	bl	strcpy
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	mov	w4, #1
	mov	x0, x25
	mov	w1, w23
	mov	x3, x19
	mov	x6, x21
	mov	x7, xzr
	bl	perf_trace_run_bpf_submit
.LBB13_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB13_6
// %bb.5:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]     // 16-byte Folded Reload
	ldr	x27, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB13_6:
	bl	__stack_chk_fail
.Lfunc_end13:
	.size	perf_trace_f2fs_unlink_enter, .Lfunc_end13-perf_trace_f2fs_unlink_enter
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_unlink_enter
	.type	trace_event_define_fields_f2fs_unlink_enter,@function
trace_event_define_fields_f2fs_unlink_enter: // @trace_event_define_fields_f2fs_unlink_enter
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB14_5
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB14_5
// %bb.2:
	adrp	x1, .L.str.66
	adrp	x2, .L.str.67
	add	x1, x1, :lo12:.L.str.66
	add	x2, x2, :lo12:.L.str.67
	mov	w3, #24
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB14_5
// %bb.3:
	adrp	x1, .L.str.70
	adrp	x2, .L.str.71
	add	x1, x1, :lo12:.L.str.70
	add	x2, x2, :lo12:.L.str.71
	mov	w3, #32
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB14_5
// %bb.4:
	adrp	x1, .L.str.97
	adrp	x2, .L.str.98
	add	x1, x1, :lo12:.L.str.97
	add	x2, x2, :lo12:.L.str.98
	mov	w3, #40
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB14_5:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end14:
	.size	trace_event_define_fields_f2fs_unlink_enter, .Lfunc_end14-trace_event_define_fields_f2fs_unlink_enter
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_truncate_data_blocks_range
	.type	trace_event_raw_event_f2fs_truncate_data_blocks_range,@function
trace_event_raw_event_f2fs_truncate_data_blocks_range: // @trace_event_raw_event_f2fs_truncate_data_blocks_range
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x24, [x0, #72]
	mov	w19, w4
	mov	w20, w3
	mov	w21, w2
	mov	x22, x0
	mov	x23, x1
	tbnz	w24, #8, .LBB15_6
// %bb.1:
	tbz	w24, #7, .LBB15_3
// %bb.2:
	mov	x0, x22
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB15_3:
	tbnz	w24, #6, .LBB15_8
// %bb.4:
	tbz	w24, #9, .LBB15_6
// %bb.5:
	mov	x0, x22
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB15_8
.LBB15_6:
	add	x0, sp, #8              // =8
	mov	w2, #40
	mov	x1, x22
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB15_8
// %bb.7:
	ldr	x8, [x23, #40]
	mov	w1, #40
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	stp	w21, w20, [x0, #24]
	str	w19, [x0, #32]
	str	x8, [x0, #16]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB15_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB15_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB15_10:
	bl	__stack_chk_fail
.Lfunc_end15:
	.size	trace_event_raw_event_f2fs_truncate_data_blocks_range, .Lfunc_end15-trace_event_raw_event_f2fs_truncate_data_blocks_range
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_truncate_data_blocks_range
	.type	perf_trace_f2fs_truncate_data_blocks_range,@function
perf_trace_f2fs_truncate_data_blocks_range: // @perf_trace_f2fs_truncate_data_blocks_range
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x25, [sp, #48]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x25, x30
	mov	w20, w4
	mov	w21, w3
	mov	w23, w2
	mov	x24, x1
	mov	x19, x0
	add	x22, x9, x8
	cbnz	x10, .LBB16_2
// %bb.1:
	ldr	x8, [x22]
	cbz	x8, .LBB16_4
.LBB16_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #44
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB16_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #44
	mov	w4, #1
	stp	x8, x25, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x24, #40]
	mov	x3, x19
	mov	x6, x22
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x24, #64]
	stp	w23, w21, [x0, #24]
	str	w20, [x0, #32]
	str	x8, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB16_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB16_6
// %bb.5:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldr	x25, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB16_6:
	bl	__stack_chk_fail
.Lfunc_end16:
	.size	perf_trace_f2fs_truncate_data_blocks_range, .Lfunc_end16-perf_trace_f2fs_truncate_data_blocks_range
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_truncate_data_blocks_range
	.type	trace_event_define_fields_f2fs_truncate_data_blocks_range,@function
trace_event_define_fields_f2fs_truncate_data_blocks_range: // @trace_event_define_fields_f2fs_truncate_data_blocks_range
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB17_5
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB17_5
// %bb.2:
	adrp	x1, .L.str.100
	adrp	x2, .L.str.101
	add	x1, x1, :lo12:.L.str.100
	add	x2, x2, :lo12:.L.str.101
	mov	w3, #24
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB17_5
// %bb.3:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.102
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.102
	mov	w3, #28
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB17_5
// %bb.4:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.103
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.103
	mov	w3, #32
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB17_5:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end17:
	.size	trace_event_define_fields_f2fs_truncate_data_blocks_range, .Lfunc_end17-trace_event_define_fields_f2fs_truncate_data_blocks_range
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs__truncate_op
	.type	trace_event_raw_event_f2fs__truncate_op,@function
trace_event_raw_event_f2fs__truncate_op: // @trace_event_raw_event_f2fs__truncate_op
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x22, [x0, #72]
	mov	x19, x2
	mov	x21, x0
	mov	x20, x1
	tbnz	w22, #8, .LBB18_6
// %bb.1:
	tbz	w22, #7, .LBB18_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB18_3:
	tbnz	w22, #6, .LBB18_8
// %bb.4:
	tbz	w22, #9, .LBB18_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB18_8
.LBB18_6:
	add	x0, sp, #8              // =8
	mov	w2, #48
	mov	x1, x21
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB18_8
// %bb.7:
	ldr	x8, [x20, #40]
	mov	w1, #48
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x20, #64]
	str	x8, [x0, #16]
	ldr	x8, [x20, #80]
	str	x8, [x0, #24]
	ldr	x8, [x20, #144]
	stp	x8, x19, [x0, #32]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB18_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB18_10
// %bb.9:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB18_10:
	bl	__stack_chk_fail
.Lfunc_end18:
	.size	trace_event_raw_event_f2fs__truncate_op, .Lfunc_end18-trace_event_raw_event_f2fs__truncate_op
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs__truncate_op
	.type	perf_trace_f2fs__truncate_op,@function
perf_trace_f2fs__truncate_op:           // @perf_trace_f2fs__truncate_op
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x23, x30
	mov	x20, x2
	mov	x22, x1
	mov	x19, x0
	add	x21, x9, x8
	cbnz	x10, .LBB19_2
// %bb.1:
	ldr	x8, [x21]
	cbz	x8, .LBB19_4
.LBB19_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #52
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB19_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #52
	mov	w4, #1
	stp	x8, x23, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x22, #40]
	mov	x3, x19
	mov	x6, x21
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x22, #64]
	str	x8, [x0, #16]
	ldr	x8, [x22, #80]
	str	x8, [x0, #24]
	ldr	x8, [x22, #144]
	stp	x8, x20, [x0, #32]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB19_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB19_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB19_6:
	bl	__stack_chk_fail
.Lfunc_end19:
	.size	perf_trace_f2fs__truncate_op, .Lfunc_end19-perf_trace_f2fs__truncate_op
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs__truncate_op
	.type	trace_event_define_fields_f2fs__truncate_op,@function
trace_event_define_fields_f2fs__truncate_op: // @trace_event_define_fields_f2fs__truncate_op
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB20_5
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB20_5
// %bb.2:
	adrp	x1, .L.str.66
	adrp	x2, .L.str.67
	add	x1, x1, :lo12:.L.str.66
	add	x2, x2, :lo12:.L.str.67
	mov	w3, #24
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB20_5
// %bb.3:
	adrp	x1, .L.str.70
	adrp	x2, .L.str.71
	add	x1, x1, :lo12:.L.str.70
	add	x2, x2, :lo12:.L.str.71
	mov	w3, #32
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB20_5
// %bb.4:
	adrp	x1, .L.str.105
	adrp	x2, .L.str.106
	add	x1, x1, :lo12:.L.str.105
	add	x2, x2, :lo12:.L.str.106
	mov	w3, #40
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB20_5:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end20:
	.size	trace_event_define_fields_f2fs__truncate_op, .Lfunc_end20-trace_event_define_fields_f2fs__truncate_op
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs__truncate_node
	.type	trace_event_raw_event_f2fs__truncate_node,@function
trace_event_raw_event_f2fs__truncate_node: // @trace_event_raw_event_f2fs__truncate_node
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x23, [sp, #80]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x23, [x0, #72]
	mov	w19, w3
	mov	w20, w2
	mov	x21, x0
	mov	x22, x1
	tbnz	w23, #8, .LBB21_6
// %bb.1:
	tbz	w23, #7, .LBB21_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB21_3:
	tbnz	w23, #6, .LBB21_8
// %bb.4:
	tbz	w23, #9, .LBB21_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB21_8
.LBB21_6:
	add	x0, sp, #8              // =8
	mov	w2, #32
	mov	x1, x21
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB21_8
// %bb.7:
	ldr	x8, [x22, #40]
	mov	w1, #32
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x22, #64]
	stp	w20, w19, [x0, #24]
	str	x8, [x0, #16]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB21_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB21_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldr	x23, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB21_10:
	bl	__stack_chk_fail
.Lfunc_end21:
	.size	trace_event_raw_event_f2fs__truncate_node, .Lfunc_end21-trace_event_raw_event_f2fs__truncate_node
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs__truncate_node
	.type	perf_trace_f2fs__truncate_node,@function
perf_trace_f2fs__truncate_node:         // @perf_trace_f2fs__truncate_node
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x24, x30
	mov	w20, w3
	mov	w22, w2
	mov	x23, x1
	mov	x19, x0
	add	x21, x9, x8
	cbnz	x10, .LBB22_2
// %bb.1:
	ldr	x8, [x21]
	cbz	x8, .LBB22_4
.LBB22_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #36
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB22_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #36
	mov	w4, #1
	stp	x8, x24, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x23, #40]
	mov	x3, x19
	mov	x6, x21
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	stp	w22, w20, [x0, #24]
	str	x8, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB22_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB22_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB22_6:
	bl	__stack_chk_fail
.Lfunc_end22:
	.size	perf_trace_f2fs__truncate_node, .Lfunc_end22-perf_trace_f2fs__truncate_node
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs__truncate_node
	.type	trace_event_define_fields_f2fs__truncate_node,@function
trace_event_define_fields_f2fs__truncate_node: // @trace_event_define_fields_f2fs__truncate_node
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB23_4
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB23_4
// %bb.2:
	adrp	x1, .L.str.100
	adrp	x2, .L.str.101
	add	x1, x1, :lo12:.L.str.100
	add	x2, x2, :lo12:.L.str.101
	mov	w3, #24
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB23_4
// %bb.3:
	adrp	x1, .L.str.108
	adrp	x2, .L.str.109
	add	x1, x1, :lo12:.L.str.108
	add	x2, x2, :lo12:.L.str.109
	mov	w3, #28
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB23_4:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end23:
	.size	trace_event_define_fields_f2fs__truncate_node, .Lfunc_end23-trace_event_define_fields_f2fs__truncate_node
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_truncate_partial_nodes
	.type	trace_event_raw_event_f2fs_truncate_partial_nodes,@function
trace_event_raw_event_f2fs_truncate_partial_nodes: // @trace_event_raw_event_f2fs_truncate_partial_nodes
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x24, [x0, #72]
	mov	w19, w4
	mov	w20, w3
	mov	x21, x2
	mov	x22, x0
	mov	x23, x1
	tbnz	w24, #8, .LBB24_6
// %bb.1:
	tbz	w24, #7, .LBB24_3
// %bb.2:
	mov	x0, x22
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB24_3:
	tbnz	w24, #6, .LBB24_8
// %bb.4:
	tbz	w24, #9, .LBB24_6
// %bb.5:
	mov	x0, x22
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB24_8
.LBB24_6:
	add	x0, sp, #8              // =8
	mov	w2, #48
	mov	x1, x22
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB24_8
// %bb.7:
	ldr	x8, [x23, #40]
	mov	w1, #48
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	str	x8, [x0, #16]
	ldr	w8, [x21]
	str	w8, [x0, #24]
	ldr	w8, [x21, #4]
	str	w8, [x0, #28]
	ldr	w8, [x21, #8]
	str	w19, [x0, #40]
	stp	w8, w20, [x0, #32]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB24_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB24_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB24_10:
	bl	__stack_chk_fail
.Lfunc_end24:
	.size	trace_event_raw_event_f2fs_truncate_partial_nodes, .Lfunc_end24-trace_event_raw_event_f2fs_truncate_partial_nodes
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_truncate_partial_nodes
	.type	perf_trace_f2fs_truncate_partial_nodes,@function
perf_trace_f2fs_truncate_partial_nodes: // @perf_trace_f2fs_truncate_partial_nodes
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x25, [sp, #48]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x25, x30
	mov	w20, w4
	mov	w21, w3
	mov	x23, x2
	mov	x24, x1
	mov	x19, x0
	add	x22, x9, x8
	cbnz	x10, .LBB25_2
// %bb.1:
	ldr	x8, [x22]
	cbz	x8, .LBB25_4
.LBB25_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #52
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB25_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #52
	mov	w4, #1
	stp	x8, x25, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x24, #40]
	mov	x3, x19
	mov	x6, x22
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x24, #64]
	str	x8, [x0, #16]
	ldr	w8, [x23]
	str	w8, [x0, #24]
	ldr	w8, [x23, #4]
	str	w8, [x0, #28]
	ldr	w8, [x23, #8]
	stp	w21, w20, [x0, #36]
	str	w8, [x0, #32]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB25_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB25_6
// %bb.5:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldr	x25, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB25_6:
	bl	__stack_chk_fail
.Lfunc_end25:
	.size	perf_trace_f2fs_truncate_partial_nodes, .Lfunc_end25-perf_trace_f2fs_truncate_partial_nodes
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_truncate_partial_nodes
	.type	trace_event_define_fields_f2fs_truncate_partial_nodes,@function
trace_event_define_fields_f2fs_truncate_partial_nodes: // @trace_event_define_fields_f2fs_truncate_partial_nodes
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB26_5
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB26_5
// %bb.2:
	adrp	x1, .L.str.100
	adrp	x2, .L.str.111
	add	x1, x1, :lo12:.L.str.100
	add	x2, x2, :lo12:.L.str.111
	mov	w3, #36
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB26_5
// %bb.3:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.112
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.112
	mov	w3, #36
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB26_5
// %bb.4:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.113
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.113
	mov	w3, #40
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB26_5:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end26:
	.size	trace_event_define_fields_f2fs_truncate_partial_nodes, .Lfunc_end26-trace_event_define_fields_f2fs_truncate_partial_nodes
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_file_write_iter
	.type	trace_event_raw_event_f2fs_file_write_iter,@function
trace_event_raw_event_f2fs_file_write_iter: // @trace_event_raw_event_f2fs_file_write_iter
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x24, [x0, #72]
	mov	w19, w4
	mov	x21, x3
	mov	x20, x2
	mov	x22, x0
	mov	x23, x1
	tbnz	w24, #8, .LBB27_6
// %bb.1:
	tbz	w24, #7, .LBB27_3
// %bb.2:
	mov	x0, x22
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB27_3:
	tbnz	w24, #6, .LBB27_8
// %bb.4:
	tbz	w24, #9, .LBB27_6
// %bb.5:
	mov	x0, x22
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB27_8
.LBB27_6:
	add	x0, sp, #8              // =8
	mov	w2, #48
	mov	x1, x22
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB27_8
// %bb.7:
	ldr	x8, [x23, #40]
	mov	w1, #48
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	stp	x20, x21, [x0, #24]
	str	w19, [x0, #40]
	str	x8, [x0, #16]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB27_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB27_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB27_10:
	bl	__stack_chk_fail
.Lfunc_end27:
	.size	trace_event_raw_event_f2fs_file_write_iter, .Lfunc_end27-trace_event_raw_event_f2fs_file_write_iter
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_file_write_iter
	.type	perf_trace_f2fs_file_write_iter,@function
perf_trace_f2fs_file_write_iter:        // @perf_trace_f2fs_file_write_iter
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x25, [sp, #48]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x25, x30
	mov	w20, w4
	mov	x22, x3
	mov	x21, x2
	mov	x24, x1
	mov	x19, x0
	add	x23, x9, x8
	cbnz	x10, .LBB28_2
// %bb.1:
	ldr	x8, [x23]
	cbz	x8, .LBB28_4
.LBB28_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #52
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB28_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #52
	mov	w4, #1
	stp	x8, x25, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x24, #40]
	mov	x3, x19
	mov	x6, x23
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x24, #64]
	stp	x21, x22, [x0, #24]
	str	w20, [x0, #40]
	str	x8, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB28_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB28_6
// %bb.5:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldr	x25, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB28_6:
	bl	__stack_chk_fail
.Lfunc_end28:
	.size	perf_trace_f2fs_file_write_iter, .Lfunc_end28-perf_trace_f2fs_file_write_iter
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_file_write_iter
	.type	trace_event_define_fields_f2fs_file_write_iter,@function
trace_event_define_fields_f2fs_file_write_iter: // @trace_event_define_fields_f2fs_file_write_iter
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB29_5
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB29_5
// %bb.2:
	adrp	x1, .L.str.115
	adrp	x2, .L.str.116
	add	x1, x1, :lo12:.L.str.115
	add	x2, x2, :lo12:.L.str.116
	mov	w3, #24
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB29_5
// %bb.3:
	adrp	x1, .L.str.115
	adrp	x2, .L.str.117
	add	x1, x1, :lo12:.L.str.115
	add	x2, x2, :lo12:.L.str.117
	mov	w3, #32
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB29_5
// %bb.4:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.75
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.75
	mov	w3, #40
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB29_5:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end29:
	.size	trace_event_define_fields_f2fs_file_write_iter, .Lfunc_end29-trace_event_define_fields_f2fs_file_write_iter
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_map_blocks
	.type	trace_event_raw_event_f2fs_map_blocks,@function
trace_event_raw_event_f2fs_map_blocks:  // @trace_event_raw_event_f2fs_map_blocks
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x23, [sp, #80]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x23, [x0, #72]
	mov	w19, w3
	mov	x20, x2
	mov	x21, x0
	mov	x22, x1
	tbnz	w23, #8, .LBB30_6
// %bb.1:
	tbz	w23, #7, .LBB30_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB30_3:
	tbnz	w23, #6, .LBB30_8
// %bb.4:
	tbz	w23, #9, .LBB30_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB30_8
.LBB30_6:
	add	x0, sp, #8              // =8
	mov	w2, #56
	mov	x1, x21
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB30_8
// %bb.7:
	ldr	x8, [x22, #40]
	mov	w1, #56
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x22, #64]
	str	x8, [x0, #16]
	ldr	w8, [x20, #4]
	str	w8, [x0, #24]
	ldr	w8, [x20]
	str	w8, [x0, #28]
	ldr	w8, [x20, #8]
	str	w8, [x0, #32]
	ldr	w8, [x20, #12]
	str	w8, [x0, #36]
	ldr	w8, [x20, #32]
	str	w8, [x0, #40]
	ldrb	w8, [x20, #36]
	str	w19, [x0, #48]
	strb	w8, [x0, #44]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB30_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB30_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldr	x23, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB30_10:
	bl	__stack_chk_fail
.Lfunc_end30:
	.size	trace_event_raw_event_f2fs_map_blocks, .Lfunc_end30-trace_event_raw_event_f2fs_map_blocks
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_map_blocks
	.type	perf_trace_f2fs_map_blocks,@function
perf_trace_f2fs_map_blocks:             // @perf_trace_f2fs_map_blocks
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x24, x30
	mov	w20, w3
	mov	x22, x2
	mov	x23, x1
	mov	x19, x0
	add	x21, x9, x8
	cbnz	x10, .LBB31_2
// %bb.1:
	ldr	x8, [x21]
	cbz	x8, .LBB31_4
.LBB31_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #60
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB31_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #60
	mov	w4, #1
	stp	x8, x24, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x23, #40]
	mov	x3, x19
	mov	x6, x21
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	str	x8, [x0, #16]
	ldr	w8, [x22, #4]
	str	w8, [x0, #24]
	ldr	w8, [x22]
	str	w8, [x0, #28]
	ldr	w8, [x22, #8]
	str	w8, [x0, #32]
	ldr	w8, [x22, #12]
	str	w8, [x0, #36]
	ldr	w8, [x22, #32]
	str	w8, [x0, #40]
	ldrb	w8, [x22, #36]
	str	w20, [x0, #48]
	strb	w8, [x0, #44]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB31_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB31_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB31_6:
	bl	__stack_chk_fail
.Lfunc_end31:
	.size	perf_trace_f2fs_map_blocks, .Lfunc_end31-perf_trace_f2fs_map_blocks
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_map_blocks
	.type	trace_event_define_fields_f2fs_map_blocks,@function
trace_event_define_fields_f2fs_map_blocks: // @trace_event_define_fields_f2fs_map_blocks
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB32_9
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB32_9
// %bb.2:
	adrp	x1, .L.str.108
	adrp	x2, .L.str.119
	add	x1, x1, :lo12:.L.str.108
	add	x2, x2, :lo12:.L.str.119
	mov	w3, #24
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB32_9
// %bb.3:
	adrp	x1, .L.str.108
	adrp	x2, .L.str.120
	add	x1, x1, :lo12:.L.str.108
	add	x2, x2, :lo12:.L.str.120
	mov	w3, #28
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB32_9
// %bb.4:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.121
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.121
	mov	w3, #32
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB32_9
// %bb.5:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.122
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.122
	mov	w3, #36
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB32_9
// %bb.6:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.123
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.123
	mov	w3, #40
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB32_9
// %bb.7:
	adrp	x1, .L.str.124
	adrp	x2, .L.str.125
	add	x1, x1, :lo12:.L.str.124
	add	x2, x2, :lo12:.L.str.125
	mov	w3, #44
	mov	w4, #1
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB32_9
// %bb.8:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.75
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.75
	mov	w3, #48
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB32_9:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end32:
	.size	trace_event_define_fields_f2fs_map_blocks, .Lfunc_end32-trace_event_define_fields_f2fs_map_blocks
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_background_gc
	.type	trace_event_raw_event_f2fs_background_gc,@function
trace_event_raw_event_f2fs_background_gc: // @trace_event_raw_event_f2fs_background_gc
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x24, [x0, #72]
	mov	w19, w4
	mov	w20, w3
	mov	w21, w2
	mov	x22, x0
	mov	x23, x1
	tbnz	w24, #8, .LBB33_6
// %bb.1:
	tbz	w24, #7, .LBB33_3
// %bb.2:
	mov	x0, x22
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB33_3:
	tbnz	w24, #6, .LBB33_8
// %bb.4:
	tbz	w24, #9, .LBB33_6
// %bb.5:
	mov	x0, x22
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB33_8
.LBB33_6:
	add	x0, sp, #8              // =8
	mov	w2, #24
	mov	x1, x22
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB33_8
// %bb.7:
	ldr	w8, [x23, #16]
	stp	w20, w19, [x0, #16]
	mov	w1, #24
	stp	w8, w21, [x0, #8]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB33_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB33_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB33_10:
	bl	__stack_chk_fail
.Lfunc_end33:
	.size	trace_event_raw_event_f2fs_background_gc, .Lfunc_end33-trace_event_raw_event_f2fs_background_gc
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_background_gc
	.type	perf_trace_f2fs_background_gc,@function
perf_trace_f2fs_background_gc:          // @perf_trace_f2fs_background_gc
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x25, [sp, #48]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x24, x30
	mov	w20, w4
	mov	w22, w3
	mov	w21, w2
	mov	x25, x1
	mov	x19, x0
	add	x23, x9, x8
	cbnz	x10, .LBB34_2
// %bb.1:
	ldr	x8, [x23]
	cbz	x8, .LBB34_4
.LBB34_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #28
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB34_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w10, #5
	mov	w1, #28
	str	x29, [x9, #232]
	stp	x8, x24, [x9, #248]
	str	x10, [x9, #264]
	ldr	w8, [x25, #16]
	stp	w22, w20, [x0, #16]
	mov	w4, #1
	mov	x3, x19
	stp	w8, w21, [x0, #8]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	mov	x6, x23
	mov	x7, xzr
	bl	perf_trace_run_bpf_submit
.LBB34_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB34_6
// %bb.5:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldr	x25, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB34_6:
	bl	__stack_chk_fail
.Lfunc_end34:
	.size	perf_trace_f2fs_background_gc, .Lfunc_end34-perf_trace_f2fs_background_gc
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_background_gc
	.type	trace_event_define_fields_f2fs_background_gc,@function
trace_event_define_fields_f2fs_background_gc: // @trace_event_define_fields_f2fs_background_gc
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB35_4
// %bb.1:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.127
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.127
	mov	w3, #12
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB35_4
// %bb.2:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.128
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.128
	mov	w3, #16
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB35_4
// %bb.3:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.103
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.103
	mov	w3, #20
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB35_4:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end35:
	.size	trace_event_define_fields_f2fs_background_gc, .Lfunc_end35-trace_event_define_fields_f2fs_background_gc
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_gc_begin
	.type	trace_event_raw_event_f2fs_gc_begin,@function
trace_event_raw_event_f2fs_gc_begin:    // @trace_event_raw_event_f2fs_gc_begin
// %bb.0:
	sub	sp, sp, #160            // =160
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x27, [sp, #80]          // 8-byte Folded Spill
	stp	x26, x25, [sp, #96]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]    // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]    // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x27, [x0, #72]
	mov	w19, w7
	mov	x20, x6
	mov	x21, x5
	mov	x22, x4
	mov	w23, w3
	mov	w24, w2
	mov	x26, x0
	mov	x25, x1
	tbnz	w27, #8, .LBB36_6
// %bb.1:
	tbz	w27, #7, .LBB36_3
// %bb.2:
	mov	x0, x26
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB36_3:
	tbnz	w27, #6, .LBB36_8
// %bb.4:
	tbz	w27, #9, .LBB36_6
// %bb.5:
	mov	x0, x26
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB36_8
.LBB36_6:
	add	x0, sp, #8              // =8
	mov	w2, #56
	mov	x1, x26
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB36_8
// %bb.7:
	ldr	w8, [x29, #112]
	ldr	w9, [x29, #104]
	ldr	w10, [x29, #96]
	ldr	w13, [x25, #16]
	and	w11, w24, #0x1
	and	w12, w23, #0x1
	stp	x22, x21, [x0, #16]
	str	x20, [x0, #32]
	strb	w11, [x0, #12]
	strb	w12, [x0, #13]
	str	w13, [x0, #8]
	stp	w19, w10, [x0, #40]
	stp	w9, w8, [x0, #48]
	add	x0, sp, #8              // =8
	mov	w1, #56
	bl	trace_event_buffer_commit
.LBB36_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB36_10
// %bb.9:
	ldp	x20, x19, [sp, #144]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #128]    // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]    // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]     // 16-byte Folded Reload
	ldr	x27, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #160            // =160
	ret
.LBB36_10:
	bl	__stack_chk_fail
.Lfunc_end36:
	.size	trace_event_raw_event_f2fs_gc_begin, .Lfunc_end36-trace_event_raw_event_f2fs_gc_begin
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_gc_begin
	.type	perf_trace_f2fs_gc_begin,@function
perf_trace_f2fs_gc_begin:               // @perf_trace_f2fs_gc_begin
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x28, x27, [sp, #48]     // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x26, x30
	mov	w20, w7
	mov	x21, x6
	mov	x23, x5
	mov	x24, x4
	mov	w27, w3
	mov	w28, w2
	mov	x25, x1
	mov	x19, x0
	add	x22, x9, x8
	cbnz	x10, .LBB37_2
// %bb.1:
	ldr	x8, [x22]
	cbz	x8, .LBB37_4
.LBB37_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #60
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB37_4
// %bb.3:
	ldr	x11, [sp, #16]
	mov	x8, sp
	ldr	w9, [x29, #112]
	ldr	w10, [x29, #104]
	stp	x8, x26, [x11, #248]
	mov	w8, #5
	str	x29, [x11, #232]
	str	x8, [x11, #264]
	ldr	w12, [x29, #96]
	ldr	w8, [x25, #16]
	and	w13, w28, #0x1
	and	w14, w27, #0x1
	strb	w13, [x0, #12]
	strb	w14, [x0, #13]
	stp	x24, x23, [x0, #16]
	str	x21, [x0, #32]
	stp	w20, w12, [x0, #40]
	stp	w10, w9, [x0, #48]
	str	w8, [x0, #8]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	mov	w1, #60
	mov	w4, #1
	mov	x3, x19
	mov	x6, x22
	mov	x7, xzr
	bl	perf_trace_run_bpf_submit
.LBB37_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB37_6
// %bb.5:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]     // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB37_6:
	bl	__stack_chk_fail
.Lfunc_end37:
	.size	perf_trace_f2fs_gc_begin, .Lfunc_end37-perf_trace_f2fs_gc_begin
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_gc_begin
	.type	trace_event_define_fields_f2fs_gc_begin,@function
trace_event_define_fields_f2fs_gc_begin: // @trace_event_define_fields_f2fs_gc_begin
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB38_10
// %bb.1:
	adrp	x1, .L.str.124
	adrp	x2, .L.str.130
	add	x1, x1, :lo12:.L.str.124
	add	x2, x2, :lo12:.L.str.130
	mov	w3, #12
	mov	w4, #1
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB38_10
// %bb.2:
	adrp	x1, .L.str.124
	adrp	x2, .L.str.131
	add	x1, x1, :lo12:.L.str.124
	add	x2, x2, :lo12:.L.str.131
	mov	w3, #13
	mov	w4, #1
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB38_10
// %bb.3:
	adrp	x1, .L.str.132
	adrp	x2, .L.str.133
	add	x1, x1, :lo12:.L.str.132
	add	x2, x2, :lo12:.L.str.133
	mov	w3, #16
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB38_10
// %bb.4:
	adrp	x1, .L.str.132
	adrp	x2, .L.str.134
	add	x1, x1, :lo12:.L.str.132
	add	x2, x2, :lo12:.L.str.134
	mov	w3, #24
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB38_10
// %bb.5:
	adrp	x1, .L.str.132
	adrp	x2, .L.str.135
	add	x1, x1, :lo12:.L.str.132
	add	x2, x2, :lo12:.L.str.135
	mov	w3, #32
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB38_10
// %bb.6:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.136
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.136
	mov	w3, #40
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB38_10
// %bb.7:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.137
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.137
	mov	w3, #44
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB38_10
// %bb.8:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.138
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.138
	mov	w3, #48
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB38_10
// %bb.9:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.139
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.139
	mov	w3, #52
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB38_10:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end38:
	.size	trace_event_define_fields_f2fs_gc_begin, .Lfunc_end38-trace_event_define_fields_f2fs_gc_begin
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_gc_end
	.type	trace_event_raw_event_f2fs_gc_end,@function
trace_event_raw_event_f2fs_gc_end:      // @trace_event_raw_event_f2fs_gc_end
// %bb.0:
	sub	sp, sp, #160            // =160
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x27, [sp, #80]          // 8-byte Folded Spill
	stp	x26, x25, [sp, #96]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]    // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]    // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x27, [x0, #72]
	mov	x19, x7
	mov	x20, x6
	mov	x21, x5
	mov	w23, w4
	mov	w24, w3
	mov	w22, w2
	mov	x26, x0
	mov	x25, x1
	tbnz	w27, #8, .LBB39_6
// %bb.1:
	tbz	w27, #7, .LBB39_3
// %bb.2:
	mov	x0, x26
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB39_3:
	tbnz	w27, #6, .LBB39_8
// %bb.4:
	tbz	w27, #9, .LBB39_6
// %bb.5:
	mov	x0, x26
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB39_8
.LBB39_6:
	add	x0, sp, #8              // =8
	mov	w2, #64
	mov	x1, x26
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB39_8
// %bb.7:
	ldr	w8, [x29, #120]
	ldr	w9, [x29, #112]
	ldr	w10, [x29, #104]
	ldr	w11, [x29, #96]
	ldr	w12, [x25, #16]
	stp	w24, w23, [x0, #16]
	stp	x21, x20, [x0, #24]
	str	x19, [x0, #40]
	stp	w12, w22, [x0, #8]
	stp	w11, w10, [x0, #48]
	stp	w9, w8, [x0, #56]
	add	x0, sp, #8              // =8
	mov	w1, #64
	bl	trace_event_buffer_commit
.LBB39_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB39_10
// %bb.9:
	ldp	x20, x19, [sp, #144]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #128]    // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]    // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]     // 16-byte Folded Reload
	ldr	x27, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #160            // =160
	ret
.LBB39_10:
	bl	__stack_chk_fail
.Lfunc_end39:
	.size	trace_event_raw_event_f2fs_gc_end, .Lfunc_end39-trace_event_raw_event_f2fs_gc_end
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_gc_end
	.type	perf_trace_f2fs_gc_end,@function
perf_trace_f2fs_gc_end:                 // @perf_trace_f2fs_gc_end
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x28, x27, [sp, #48]     // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x28, x30
	mov	x20, x7
	mov	x23, x6
	mov	x24, x5
	mov	w25, w4
	mov	w26, w3
	mov	w21, w2
	mov	x27, x1
	mov	x19, x0
	add	x22, x9, x8
	cbnz	x10, .LBB40_2
// %bb.1:
	ldr	x8, [x22]
	cbz	x8, .LBB40_4
.LBB40_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #68
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB40_4
// %bb.3:
	ldr	x10, [sp, #16]
	mov	x8, sp
	ldr	w9, [x29, #120]
	ldr	w11, [x29, #112]
	stp	x8, x28, [x10, #248]
	mov	w8, #5
	str	x29, [x10, #232]
	str	x8, [x10, #264]
	ldr	w12, [x29, #104]
	ldr	w13, [x29, #96]
	ldr	w8, [x27, #16]
	stp	w26, w25, [x0, #16]
	stp	x24, x23, [x0, #24]
	str	x20, [x0, #40]
	stp	w13, w12, [x0, #48]
	stp	w11, w9, [x0, #56]
	stp	w8, w21, [x0, #8]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	mov	w1, #68
	mov	w4, #1
	mov	x3, x19
	mov	x6, x22
	mov	x7, xzr
	bl	perf_trace_run_bpf_submit
.LBB40_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB40_6
// %bb.5:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]     // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB40_6:
	bl	__stack_chk_fail
.Lfunc_end40:
	.size	perf_trace_f2fs_gc_end, .Lfunc_end40-perf_trace_f2fs_gc_end
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_gc_end
	.type	trace_event_define_fields_f2fs_gc_end,@function
trace_event_define_fields_f2fs_gc_end:  // @trace_event_define_fields_f2fs_gc_end
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB41_11
// %bb.1:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.75
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.75
	mov	w3, #12
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB41_11
// %bb.2:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.141
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.141
	mov	w3, #16
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB41_11
// %bb.3:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.142
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.142
	mov	w3, #20
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB41_11
// %bb.4:
	adrp	x1, .L.str.132
	adrp	x2, .L.str.133
	add	x1, x1, :lo12:.L.str.132
	add	x2, x2, :lo12:.L.str.133
	mov	w3, #24
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB41_11
// %bb.5:
	adrp	x1, .L.str.132
	adrp	x2, .L.str.134
	add	x1, x1, :lo12:.L.str.132
	add	x2, x2, :lo12:.L.str.134
	mov	w3, #32
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB41_11
// %bb.6:
	adrp	x1, .L.str.132
	adrp	x2, .L.str.135
	add	x1, x1, :lo12:.L.str.132
	add	x2, x2, :lo12:.L.str.135
	mov	w3, #40
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB41_11
// %bb.7:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.136
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.136
	mov	w3, #48
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB41_11
// %bb.8:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.137
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.137
	mov	w3, #52
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB41_11
// %bb.9:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.138
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.138
	mov	w3, #56
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB41_11
// %bb.10:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.139
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.139
	mov	w3, #60
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB41_11:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end41:
	.size	trace_event_define_fields_f2fs_gc_end, .Lfunc_end41-trace_event_define_fields_f2fs_gc_end
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_get_victim
	.type	trace_event_raw_event_f2fs_get_victim,@function
trace_event_raw_event_f2fs_get_victim:  // @trace_event_raw_event_f2fs_get_victim
// %bb.0:
	sub	sp, sp, #160            // =160
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x27, [sp, #80]          // 8-byte Folded Spill
	stp	x26, x25, [sp, #96]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]    // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]    // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x27, [x0, #72]
	mov	w19, w7
	mov	w20, w6
	mov	w21, w5
	mov	x22, x4
	mov	w24, w3
	mov	w23, w2
	mov	x25, x0
	mov	x26, x1
	tbnz	w27, #8, .LBB42_6
// %bb.1:
	tbz	w27, #7, .LBB42_3
// %bb.2:
	mov	x0, x25
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB42_3:
	tbnz	w27, #6, .LBB42_8
// %bb.4:
	tbz	w27, #9, .LBB42_6
// %bb.5:
	mov	x0, x25
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB42_8
.LBB42_6:
	add	x0, sp, #8              // =8
	mov	w2, #52
	mov	x1, x25
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB42_8
// %bb.7:
	ldr	w8, [x26, #16]
	stp	w23, w24, [x0, #12]
	mov	w1, #52
	str	w8, [x0, #8]
	ldr	w8, [x22]
	str	w8, [x0, #20]
	ldr	w8, [x22, #4]
	str	w8, [x0, #24]
	ldr	w8, [x22, #40]
	str	w8, [x0, #28]
	ldr	w8, [x22, #28]
	str	w8, [x0, #32]
	ldr	w8, [x22, #24]
	stp	w20, w19, [x0, #44]
	stp	w8, w21, [x0, #36]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB42_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB42_10
// %bb.9:
	ldp	x20, x19, [sp, #144]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #128]    // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]    // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]     // 16-byte Folded Reload
	ldr	x27, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #160            // =160
	ret
.LBB42_10:
	bl	__stack_chk_fail
.Lfunc_end42:
	.size	trace_event_raw_event_f2fs_get_victim, .Lfunc_end42-trace_event_raw_event_f2fs_get_victim
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_get_victim
	.type	perf_trace_f2fs_get_victim,@function
perf_trace_f2fs_get_victim:             // @perf_trace_f2fs_get_victim
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x28, x27, [sp, #48]     // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x28, x30
	mov	w20, w7
	mov	w22, w6
	mov	w21, w5
	mov	x24, x4
	mov	w25, w3
	mov	w26, w2
	mov	x27, x1
	mov	x19, x0
	add	x23, x9, x8
	cbnz	x10, .LBB43_2
// %bb.1:
	ldr	x8, [x23]
	cbz	x8, .LBB43_4
.LBB43_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #52
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB43_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #52
	mov	w4, #1
	stp	x8, x28, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	w8, [x27, #16]
	stp	w26, w25, [x0, #12]
	mov	x3, x19
	mov	x6, x23
	str	w8, [x0, #8]
	ldr	w8, [x24]
	mov	x7, xzr
	str	w8, [x0, #20]
	ldr	w8, [x24, #4]
	str	w8, [x0, #24]
	ldr	w8, [x24, #40]
	str	w8, [x0, #28]
	ldr	w8, [x24, #28]
	str	w8, [x0, #32]
	ldr	w8, [x24, #24]
	stp	w22, w20, [x0, #44]
	stp	w8, w21, [x0, #36]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB43_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB43_6
// %bb.5:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]     // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB43_6:
	bl	__stack_chk_fail
.Lfunc_end43:
	.size	perf_trace_f2fs_get_victim, .Lfunc_end43-perf_trace_f2fs_get_victim
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_get_victim
	.type	trace_event_define_fields_f2fs_get_victim,@function
trace_event_define_fields_f2fs_get_victim: // @trace_event_define_fields_f2fs_get_victim
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB44_11
// %bb.1:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.144
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.144
	mov	w3, #12
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB44_11
// %bb.2:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.145
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.145
	mov	w3, #16
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB44_11
// %bb.3:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.146
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.146
	mov	w3, #20
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB44_11
// %bb.4:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.147
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.147
	mov	w3, #24
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB44_11
// %bb.5:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.148
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.148
	mov	w3, #28
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB44_11
// %bb.6:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.149
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.149
	mov	w3, #32
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB44_11
// %bb.7:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.150
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.150
	mov	w3, #36
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB44_11
// %bb.8:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.151
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.151
	mov	w3, #40
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB44_11
// %bb.9:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.128
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.128
	mov	w3, #44
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB44_11
// %bb.10:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.103
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.103
	mov	w3, #48
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB44_11:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end44:
	.size	trace_event_define_fields_f2fs_get_victim, .Lfunc_end44-trace_event_define_fields_f2fs_get_victim
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_lookup_start
	.type	trace_event_raw_event_f2fs_lookup_start,@function
trace_event_raw_event_f2fs_lookup_start: // @trace_event_raw_event_f2fs_lookup_start
// %bb.0:
	sub	sp, sp, #144            // =144
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x25, [sp, #80]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #96]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]    // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x23, [x0, #72]
	mov	w19, w3
	mov	x20, x2
	mov	x22, x0
	mov	x21, x1
	tbnz	w23, #8, .LBB45_6
// %bb.1:
	tbz	w23, #7, .LBB45_3
// %bb.2:
	mov	x0, x22
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB45_3:
	tbnz	w23, #6, .LBB45_8
// %bb.4:
	tbz	w23, #9, .LBB45_6
// %bb.5:
	mov	x0, x22
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB45_8
.LBB45_6:
	ldr	x8, [x20, #40]
	adrp	x24, .L.str.96
	add	x24, x24, :lo12:.L.str.96
	cmp	x8, #0                  // =0
	csel	x0, x24, x8, eq
	bl	strlen
	add	w25, w0, #1             // =1
	sxtw	x8, w25
	add	x23, x8, #32            // =32
	add	x0, sp, #8              // =8
	mov	x1, x22
	mov	x2, x23
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB45_8
// %bb.7:
	mov	w8, #32
	bfi	w8, w25, #16, #16
	str	w8, [x0, #24]
	ldr	x8, [x21, #40]
	mov	x22, x0
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x21, #64]
	str	x8, [x0, #16]
	ldr	x8, [x20, #40]
	add	x0, x0, #32             // =32
	cmp	x8, #0                  // =0
	csel	x1, x24, x8, eq
	bl	strcpy
	add	x0, sp, #8              // =8
	mov	x1, x23
	str	w19, [x22, #28]
	bl	trace_event_buffer_commit
.LBB45_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB45_10
// %bb.9:
	ldp	x20, x19, [sp, #128]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]    // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]     // 16-byte Folded Reload
	ldr	x25, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #144            // =144
	ret
.LBB45_10:
	bl	__stack_chk_fail
.Lfunc_end45:
	.size	trace_event_raw_event_f2fs_lookup_start, .Lfunc_end45-trace_event_raw_event_f2fs_lookup_start
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_lookup_start
	.type	perf_trace_f2fs_lookup_start,@function
perf_trace_f2fs_lookup_start:           // @perf_trace_f2fs_lookup_start
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x28, x27, [sp, #48]     // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x2, #40]
	adrp	x28, .L.str.96
	add	x28, x28, :lo12:.L.str.96
	mov	x19, x0
	cmp	x8, #0                  // =0
	csel	x0, x28, x8, eq
	mov	x24, x30
	mov	w20, w3
	mov	x21, x2
	mov	x23, x1
	bl	strlen
	ldr	x8, [x19, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x19, #128]
	mov	x27, x0
	add	x22, x9, x8
	cbnz	x10, .LBB46_2
// %bb.1:
	ldr	x8, [x22]
	cbz	x8, .LBB46_4
.LBB46_2:
	add	w8, w27, #44            // =44
	and	w8, w8, #0xfffffff8
	sub	w25, w8, #4             // =4
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, w25
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB46_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	w10, #32
	mov	x8, sp
	movk	w10, #1, lsl #16
	add	w10, w10, w27, lsl #16
	stp	x8, x24, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	str	w10, [x0, #24]
	ldr	x8, [x23, #40]
	mov	x26, x0
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	str	x8, [x0, #16]
	ldr	x8, [x21, #40]
	add	x0, x0, #32             // =32
	cmp	x8, #0                  // =0
	csel	x1, x28, x8, eq
	bl	strcpy
	str	w20, [x26, #28]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	mov	w4, #1
	mov	x0, x26
	mov	w1, w25
	mov	x3, x19
	mov	x6, x22
	mov	x7, xzr
	bl	perf_trace_run_bpf_submit
.LBB46_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB46_6
// %bb.5:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]     // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB46_6:
	bl	__stack_chk_fail
.Lfunc_end46:
	.size	perf_trace_f2fs_lookup_start, .Lfunc_end46-perf_trace_f2fs_lookup_start
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_lookup_start
	.type	trace_event_define_fields_f2fs_lookup_start,@function
trace_event_define_fields_f2fs_lookup_start: // @trace_event_define_fields_f2fs_lookup_start
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB47_3
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB47_3
// %bb.2:
	adrp	x1, .L.str.97
	adrp	x2, .L.str.98
	add	x1, x1, :lo12:.L.str.97
	add	x2, x2, :lo12:.L.str.98
	mov	w3, #24
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	adrp	x1, .L.str.68
	adrp	x2, .L.str.169
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.169
	mov	w3, #28
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB47_3:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end47:
	.size	trace_event_define_fields_f2fs_lookup_start, .Lfunc_end47-trace_event_define_fields_f2fs_lookup_start
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_lookup_end
	.type	trace_event_raw_event_f2fs_lookup_end,@function
trace_event_raw_event_f2fs_lookup_end:  // @trace_event_raw_event_f2fs_lookup_end
// %bb.0:
	sub	sp, sp, #144            // =144
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x26, x25, [sp, #80]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]    // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x24, [x0, #72]
	mov	w19, w4
	mov	w20, w3
	mov	x21, x2
	mov	x23, x0
	mov	x22, x1
	tbnz	w24, #8, .LBB48_6
// %bb.1:
	tbz	w24, #7, .LBB48_3
// %bb.2:
	mov	x0, x23
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB48_3:
	tbnz	w24, #6, .LBB48_8
// %bb.4:
	tbz	w24, #9, .LBB48_6
// %bb.5:
	mov	x0, x23
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB48_8
.LBB48_6:
	ldr	x8, [x21, #40]
	adrp	x25, .L.str.96
	add	x25, x25, :lo12:.L.str.96
	cmp	x8, #0                  // =0
	csel	x0, x25, x8, eq
	bl	strlen
	add	w26, w0, #1             // =1
	sxtw	x8, w26
	add	x24, x8, #40            // =40
	add	x0, sp, #8              // =8
	mov	x1, x23
	mov	x2, x24
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB48_8
// %bb.7:
	mov	w8, #36
	bfi	w8, w26, #16, #16
	str	w8, [x0, #24]
	ldr	x8, [x22, #40]
	mov	x23, x0
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x22, #64]
	str	x8, [x0, #16]
	ldr	x8, [x21, #40]
	add	x0, x0, #36             // =36
	cmp	x8, #0                  // =0
	csel	x1, x25, x8, eq
	bl	strcpy
	add	x0, sp, #8              // =8
	mov	x1, x24
	stp	w20, w19, [x23, #28]
	bl	trace_event_buffer_commit
.LBB48_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB48_10
// %bb.9:
	ldp	x20, x19, [sp, #128]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]    // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #144            // =144
	ret
.LBB48_10:
	bl	__stack_chk_fail
.Lfunc_end48:
	.size	trace_event_raw_event_f2fs_lookup_end, .Lfunc_end48-trace_event_raw_event_f2fs_lookup_end
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_lookup_end
	.type	perf_trace_f2fs_lookup_end,@function
perf_trace_f2fs_lookup_end:             // @perf_trace_f2fs_lookup_end
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x28, x27, [sp, #48]     // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x2, #40]
	adrp	x9, .L.str.96
	add	x9, x9, :lo12:.L.str.96
	mov	x19, x0
	cmp	x8, #0                  // =0
	csel	x0, x9, x8, eq
	mov	x25, x30
	mov	w20, w4
	mov	w21, w3
	mov	x22, x2
	mov	x24, x1
	bl	strlen
	ldr	x8, [x19, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x19, #128]
	mov	x28, x0
	add	x23, x9, x8
	cbnz	x10, .LBB49_2
// %bb.1:
	ldr	x8, [x23]
	cbz	x8, .LBB49_4
.LBB49_2:
	add	w8, w28, #52            // =52
	and	w8, w8, #0xfffffff8
	sub	w26, w8, #4             // =4
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, w26
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB49_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	w10, #36
	mov	x8, sp
	movk	w10, #1, lsl #16
	add	w10, w10, w28, lsl #16
	stp	x8, x25, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	str	w10, [x0, #24]
	ldr	x8, [x24, #40]
	adrp	x9, .L.str.96
	add	x9, x9, :lo12:.L.str.96
	mov	x27, x0
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x24, #64]
	str	x8, [x0, #16]
	ldr	x8, [x22, #40]
	add	x0, x0, #36             // =36
	cmp	x8, #0                  // =0
	csel	x1, x9, x8, eq
	bl	strcpy
	stp	w21, w20, [x27, #28]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	mov	w4, #1
	mov	x0, x27
	mov	w1, w26
	mov	x3, x19
	mov	x6, x23
	mov	x7, xzr
	bl	perf_trace_run_bpf_submit
.LBB49_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB49_6
// %bb.5:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]     // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB49_6:
	bl	__stack_chk_fail
.Lfunc_end49:
	.size	perf_trace_f2fs_lookup_end, .Lfunc_end49-perf_trace_f2fs_lookup_end
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_lookup_end
	.type	trace_event_define_fields_f2fs_lookup_end,@function
trace_event_define_fields_f2fs_lookup_end: // @trace_event_define_fields_f2fs_lookup_end
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB50_4
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB50_4
// %bb.2:
	adrp	x1, .L.str.97
	adrp	x2, .L.str.98
	add	x1, x1, :lo12:.L.str.97
	add	x2, x2, :lo12:.L.str.98
	mov	w3, #24
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	adrp	x1, .L.str.100
	adrp	x2, .L.str.171
	add	x1, x1, :lo12:.L.str.100
	add	x2, x2, :lo12:.L.str.171
	mov	w3, #28
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB50_4
// %bb.3:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.113
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.113
	mov	w3, #32
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB50_4:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end50:
	.size	trace_event_define_fields_f2fs_lookup_end, .Lfunc_end50-trace_event_define_fields_f2fs_lookup_end
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_readdir
	.type	trace_event_raw_event_f2fs_readdir,@function
trace_event_raw_event_f2fs_readdir:     // @trace_event_raw_event_f2fs_readdir
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x24, [x0, #72]
	mov	w19, w4
	mov	x21, x3
	mov	x20, x2
	mov	x22, x0
	mov	x23, x1
	tbnz	w24, #8, .LBB51_6
// %bb.1:
	tbz	w24, #7, .LBB51_3
// %bb.2:
	mov	x0, x22
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB51_3:
	tbnz	w24, #6, .LBB51_8
// %bb.4:
	tbz	w24, #9, .LBB51_6
// %bb.5:
	mov	x0, x22
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB51_8
.LBB51_6:
	add	x0, sp, #8              // =8
	mov	w2, #48
	mov	x1, x22
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB51_8
// %bb.7:
	ldr	x8, [x23, #40]
	mov	w1, #48
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	stp	x20, x21, [x0, #24]
	str	w19, [x0, #40]
	str	x8, [x0, #16]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB51_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB51_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB51_10:
	bl	__stack_chk_fail
.Lfunc_end51:
	.size	trace_event_raw_event_f2fs_readdir, .Lfunc_end51-trace_event_raw_event_f2fs_readdir
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_readdir
	.type	perf_trace_f2fs_readdir,@function
perf_trace_f2fs_readdir:                // @perf_trace_f2fs_readdir
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x25, [sp, #48]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x25, x30
	mov	w20, w4
	mov	x22, x3
	mov	x21, x2
	mov	x24, x1
	mov	x19, x0
	add	x23, x9, x8
	cbnz	x10, .LBB52_2
// %bb.1:
	ldr	x8, [x23]
	cbz	x8, .LBB52_4
.LBB52_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #52
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB52_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #52
	mov	w4, #1
	stp	x8, x25, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x24, #40]
	mov	x3, x19
	mov	x6, x23
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x24, #64]
	stp	x21, x22, [x0, #24]
	str	w20, [x0, #40]
	str	x8, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB52_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB52_6
// %bb.5:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldr	x25, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB52_6:
	bl	__stack_chk_fail
.Lfunc_end52:
	.size	perf_trace_f2fs_readdir, .Lfunc_end52-perf_trace_f2fs_readdir
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_readdir
	.type	trace_event_define_fields_f2fs_readdir,@function
trace_event_define_fields_f2fs_readdir: // @trace_event_define_fields_f2fs_readdir
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB53_5
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB53_5
// %bb.2:
	adrp	x1, .L.str.66
	adrp	x2, .L.str.173
	add	x1, x1, :lo12:.L.str.66
	add	x2, x2, :lo12:.L.str.173
	mov	w3, #24
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB53_5
// %bb.3:
	adrp	x1, .L.str.66
	adrp	x2, .L.str.174
	add	x1, x1, :lo12:.L.str.66
	add	x2, x2, :lo12:.L.str.174
	mov	w3, #32
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB53_5
// %bb.4:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.113
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.113
	mov	w3, #40
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB53_5:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end53:
	.size	trace_event_define_fields_f2fs_readdir, .Lfunc_end53-trace_event_define_fields_f2fs_readdir
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_fallocate
	.type	trace_event_raw_event_f2fs_fallocate,@function
trace_event_raw_event_f2fs_fallocate:   // @trace_event_raw_event_f2fs_fallocate
// %bb.0:
	sub	sp, sp, #144            // =144
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x25, [sp, #80]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #96]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]    // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x25, [x0, #72]
	mov	w19, w5
	mov	x20, x4
	mov	x21, x3
	mov	w22, w2
	mov	x24, x0
	mov	x23, x1
	tbnz	w25, #8, .LBB54_6
// %bb.1:
	tbz	w25, #7, .LBB54_3
// %bb.2:
	mov	x0, x24
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB54_3:
	tbnz	w25, #6, .LBB54_8
// %bb.4:
	tbz	w25, #9, .LBB54_6
// %bb.5:
	mov	x0, x24
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB54_8
.LBB54_6:
	add	x0, sp, #8              // =8
	mov	w2, #72
	mov	x1, x24
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB54_8
// %bb.7:
	ldr	x8, [x23, #40]
	mov	w1, #72
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	str	w22, [x0, #24]
	stp	x21, x20, [x0, #32]
	str	x8, [x0, #16]
	ldr	x8, [x23, #80]
	str	x8, [x0, #48]
	ldr	x8, [x23, #144]
	str	w19, [x0, #64]
	str	x8, [x0, #56]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB54_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB54_10
// %bb.9:
	ldp	x20, x19, [sp, #128]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]    // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]     // 16-byte Folded Reload
	ldr	x25, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #144            // =144
	ret
.LBB54_10:
	bl	__stack_chk_fail
.Lfunc_end54:
	.size	trace_event_raw_event_f2fs_fallocate, .Lfunc_end54-trace_event_raw_event_f2fs_fallocate
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_fallocate
	.type	perf_trace_f2fs_fallocate,@function
perf_trace_f2fs_fallocate:              // @perf_trace_f2fs_fallocate
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x26, x25, [sp, #48]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x26, x30
	mov	w20, w5
	mov	x23, x4
	mov	x24, x3
	mov	w25, w2
	mov	x22, x1
	mov	x19, x0
	add	x21, x9, x8
	cbnz	x10, .LBB55_2
// %bb.1:
	ldr	x8, [x21]
	cbz	x8, .LBB55_4
.LBB55_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #76
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB55_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #76
	mov	w4, #1
	stp	x8, x26, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x22, #40]
	mov	x3, x19
	mov	x6, x21
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x22, #64]
	str	w25, [x0, #24]
	stp	x24, x23, [x0, #32]
	str	x8, [x0, #16]
	ldr	x8, [x22, #80]
	str	x8, [x0, #48]
	ldr	x8, [x22, #144]
	str	w20, [x0, #64]
	str	x8, [x0, #56]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB55_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB55_6
// %bb.5:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB55_6:
	bl	__stack_chk_fail
.Lfunc_end55:
	.size	perf_trace_f2fs_fallocate, .Lfunc_end55-perf_trace_f2fs_fallocate
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_fallocate
	.type	trace_event_define_fields_f2fs_fallocate,@function
trace_event_define_fields_f2fs_fallocate: // @trace_event_define_fields_f2fs_fallocate
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB56_8
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB56_8
// %bb.2:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.65
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.65
	mov	w3, #24
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB56_8
// %bb.3:
	adrp	x1, .L.str.66
	adrp	x2, .L.str.116
	add	x1, x1, :lo12:.L.str.66
	add	x2, x2, :lo12:.L.str.116
	mov	w3, #32
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB56_8
// %bb.4:
	adrp	x1, .L.str.66
	adrp	x2, .L.str.176
	add	x1, x1, :lo12:.L.str.66
	add	x2, x2, :lo12:.L.str.176
	mov	w3, #40
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB56_8
// %bb.5:
	adrp	x1, .L.str.66
	adrp	x2, .L.str.67
	add	x1, x1, :lo12:.L.str.66
	add	x2, x2, :lo12:.L.str.67
	mov	w3, #48
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB56_8
// %bb.6:
	adrp	x1, .L.str.70
	adrp	x2, .L.str.71
	add	x1, x1, :lo12:.L.str.70
	add	x2, x2, :lo12:.L.str.71
	mov	w3, #56
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB56_8
// %bb.7:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.75
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.75
	mov	w3, #64
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB56_8:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end56:
	.size	trace_event_define_fields_f2fs_fallocate, .Lfunc_end56-trace_event_define_fields_f2fs_fallocate
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_direct_IO_enter
	.type	trace_event_raw_event_f2fs_direct_IO_enter,@function
trace_event_raw_event_f2fs_direct_IO_enter: // @trace_event_raw_event_f2fs_direct_IO_enter
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x24, [x0, #72]
	mov	w19, w4
	mov	x21, x3
	mov	x20, x2
	mov	x22, x0
	mov	x23, x1
	tbnz	w24, #8, .LBB57_6
// %bb.1:
	tbz	w24, #7, .LBB57_3
// %bb.2:
	mov	x0, x22
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB57_3:
	tbnz	w24, #6, .LBB57_8
// %bb.4:
	tbz	w24, #9, .LBB57_6
// %bb.5:
	mov	x0, x22
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB57_8
.LBB57_6:
	add	x0, sp, #8              // =8
	mov	w2, #48
	mov	x1, x22
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB57_8
// %bb.7:
	ldr	x8, [x23, #40]
	mov	w1, #48
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	stp	x20, x21, [x0, #24]
	str	w19, [x0, #40]
	str	x8, [x0, #16]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB57_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB57_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB57_10:
	bl	__stack_chk_fail
.Lfunc_end57:
	.size	trace_event_raw_event_f2fs_direct_IO_enter, .Lfunc_end57-trace_event_raw_event_f2fs_direct_IO_enter
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_direct_IO_enter
	.type	perf_trace_f2fs_direct_IO_enter,@function
perf_trace_f2fs_direct_IO_enter:        // @perf_trace_f2fs_direct_IO_enter
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x25, [sp, #48]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x25, x30
	mov	w20, w4
	mov	x22, x3
	mov	x21, x2
	mov	x24, x1
	mov	x19, x0
	add	x23, x9, x8
	cbnz	x10, .LBB58_2
// %bb.1:
	ldr	x8, [x23]
	cbz	x8, .LBB58_4
.LBB58_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #52
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB58_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #52
	mov	w4, #1
	stp	x8, x25, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x24, #40]
	mov	x3, x19
	mov	x6, x23
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x24, #64]
	stp	x21, x22, [x0, #24]
	str	w20, [x0, #40]
	str	x8, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB58_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB58_6
// %bb.5:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldr	x25, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB58_6:
	bl	__stack_chk_fail
.Lfunc_end58:
	.size	perf_trace_f2fs_direct_IO_enter, .Lfunc_end58-perf_trace_f2fs_direct_IO_enter
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_direct_IO_enter
	.type	trace_event_define_fields_f2fs_direct_IO_enter,@function
trace_event_define_fields_f2fs_direct_IO_enter: // @trace_event_define_fields_f2fs_direct_IO_enter
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB59_5
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB59_5
// %bb.2:
	adrp	x1, .L.str.66
	adrp	x2, .L.str.178
	add	x1, x1, :lo12:.L.str.66
	add	x2, x2, :lo12:.L.str.178
	mov	w3, #24
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB59_5
// %bb.3:
	adrp	x1, .L.str.115
	adrp	x2, .L.str.176
	add	x1, x1, :lo12:.L.str.115
	add	x2, x2, :lo12:.L.str.176
	mov	w3, #32
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB59_5
// %bb.4:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.179
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.179
	mov	w3, #40
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB59_5:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end59:
	.size	trace_event_define_fields_f2fs_direct_IO_enter, .Lfunc_end59-trace_event_define_fields_f2fs_direct_IO_enter
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_direct_IO_exit
	.type	trace_event_raw_event_f2fs_direct_IO_exit,@function
trace_event_raw_event_f2fs_direct_IO_exit: // @trace_event_raw_event_f2fs_direct_IO_exit
// %bb.0:
	sub	sp, sp, #144            // =144
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x25, [sp, #80]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #96]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]    // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x25, [x0, #72]
	mov	w19, w5
	mov	w20, w4
	mov	x22, x3
	mov	x21, x2
	mov	x23, x0
	mov	x24, x1
	tbnz	w25, #8, .LBB60_6
// %bb.1:
	tbz	w25, #7, .LBB60_3
// %bb.2:
	mov	x0, x23
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB60_3:
	tbnz	w25, #6, .LBB60_8
// %bb.4:
	tbz	w25, #9, .LBB60_6
// %bb.5:
	mov	x0, x23
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB60_8
.LBB60_6:
	add	x0, sp, #8              // =8
	mov	w2, #48
	mov	x1, x23
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB60_8
// %bb.7:
	ldr	x8, [x24, #40]
	mov	w1, #48
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x24, #64]
	stp	x21, x22, [x0, #24]
	stp	w20, w19, [x0, #40]
	str	x8, [x0, #16]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB60_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB60_10
// %bb.9:
	ldp	x20, x19, [sp, #128]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]    // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]     // 16-byte Folded Reload
	ldr	x25, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #144            // =144
	ret
.LBB60_10:
	bl	__stack_chk_fail
.Lfunc_end60:
	.size	trace_event_raw_event_f2fs_direct_IO_exit, .Lfunc_end60-trace_event_raw_event_f2fs_direct_IO_exit
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_direct_IO_exit
	.type	perf_trace_f2fs_direct_IO_exit,@function
perf_trace_f2fs_direct_IO_exit:         // @perf_trace_f2fs_direct_IO_exit
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x26, x25, [sp, #48]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x26, x30
	mov	w20, w5
	mov	w21, w4
	mov	x24, x3
	mov	x22, x2
	mov	x25, x1
	mov	x19, x0
	add	x23, x9, x8
	cbnz	x10, .LBB61_2
// %bb.1:
	ldr	x8, [x23]
	cbz	x8, .LBB61_4
.LBB61_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #52
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB61_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #52
	mov	w4, #1
	stp	x8, x26, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x25, #40]
	mov	x3, x19
	mov	x6, x23
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x25, #64]
	stp	x22, x24, [x0, #24]
	stp	w21, w20, [x0, #40]
	str	x8, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB61_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB61_6
// %bb.5:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB61_6:
	bl	__stack_chk_fail
.Lfunc_end61:
	.size	perf_trace_f2fs_direct_IO_exit, .Lfunc_end61-perf_trace_f2fs_direct_IO_exit
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_direct_IO_exit
	.type	trace_event_define_fields_f2fs_direct_IO_exit,@function
trace_event_define_fields_f2fs_direct_IO_exit: // @trace_event_define_fields_f2fs_direct_IO_exit
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB62_6
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB62_6
// %bb.2:
	adrp	x1, .L.str.66
	adrp	x2, .L.str.178
	add	x1, x1, :lo12:.L.str.66
	add	x2, x2, :lo12:.L.str.178
	mov	w3, #24
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB62_6
// %bb.3:
	adrp	x1, .L.str.115
	adrp	x2, .L.str.176
	add	x1, x1, :lo12:.L.str.115
	add	x2, x2, :lo12:.L.str.176
	mov	w3, #32
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB62_6
// %bb.4:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.179
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.179
	mov	w3, #40
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB62_6
// %bb.5:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.75
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.75
	mov	w3, #44
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB62_6:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end62:
	.size	trace_event_define_fields_f2fs_direct_IO_exit, .Lfunc_end62-trace_event_define_fields_f2fs_direct_IO_exit
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_reserve_new_blocks
	.type	trace_event_raw_event_f2fs_reserve_new_blocks,@function
trace_event_raw_event_f2fs_reserve_new_blocks: // @trace_event_raw_event_f2fs_reserve_new_blocks
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x24, [x0, #72]
	mov	x19, x4
	mov	w21, w3
	mov	w20, w2
	mov	x22, x0
	mov	x23, x1
	tbnz	w24, #8, .LBB63_6
// %bb.1:
	tbz	w24, #7, .LBB63_3
// %bb.2:
	mov	x0, x22
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB63_3:
	tbnz	w24, #6, .LBB63_8
// %bb.4:
	tbz	w24, #9, .LBB63_6
// %bb.5:
	mov	x0, x22
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB63_8
.LBB63_6:
	add	x0, sp, #8              // =8
	mov	w2, #32
	mov	x1, x22
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB63_8
// %bb.7:
	ldr	x8, [x23, #40]
	mov	w1, #32
	ldr	w8, [x8, #16]
	stp	w20, w21, [x0, #12]
	str	x19, [x0, #24]
	str	w8, [x0, #8]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB63_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB63_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB63_10:
	bl	__stack_chk_fail
.Lfunc_end63:
	.size	trace_event_raw_event_f2fs_reserve_new_blocks, .Lfunc_end63-trace_event_raw_event_f2fs_reserve_new_blocks
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_reserve_new_blocks
	.type	perf_trace_f2fs_reserve_new_blocks,@function
perf_trace_f2fs_reserve_new_blocks:     // @perf_trace_f2fs_reserve_new_blocks
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x25, [sp, #48]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x25, x30
	mov	x20, x4
	mov	w22, w3
	mov	w21, w2
	mov	x24, x1
	mov	x19, x0
	add	x23, x9, x8
	cbnz	x10, .LBB64_2
// %bb.1:
	ldr	x8, [x23]
	cbz	x8, .LBB64_4
.LBB64_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #36
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB64_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #36
	mov	w4, #1
	stp	x8, x25, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x24, #40]
	mov	x3, x19
	mov	x6, x23
	mov	x7, xzr
	ldr	w8, [x8, #16]
	stp	w21, w22, [x0, #12]
	str	x20, [x0, #24]
	str	w8, [x0, #8]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB64_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB64_6
// %bb.5:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldr	x25, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB64_6:
	bl	__stack_chk_fail
.Lfunc_end64:
	.size	perf_trace_f2fs_reserve_new_blocks, .Lfunc_end64-perf_trace_f2fs_reserve_new_blocks
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_reserve_new_blocks
	.type	trace_event_define_fields_f2fs_reserve_new_blocks,@function
trace_event_define_fields_f2fs_reserve_new_blocks: // @trace_event_define_fields_f2fs_reserve_new_blocks
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB65_4
// %bb.1:
	adrp	x1, .L.str.100
	adrp	x2, .L.str.101
	add	x1, x1, :lo12:.L.str.100
	add	x2, x2, :lo12:.L.str.101
	mov	w3, #12
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB65_4
// %bb.2:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.182
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.182
	mov	w3, #16
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB65_4
// %bb.3:
	adrp	x1, .L.str.70
	adrp	x2, .L.str.183
	add	x1, x1, :lo12:.L.str.70
	add	x2, x2, :lo12:.L.str.183
	mov	w3, #24
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB65_4:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end65:
	.size	trace_event_define_fields_f2fs_reserve_new_blocks, .Lfunc_end65-trace_event_define_fields_f2fs_reserve_new_blocks
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs__submit_page_bio
	.type	trace_event_raw_event_f2fs__submit_page_bio,@function
trace_event_raw_event_f2fs__submit_page_bio: // @trace_event_raw_event_f2fs__submit_page_bio
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x22, [x0, #72]
	mov	x19, x2
	mov	x21, x0
	mov	x20, x1
	tbnz	w22, #8, .LBB66_6
// %bb.1:
	tbz	w22, #7, .LBB66_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB66_3:
	tbnz	w22, #6, .LBB66_14
// %bb.4:
	tbz	w22, #9, .LBB66_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB66_14
.LBB66_6:
	add	x0, sp, #8              // =8
	mov	w2, #56
	mov	x1, x21
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB66_14
// %bb.7:
	ldr	x8, [x20, #8]
	mov	x21, x0
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x20, x9, eq
	ldr	x8, [x8]
	tbz	w8, #19, .LBB66_9
// %bb.8:
	ldr	x8, [x20]
	tbnz	w8, #10, .LBB66_16
.LBB66_9:
	ldr	x0, [x20, #24]
.LBB66_10:
	ldr	x8, [x0]
	ldr	x8, [x8, #40]
	ldr	w8, [x8, #16]
	str	w8, [x21, #8]
	ldr	x8, [x20, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x20, x9, eq
	ldr	x8, [x8]
	tbz	w8, #19, .LBB66_12
// %bb.11:
	ldr	x8, [x20]
	tbnz	w8, #10, .LBB66_17
.LBB66_12:
	ldr	x0, [x20, #24]
.LBB66_13:
	ldr	x8, [x0]
	add	x0, sp, #8              // =8
	mov	w1, #56
	ldr	x8, [x8, #64]
	str	x8, [x21, #16]
	ldr	x8, [x20, #32]
	str	x8, [x21, #24]
	ldr	w8, [x19, #32]
	str	w8, [x21, #32]
	ldr	w8, [x19, #28]
	str	w8, [x21, #36]
	ldr	w8, [x19, #20]
	str	w8, [x21, #40]
	ldr	w8, [x19, #24]
	str	w8, [x21, #44]
	ldr	w8, [x19, #16]
	str	w8, [x21, #48]
	ldr	w8, [x19, #12]
	str	w8, [x21, #52]
	bl	trace_event_buffer_commit
.LBB66_14:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB66_18
// %bb.15:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB66_16:
	mov	x0, x20
	bl	__page_file_mapping
	b	.LBB66_10
.LBB66_17:
	mov	x0, x20
	bl	__page_file_mapping
	b	.LBB66_13
.LBB66_18:
	bl	__stack_chk_fail
.Lfunc_end66:
	.size	trace_event_raw_event_f2fs__submit_page_bio, .Lfunc_end66-trace_event_raw_event_f2fs__submit_page_bio
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs__submit_page_bio
	.type	perf_trace_f2fs__submit_page_bio,@function
perf_trace_f2fs__submit_page_bio:       // @perf_trace_f2fs__submit_page_bio
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x24, x30
	mov	x21, x2
	mov	x22, x1
	mov	x19, x0
	add	x20, x9, x8
	cbnz	x10, .LBB67_2
// %bb.1:
	ldr	x8, [x20]
	cbz	x8, .LBB67_10
.LBB67_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #60
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB67_10
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w10, #5
	mov	x23, x0
	str	x29, [x9, #232]
	stp	x8, x24, [x9, #248]
	str	x10, [x9, #264]
	ldr	x8, [x22, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x22, x9, eq
	ldr	x8, [x8]
	tbz	w8, #19, .LBB67_5
// %bb.4:
	ldr	x8, [x22]
	tbnz	w8, #10, .LBB67_12
.LBB67_5:
	ldr	x0, [x22, #24]
.LBB67_6:
	ldr	x8, [x0]
	ldr	x8, [x8, #40]
	ldr	w8, [x8, #16]
	str	w8, [x23, #8]
	ldr	x8, [x22, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x22, x9, eq
	ldr	x8, [x8]
	tbz	w8, #19, .LBB67_8
// %bb.7:
	ldr	x8, [x22]
	tbnz	w8, #10, .LBB67_13
.LBB67_8:
	ldr	x0, [x22, #24]
.LBB67_9:
	ldr	x8, [x0]
	mov	w1, #60
	mov	w4, #1
	mov	x0, x23
	ldr	x8, [x8, #64]
	mov	x3, x19
	mov	x6, x20
	mov	x7, xzr
	str	x8, [x23, #16]
	ldr	x8, [x22, #32]
	str	x8, [x23, #24]
	ldr	w8, [x21, #32]
	str	w8, [x23, #32]
	ldr	w8, [x21, #28]
	str	w8, [x23, #36]
	ldr	w8, [x21, #20]
	str	w8, [x23, #40]
	ldr	w8, [x21, #24]
	str	w8, [x23, #44]
	ldr	w8, [x21, #16]
	str	w8, [x23, #48]
	ldr	w8, [x21, #12]
	str	w8, [x23, #52]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB67_10:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB67_14
// %bb.11:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB67_12:
	mov	x0, x22
	bl	__page_file_mapping
	b	.LBB67_6
.LBB67_13:
	mov	x0, x22
	bl	__page_file_mapping
	b	.LBB67_9
.LBB67_14:
	bl	__stack_chk_fail
.Lfunc_end67:
	.size	perf_trace_f2fs__submit_page_bio, .Lfunc_end67-perf_trace_f2fs__submit_page_bio
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs__submit_page_bio
	.type	trace_event_define_fields_f2fs__submit_page_bio,@function
trace_event_define_fields_f2fs__submit_page_bio: // @trace_event_define_fields_f2fs__submit_page_bio
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB68_9
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB68_9
// %bb.2:
	adrp	x1, .L.str.115
	adrp	x2, .L.str.185
	add	x1, x1, :lo12:.L.str.115
	add	x2, x2, :lo12:.L.str.185
	mov	w3, #24
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB68_9
// %bb.3:
	adrp	x1, .L.str.108
	adrp	x2, .L.str.186
	add	x1, x1, :lo12:.L.str.108
	add	x2, x2, :lo12:.L.str.186
	mov	w3, #32
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB68_9
// %bb.4:
	adrp	x1, .L.str.108
	adrp	x2, .L.str.187
	add	x1, x1, :lo12:.L.str.108
	add	x2, x2, :lo12:.L.str.187
	mov	w3, #36
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB68_9
// %bb.5:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.188
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.188
	mov	w3, #40
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB68_9
// %bb.6:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.189
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.189
	mov	w3, #44
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB68_9
// %bb.7:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.190
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.190
	mov	w3, #48
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB68_9
// %bb.8:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.144
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.144
	mov	w3, #52
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB68_9:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end68:
	.size	trace_event_define_fields_f2fs__submit_page_bio, .Lfunc_end68-trace_event_define_fields_f2fs__submit_page_bio
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs__bio
	.type	trace_event_raw_event_f2fs__bio,@function
trace_event_raw_event_f2fs__bio:        // @trace_event_raw_event_f2fs__bio
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x23, [sp, #80]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x23, [x0, #72]
	mov	x19, x3
	mov	w20, w2
	mov	x21, x0
	mov	x22, x1
	tbnz	w23, #8, .LBB69_6
// %bb.1:
	tbz	w23, #7, .LBB69_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB69_3:
	tbnz	w23, #6, .LBB69_8
// %bb.4:
	tbz	w23, #9, .LBB69_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB69_8
.LBB69_6:
	add	x0, sp, #8              // =8
	mov	w2, #48
	mov	x1, x21
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB69_8
// %bb.7:
	ldr	w8, [x22, #16]
	mov	w1, #48
	str	w8, [x0, #8]
	ldr	x8, [x19, #8]
	ldp	w9, w8, [x8]
	orr	w8, w8, w9, lsl #20
	str	w8, [x0, #12]
	ldrb	w8, [x19, #16]
	str	w8, [x0, #16]
	ldr	w8, [x19, #16]
	stp	w8, w20, [x0, #20]
	ldr	x8, [x19, #32]
	str	x8, [x0, #32]
	ldr	w8, [x19, #40]
	str	w8, [x0, #40]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB69_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB69_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldr	x23, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB69_10:
	bl	__stack_chk_fail
.Lfunc_end69:
	.size	trace_event_raw_event_f2fs__bio, .Lfunc_end69-trace_event_raw_event_f2fs__bio
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs__bio
	.type	perf_trace_f2fs__bio,@function
perf_trace_f2fs__bio:                   // @perf_trace_f2fs__bio
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x24, x30
	mov	x20, x3
	mov	w22, w2
	mov	x23, x1
	mov	x19, x0
	add	x21, x9, x8
	cbnz	x10, .LBB70_2
// %bb.1:
	ldr	x8, [x21]
	cbz	x8, .LBB70_4
.LBB70_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #52
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB70_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #52
	mov	w4, #1
	stp	x8, x24, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	w8, [x23, #16]
	mov	x3, x19
	mov	x6, x21
	mov	x7, xzr
	str	w8, [x0, #8]
	ldr	x8, [x20, #8]
	ldp	w9, w8, [x8]
	orr	w8, w8, w9, lsl #20
	str	w8, [x0, #12]
	ldrb	w8, [x20, #16]
	str	w8, [x0, #16]
	ldr	w8, [x20, #16]
	stp	w8, w22, [x0, #20]
	ldr	x8, [x20, #32]
	str	x8, [x0, #32]
	ldr	w8, [x20, #40]
	str	w8, [x0, #40]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB70_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB70_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB70_6:
	bl	__stack_chk_fail
.Lfunc_end70:
	.size	perf_trace_f2fs__bio, .Lfunc_end70-perf_trace_f2fs__bio
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs__bio
	.type	trace_event_define_fields_f2fs__bio,@function
trace_event_define_fields_f2fs__bio:    // @trace_event_define_fields_f2fs__bio
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB71_7
// %bb.1:
	adrp	x1, .L.str.59
	adrp	x2, .L.str.202
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.202
	mov	w3, #12
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB71_7
// %bb.2:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.188
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.188
	mov	w3, #16
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB71_7
// %bb.3:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.189
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.189
	mov	w3, #20
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB71_7
// %bb.4:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.144
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.144
	mov	w3, #24
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB71_7
// %bb.5:
	adrp	x1, .L.str.203
	adrp	x2, .L.str.204
	add	x1, x1, :lo12:.L.str.203
	add	x2, x2, :lo12:.L.str.204
	mov	w3, #32
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB71_7
// %bb.6:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.67
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.67
	mov	w3, #40
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB71_7:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end71:
	.size	trace_event_define_fields_f2fs__bio, .Lfunc_end71-trace_event_define_fields_f2fs__bio
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_write_begin
	.type	trace_event_raw_event_f2fs_write_begin,@function
trace_event_raw_event_f2fs_write_begin: // @trace_event_raw_event_f2fs_write_begin
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x24, [x0, #72]
	mov	w19, w4
	mov	w20, w3
	mov	x21, x2
	mov	x22, x0
	mov	x23, x1
	tbnz	w24, #8, .LBB72_6
// %bb.1:
	tbz	w24, #7, .LBB72_3
// %bb.2:
	mov	x0, x22
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB72_3:
	tbnz	w24, #6, .LBB72_8
// %bb.4:
	tbz	w24, #9, .LBB72_6
// %bb.5:
	mov	x0, x22
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB72_8
.LBB72_6:
	add	x0, sp, #8              // =8
	mov	w2, #40
	mov	x1, x22
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB72_8
// %bb.7:
	ldr	x8, [x23, #40]
	mov	w1, #40
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	stp	w20, w19, [x0, #32]
	stp	x8, x21, [x0, #16]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB72_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB72_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB72_10:
	bl	__stack_chk_fail
.Lfunc_end72:
	.size	trace_event_raw_event_f2fs_write_begin, .Lfunc_end72-trace_event_raw_event_f2fs_write_begin
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_write_begin
	.type	perf_trace_f2fs_write_begin,@function
perf_trace_f2fs_write_begin:            // @perf_trace_f2fs_write_begin
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x25, [sp, #48]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x25, x30
	mov	w20, w4
	mov	w22, w3
	mov	x21, x2
	mov	x24, x1
	mov	x19, x0
	add	x23, x9, x8
	cbnz	x10, .LBB73_2
// %bb.1:
	ldr	x8, [x23]
	cbz	x8, .LBB73_4
.LBB73_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #44
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB73_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #44
	mov	w4, #1
	stp	x8, x25, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x24, #40]
	mov	x3, x19
	mov	x6, x23
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x24, #64]
	stp	w22, w20, [x0, #32]
	stp	x8, x21, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB73_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB73_6
// %bb.5:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldr	x25, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB73_6:
	bl	__stack_chk_fail
.Lfunc_end73:
	.size	perf_trace_f2fs_write_begin, .Lfunc_end73-perf_trace_f2fs_write_begin
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_write_begin
	.type	trace_event_define_fields_f2fs_write_begin,@function
trace_event_define_fields_f2fs_write_begin: // @trace_event_define_fields_f2fs_write_begin
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB74_5
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB74_5
// %bb.2:
	adrp	x1, .L.str.66
	adrp	x2, .L.str.178
	add	x1, x1, :lo12:.L.str.66
	add	x2, x2, :lo12:.L.str.178
	mov	w3, #24
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB74_5
// %bb.3:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.176
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.176
	mov	w3, #32
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB74_5
// %bb.4:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.169
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.169
	mov	w3, #36
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB74_5:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end74:
	.size	trace_event_define_fields_f2fs_write_begin, .Lfunc_end74-trace_event_define_fields_f2fs_write_begin
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_write_end
	.type	trace_event_raw_event_f2fs_write_end,@function
trace_event_raw_event_f2fs_write_end:   // @trace_event_raw_event_f2fs_write_end
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x24, [x0, #72]
	mov	w19, w4
	mov	w20, w3
	mov	x21, x2
	mov	x22, x0
	mov	x23, x1
	tbnz	w24, #8, .LBB75_6
// %bb.1:
	tbz	w24, #7, .LBB75_3
// %bb.2:
	mov	x0, x22
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB75_3:
	tbnz	w24, #6, .LBB75_8
// %bb.4:
	tbz	w24, #9, .LBB75_6
// %bb.5:
	mov	x0, x22
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB75_8
.LBB75_6:
	add	x0, sp, #8              // =8
	mov	w2, #40
	mov	x1, x22
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB75_8
// %bb.7:
	ldr	x8, [x23, #40]
	mov	w1, #40
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	stp	w20, w19, [x0, #32]
	stp	x8, x21, [x0, #16]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB75_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB75_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB75_10:
	bl	__stack_chk_fail
.Lfunc_end75:
	.size	trace_event_raw_event_f2fs_write_end, .Lfunc_end75-trace_event_raw_event_f2fs_write_end
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_write_end
	.type	perf_trace_f2fs_write_end,@function
perf_trace_f2fs_write_end:              // @perf_trace_f2fs_write_end
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x25, [sp, #48]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x25, x30
	mov	w20, w4
	mov	w22, w3
	mov	x21, x2
	mov	x24, x1
	mov	x19, x0
	add	x23, x9, x8
	cbnz	x10, .LBB76_2
// %bb.1:
	ldr	x8, [x23]
	cbz	x8, .LBB76_4
.LBB76_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #44
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB76_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #44
	mov	w4, #1
	stp	x8, x25, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x24, #40]
	mov	x3, x19
	mov	x6, x23
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x24, #64]
	stp	w22, w20, [x0, #32]
	stp	x8, x21, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB76_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB76_6
// %bb.5:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldr	x25, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB76_6:
	bl	__stack_chk_fail
.Lfunc_end76:
	.size	perf_trace_f2fs_write_end, .Lfunc_end76-perf_trace_f2fs_write_end
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_write_end
	.type	trace_event_define_fields_f2fs_write_end,@function
trace_event_define_fields_f2fs_write_end: // @trace_event_define_fields_f2fs_write_end
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB77_5
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB77_5
// %bb.2:
	adrp	x1, .L.str.66
	adrp	x2, .L.str.178
	add	x1, x1, :lo12:.L.str.66
	add	x2, x2, :lo12:.L.str.178
	mov	w3, #24
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB77_5
// %bb.3:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.176
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.176
	mov	w3, #32
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB77_5
// %bb.4:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.207
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.207
	mov	w3, #36
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB77_5:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end77:
	.size	trace_event_define_fields_f2fs_write_end, .Lfunc_end77-trace_event_define_fields_f2fs_write_end
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs__page
	.type	trace_event_raw_event_f2fs__page,@function
trace_event_raw_event_f2fs__page:       // @trace_event_raw_event_f2fs__page
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x22, [x0, #72]
	mov	w21, w2
	mov	x20, x0
	mov	x19, x1
	tbnz	w22, #8, .LBB78_6
// %bb.1:
	tbz	w22, #7, .LBB78_3
// %bb.2:
	mov	x0, x20
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB78_3:
	tbnz	w22, #6, .LBB78_19
// %bb.4:
	tbz	w22, #9, .LBB78_6
// %bb.5:
	mov	x0, x20
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB78_19
.LBB78_6:
	add	x0, sp, #8              // =8
	mov	w2, #48
	mov	x1, x20
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB78_19
// %bb.7:
	ldr	x8, [x19, #8]
	mov	x20, x0
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x19, x9, eq
	ldr	x8, [x8]
	tbz	w8, #19, .LBB78_9
// %bb.8:
	ldr	x8, [x19]
	tbnz	w8, #10, .LBB78_21
.LBB78_9:
	ldr	x0, [x19, #24]
.LBB78_10:
	ldr	x8, [x0]
	ldr	x8, [x8, #40]
	ldr	w8, [x8, #16]
	str	w8, [x20, #8]
	ldr	x8, [x19, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x19, x9, eq
	ldr	x8, [x8]
	tbz	w8, #19, .LBB78_12
// %bb.11:
	ldr	x8, [x19]
	tbnz	w8, #10, .LBB78_22
.LBB78_12:
	ldr	x0, [x19, #24]
.LBB78_13:
	ldr	x8, [x0]
	ldr	x8, [x8, #64]
	str	w21, [x20, #24]
	str	x8, [x20, #16]
	ldr	x8, [x19, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x19, x9, eq
	ldr	x8, [x8]
	tbz	w8, #19, .LBB78_15
// %bb.14:
	ldr	x8, [x19]
	tbnz	w8, #10, .LBB78_23
.LBB78_15:
	ldr	x0, [x19, #24]
.LBB78_16:
	ldr	x8, [x0]
	ldrh	w8, [x8]
	and	w8, w8, #0xf000
	cmp	w8, #4, lsl #12         // =16384
	cset	w8, eq
	str	w8, [x20, #28]
	ldr	x8, [x19, #32]
	str	x8, [x20, #32]
	ldr	x8, [x19, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x19, x9, eq
	ldr	x8, [x8]
	ubfx	w8, w8, #3, #1
	str	w8, [x20, #40]
	ldr	x8, [x19, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x19, x9, eq
	ldr	x8, [x8]
	ubfx	x9, x8, #2, #30
	ubfx	w8, w8, #2, #1
	tbz	w9, #0, .LBB78_18
// %bb.17:
	//APP
	dmb ishld
	//NO_APP
.LBB78_18:
	add	x0, sp, #8              // =8
	mov	w1, #48
	str	w8, [x20, #44]
	bl	trace_event_buffer_commit
.LBB78_19:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB78_24
// %bb.20:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB78_21:
	mov	x0, x19
	bl	__page_file_mapping
	b	.LBB78_10
.LBB78_22:
	mov	x0, x19
	bl	__page_file_mapping
	b	.LBB78_13
.LBB78_23:
	mov	x0, x19
	bl	__page_file_mapping
	b	.LBB78_16
.LBB78_24:
	bl	__stack_chk_fail
.Lfunc_end78:
	.size	trace_event_raw_event_f2fs__page, .Lfunc_end78-trace_event_raw_event_f2fs__page
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs__page
	.type	perf_trace_f2fs__page,@function
perf_trace_f2fs__page:                  // @perf_trace_f2fs__page
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x24, x30
	mov	w23, w2
	mov	x21, x1
	mov	x19, x0
	add	x20, x9, x8
	cbnz	x10, .LBB79_2
// %bb.1:
	ldr	x8, [x20]
	cbz	x8, .LBB79_15
.LBB79_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #52
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB79_15
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w10, #5
	mov	x22, x0
	str	x29, [x9, #232]
	stp	x8, x24, [x9, #248]
	str	x10, [x9, #264]
	ldr	x8, [x21, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x21, x9, eq
	ldr	x8, [x8]
	tbz	w8, #19, .LBB79_5
// %bb.4:
	ldr	x8, [x21]
	tbnz	w8, #10, .LBB79_17
.LBB79_5:
	ldr	x0, [x21, #24]
.LBB79_6:
	ldr	x8, [x0]
	ldr	x8, [x8, #40]
	ldr	w8, [x8, #16]
	str	w8, [x22, #8]
	ldr	x8, [x21, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x21, x9, eq
	ldr	x8, [x8]
	tbz	w8, #19, .LBB79_8
// %bb.7:
	ldr	x8, [x21]
	tbnz	w8, #10, .LBB79_18
.LBB79_8:
	ldr	x0, [x21, #24]
.LBB79_9:
	ldr	x8, [x0]
	ldr	x8, [x8, #64]
	str	w23, [x22, #24]
	str	x8, [x22, #16]
	ldr	x8, [x21, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x21, x9, eq
	ldr	x8, [x8]
	tbz	w8, #19, .LBB79_11
// %bb.10:
	ldr	x8, [x21]
	tbnz	w8, #10, .LBB79_19
.LBB79_11:
	ldr	x0, [x21, #24]
.LBB79_12:
	ldr	x8, [x0]
	ldrh	w8, [x8]
	and	w8, w8, #0xf000
	cmp	w8, #4, lsl #12         // =16384
	cset	w8, eq
	str	w8, [x22, #28]
	ldr	x8, [x21, #32]
	str	x8, [x22, #32]
	ldr	x8, [x21, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x21, x9, eq
	ldr	x8, [x8]
	ubfx	w8, w8, #3, #1
	str	w8, [x22, #40]
	ldr	x8, [x21, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x21, x9, eq
	ldr	x8, [x8]
	ubfx	x9, x8, #2, #30
	ubfx	w8, w8, #2, #1
	tbz	w9, #0, .LBB79_14
// %bb.13:
	//APP
	dmb ishld
	//NO_APP
.LBB79_14:
	str	w8, [x22, #44]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	mov	w1, #52
	mov	w4, #1
	mov	x0, x22
	mov	x3, x19
	mov	x6, x20
	mov	x7, xzr
	bl	perf_trace_run_bpf_submit
.LBB79_15:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB79_20
// %bb.16:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB79_17:
	mov	x0, x21
	bl	__page_file_mapping
	b	.LBB79_6
.LBB79_18:
	mov	x0, x21
	bl	__page_file_mapping
	b	.LBB79_9
.LBB79_19:
	mov	x0, x21
	bl	__page_file_mapping
	b	.LBB79_12
.LBB79_20:
	bl	__stack_chk_fail
.Lfunc_end79:
	.size	perf_trace_f2fs__page, .Lfunc_end79-perf_trace_f2fs__page
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs__page
	.type	trace_event_define_fields_f2fs__page,@function
trace_event_define_fields_f2fs__page:   // @trace_event_define_fields_f2fs__page
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB80_7
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB80_7
// %bb.2:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.144
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.144
	mov	w3, #24
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB80_7
// %bb.3:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.209
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.209
	mov	w3, #28
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB80_7
// %bb.4:
	adrp	x1, .L.str.115
	adrp	x2, .L.str.185
	add	x1, x1, :lo12:.L.str.115
	add	x2, x2, :lo12:.L.str.185
	mov	w3, #32
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB80_7
// %bb.5:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.91
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.91
	mov	w3, #40
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB80_7
// %bb.6:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.210
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.210
	mov	w3, #44
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB80_7:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end80:
	.size	trace_event_define_fields_f2fs__page, .Lfunc_end80-trace_event_define_fields_f2fs__page
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_filemap_fault
	.type	trace_event_raw_event_f2fs_filemap_fault,@function
trace_event_raw_event_f2fs_filemap_fault: // @trace_event_raw_event_f2fs_filemap_fault
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x23, [sp, #80]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x23, [x0, #72]
	mov	x19, x3
	mov	x20, x2
	mov	x21, x0
	mov	x22, x1
	tbnz	w23, #8, .LBB81_6
// %bb.1:
	tbz	w23, #7, .LBB81_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB81_3:
	tbnz	w23, #6, .LBB81_8
// %bb.4:
	tbz	w23, #9, .LBB81_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB81_8
.LBB81_6:
	add	x0, sp, #8              // =8
	mov	w2, #40
	mov	x1, x21
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB81_8
// %bb.7:
	ldr	x8, [x22, #40]
	mov	w1, #40
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x22, #64]
	str	x19, [x0, #32]
	stp	x8, x20, [x0, #16]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB81_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB81_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldr	x23, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB81_10:
	bl	__stack_chk_fail
.Lfunc_end81:
	.size	trace_event_raw_event_f2fs_filemap_fault, .Lfunc_end81-trace_event_raw_event_f2fs_filemap_fault
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_filemap_fault
	.type	perf_trace_f2fs_filemap_fault,@function
perf_trace_f2fs_filemap_fault:          // @perf_trace_f2fs_filemap_fault
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x24, x30
	mov	x20, x3
	mov	x21, x2
	mov	x23, x1
	mov	x19, x0
	add	x22, x9, x8
	cbnz	x10, .LBB82_2
// %bb.1:
	ldr	x8, [x22]
	cbz	x8, .LBB82_4
.LBB82_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #44
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB82_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #44
	mov	w4, #1
	stp	x8, x24, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x23, #40]
	mov	x3, x19
	mov	x6, x22
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	stp	x21, x20, [x0, #24]
	str	x8, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB82_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB82_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB82_6:
	bl	__stack_chk_fail
.Lfunc_end82:
	.size	perf_trace_f2fs_filemap_fault, .Lfunc_end82-perf_trace_f2fs_filemap_fault
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_filemap_fault
	.type	trace_event_define_fields_f2fs_filemap_fault,@function
trace_event_define_fields_f2fs_filemap_fault: // @trace_event_define_fields_f2fs_filemap_fault
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB83_4
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB83_4
// %bb.2:
	adrp	x1, .L.str.115
	adrp	x2, .L.str.185
	add	x1, x1, :lo12:.L.str.115
	add	x2, x2, :lo12:.L.str.185
	mov	w3, #24
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB83_4
// %bb.3:
	adrp	x1, .L.str.115
	adrp	x2, .L.str.75
	add	x1, x1, :lo12:.L.str.115
	add	x2, x2, :lo12:.L.str.75
	mov	w3, #32
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB83_4:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end83:
	.size	trace_event_define_fields_f2fs_filemap_fault, .Lfunc_end83-trace_event_define_fields_f2fs_filemap_fault
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_writepages
	.type	trace_event_raw_event_f2fs_writepages,@function
trace_event_raw_event_f2fs_writepages:  // @trace_event_raw_event_f2fs_writepages
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x23, [sp, #80]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x23, [x0, #72]
	mov	w21, w3
	mov	x19, x2
	mov	x22, x0
	mov	x20, x1
	tbnz	w23, #8, .LBB84_6
// %bb.1:
	tbz	w23, #7, .LBB84_3
// %bb.2:
	mov	x0, x22
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB84_3:
	tbnz	w23, #6, .LBB84_8
// %bb.4:
	tbz	w23, #9, .LBB84_6
// %bb.5:
	mov	x0, x22
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB84_8
.LBB84_6:
	add	x0, sp, #8              // =8
	mov	w2, #88
	mov	x1, x22
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB84_8
// %bb.7:
	ldr	x8, [x20, #40]
	mov	w1, #88
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x20, #64]
	str	w21, [x0, #24]
	str	x8, [x0, #16]
	ldrh	w8, [x20]
	and	w8, w8, #0xf000
	cmp	w8, #4, lsl #12         // =16384
	cset	w8, eq
	str	w8, [x0, #28]
	ldr	x8, [x19]
	str	x8, [x0, #32]
	ldr	x8, [x19, #8]
	str	x8, [x0, #40]
	ldr	x8, [x19, #16]
	str	x8, [x0, #48]
	ldr	x8, [x19, #24]
	str	x8, [x0, #56]
	ldr	x8, [x20, #48]
	ldr	x8, [x8, #112]
	str	x8, [x0, #64]
	ldr	w8, [x19, #32]
	str	w8, [x0, #72]
	ldrb	w8, [x19, #36]
	and	w8, w8, #0x1
	strb	w8, [x0, #76]
	ldrb	w8, [x19, #36]
	ubfx	w8, w8, #1, #1
	strb	w8, [x0, #77]
	ldrb	w8, [x19, #36]
	ubfx	w8, w8, #2, #1
	strb	w8, [x0, #78]
	ldrb	w8, [x19, #36]
	ubfx	w8, w8, #3, #1
	strb	w8, [x0, #79]
	ldrb	w8, [x19, #36]
	ubfx	w8, w8, #4, #1
	strb	w8, [x0, #80]
	ldrb	w8, [x19, #36]
	ubfx	w8, w8, #5, #1
	strb	w8, [x0, #81]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB84_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB84_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldr	x23, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB84_10:
	bl	__stack_chk_fail
.Lfunc_end84:
	.size	trace_event_raw_event_f2fs_writepages, .Lfunc_end84-trace_event_raw_event_f2fs_writepages
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_writepages
	.type	perf_trace_f2fs_writepages,@function
perf_trace_f2fs_writepages:             // @perf_trace_f2fs_writepages
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x24, x30
	mov	w23, w3
	mov	x21, x2
	mov	x22, x1
	mov	x19, x0
	add	x20, x9, x8
	cbnz	x10, .LBB85_2
// %bb.1:
	ldr	x8, [x20]
	cbz	x8, .LBB85_4
.LBB85_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #92
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB85_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #92
	mov	w4, #1
	stp	x8, x24, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x22, #40]
	mov	x3, x19
	mov	x6, x20
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x22, #64]
	str	w23, [x0, #24]
	str	x8, [x0, #16]
	ldrh	w8, [x22]
	and	w8, w8, #0xf000
	cmp	w8, #4, lsl #12         // =16384
	cset	w8, eq
	str	w8, [x0, #28]
	ldr	x8, [x21]
	str	x8, [x0, #32]
	ldr	x8, [x21, #8]
	str	x8, [x0, #40]
	ldr	x8, [x21, #16]
	str	x8, [x0, #48]
	ldr	x8, [x21, #24]
	str	x8, [x0, #56]
	ldr	x8, [x22, #48]
	ldr	x8, [x8, #112]
	str	x8, [x0, #64]
	ldr	w8, [x21, #32]
	str	w8, [x0, #72]
	ldrb	w8, [x21, #36]
	and	w8, w8, #0x1
	strb	w8, [x0, #76]
	ldrb	w8, [x21, #36]
	ubfx	w8, w8, #1, #1
	strb	w8, [x0, #77]
	ldrb	w8, [x21, #36]
	ubfx	w8, w8, #2, #1
	strb	w8, [x0, #78]
	ldrb	w8, [x21, #36]
	ubfx	w8, w8, #3, #1
	strb	w8, [x0, #79]
	ldrb	w8, [x21, #36]
	ubfx	w8, w8, #4, #1
	strb	w8, [x0, #80]
	ldrb	w8, [x21, #36]
	ubfx	w8, w8, #5, #1
	strb	w8, [x0, #81]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB85_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB85_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB85_6:
	bl	__stack_chk_fail
.Lfunc_end85:
	.size	perf_trace_f2fs_writepages, .Lfunc_end85-perf_trace_f2fs_writepages
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_writepages
	.type	trace_event_define_fields_f2fs_writepages,@function
trace_event_define_fields_f2fs_writepages: // @trace_event_define_fields_f2fs_writepages
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB86_16
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB86_16
// %bb.2:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.144
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.144
	mov	w3, #24
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB86_16
// %bb.3:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.209
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.209
	mov	w3, #28
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB86_16
// %bb.4:
	adrp	x1, .L.str.216
	adrp	x2, .L.str.217
	add	x1, x1, :lo12:.L.str.216
	add	x2, x2, :lo12:.L.str.217
	mov	w3, #32
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB86_16
// %bb.5:
	adrp	x1, .L.str.216
	adrp	x2, .L.str.218
	add	x1, x1, :lo12:.L.str.216
	add	x2, x2, :lo12:.L.str.218
	mov	w3, #40
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB86_16
// %bb.6:
	adrp	x1, .L.str.66
	adrp	x2, .L.str.219
	add	x1, x1, :lo12:.L.str.66
	add	x2, x2, :lo12:.L.str.219
	mov	w3, #48
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB86_16
// %bb.7:
	adrp	x1, .L.str.66
	adrp	x2, .L.str.220
	add	x1, x1, :lo12:.L.str.66
	add	x2, x2, :lo12:.L.str.220
	mov	w3, #56
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB86_16
// %bb.8:
	adrp	x1, .L.str.115
	adrp	x2, .L.str.221
	add	x1, x1, :lo12:.L.str.115
	add	x2, x2, :lo12:.L.str.221
	mov	w3, #64
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB86_16
// %bb.9:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.222
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.222
	mov	w3, #72
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB86_16
// %bb.10:
	adrp	x1, .L.str.223
	adrp	x2, .L.str.224
	add	x1, x1, :lo12:.L.str.223
	add	x2, x2, :lo12:.L.str.224
	mov	w3, #76
	mov	w4, #1
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB86_16
// %bb.11:
	adrp	x1, .L.str.223
	adrp	x2, .L.str.225
	add	x1, x1, :lo12:.L.str.223
	add	x2, x2, :lo12:.L.str.225
	mov	w3, #77
	mov	w4, #1
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB86_16
// %bb.12:
	adrp	x1, .L.str.223
	adrp	x2, .L.str.226
	add	x1, x1, :lo12:.L.str.223
	add	x2, x2, :lo12:.L.str.226
	mov	w3, #78
	mov	w4, #1
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB86_16
// %bb.13:
	adrp	x1, .L.str.223
	adrp	x2, .L.str.227
	add	x1, x1, :lo12:.L.str.223
	add	x2, x2, :lo12:.L.str.227
	mov	w3, #79
	mov	w4, #1
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB86_16
// %bb.14:
	adrp	x1, .L.str.223
	adrp	x2, .L.str.228
	add	x1, x1, :lo12:.L.str.223
	add	x2, x2, :lo12:.L.str.228
	mov	w3, #80
	mov	w4, #1
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB86_16
// %bb.15:
	adrp	x1, .L.str.223
	adrp	x2, .L.str.229
	add	x1, x1, :lo12:.L.str.223
	add	x2, x2, :lo12:.L.str.229
	mov	w3, #81
	mov	w4, #1
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB86_16:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end86:
	.size	trace_event_define_fields_f2fs_writepages, .Lfunc_end86-trace_event_define_fields_f2fs_writepages
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_readpages
	.type	trace_event_raw_event_f2fs_readpages,@function
trace_event_raw_event_f2fs_readpages:   // @trace_event_raw_event_f2fs_readpages
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x23, [sp, #80]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x23, [x0, #72]
	mov	w19, w3
	mov	x20, x2
	mov	x21, x0
	mov	x22, x1
	tbnz	w23, #8, .LBB87_6
// %bb.1:
	tbz	w23, #7, .LBB87_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB87_3:
	tbnz	w23, #6, .LBB87_8
// %bb.4:
	tbz	w23, #9, .LBB87_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB87_8
.LBB87_6:
	add	x0, sp, #8              // =8
	mov	w2, #40
	mov	x1, x21
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB87_8
// %bb.7:
	ldr	x8, [x22, #40]
	mov	w1, #40
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x22, #64]
	str	x8, [x0, #16]
	ldr	x8, [x20, #32]
	str	w19, [x0, #32]
	str	x8, [x0, #24]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB87_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB87_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldr	x23, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB87_10:
	bl	__stack_chk_fail
.Lfunc_end87:
	.size	trace_event_raw_event_f2fs_readpages, .Lfunc_end87-trace_event_raw_event_f2fs_readpages
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_readpages
	.type	perf_trace_f2fs_readpages,@function
perf_trace_f2fs_readpages:              // @perf_trace_f2fs_readpages
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x24, x30
	mov	w20, w3
	mov	x22, x2
	mov	x23, x1
	mov	x19, x0
	add	x21, x9, x8
	cbnz	x10, .LBB88_2
// %bb.1:
	ldr	x8, [x21]
	cbz	x8, .LBB88_4
.LBB88_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #44
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB88_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #44
	mov	w4, #1
	stp	x8, x24, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x23, #40]
	mov	x3, x19
	mov	x6, x21
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	str	x8, [x0, #16]
	ldr	x8, [x22, #32]
	str	w20, [x0, #32]
	str	x8, [x0, #24]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB88_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB88_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB88_6:
	bl	__stack_chk_fail
.Lfunc_end88:
	.size	perf_trace_f2fs_readpages, .Lfunc_end88-perf_trace_f2fs_readpages
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_readpages
	.type	trace_event_define_fields_f2fs_readpages,@function
trace_event_define_fields_f2fs_readpages: // @trace_event_define_fields_f2fs_readpages
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB89_4
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB89_4
// %bb.2:
	adrp	x1, .L.str.115
	adrp	x2, .L.str.173
	add	x1, x1, :lo12:.L.str.115
	add	x2, x2, :lo12:.L.str.173
	mov	w3, #24
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB89_4
// %bb.3:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.232
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.232
	mov	w3, #32
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB89_4:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end89:
	.size	trace_event_define_fields_f2fs_readpages, .Lfunc_end89-trace_event_define_fields_f2fs_readpages
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_write_checkpoint
	.type	trace_event_raw_event_f2fs_write_checkpoint,@function
trace_event_raw_event_f2fs_write_checkpoint: // @trace_event_raw_event_f2fs_write_checkpoint
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x23, [sp, #80]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x23, [x0, #72]
	mov	x19, x3
	mov	w20, w2
	mov	x21, x0
	mov	x22, x1
	tbnz	w23, #8, .LBB90_6
// %bb.1:
	tbz	w23, #7, .LBB90_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB90_3:
	tbnz	w23, #6, .LBB90_8
// %bb.4:
	tbz	w23, #9, .LBB90_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB90_8
.LBB90_6:
	add	x0, sp, #8              // =8
	mov	w2, #24
	mov	x1, x21
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB90_8
// %bb.7:
	ldr	w8, [x22, #16]
	str	x19, [x0, #16]
	mov	w1, #24
	stp	w8, w20, [x0, #8]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB90_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB90_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldr	x23, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB90_10:
	bl	__stack_chk_fail
.Lfunc_end90:
	.size	trace_event_raw_event_f2fs_write_checkpoint, .Lfunc_end90-trace_event_raw_event_f2fs_write_checkpoint
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_write_checkpoint
	.type	perf_trace_f2fs_write_checkpoint,@function
perf_trace_f2fs_write_checkpoint:       // @perf_trace_f2fs_write_checkpoint
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x23, x30
	mov	x20, x3
	mov	w21, w2
	mov	x24, x1
	mov	x19, x0
	add	x22, x9, x8
	cbnz	x10, .LBB91_2
// %bb.1:
	ldr	x8, [x22]
	cbz	x8, .LBB91_4
.LBB91_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #28
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB91_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w10, #5
	mov	w1, #28
	str	x29, [x9, #232]
	stp	x8, x23, [x9, #248]
	str	x10, [x9, #264]
	ldr	w8, [x24, #16]
	str	x20, [x0, #16]
	mov	w4, #1
	mov	x3, x19
	stp	w8, w21, [x0, #8]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	mov	x6, x22
	mov	x7, xzr
	bl	perf_trace_run_bpf_submit
.LBB91_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB91_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB91_6:
	bl	__stack_chk_fail
.Lfunc_end91:
	.size	perf_trace_f2fs_write_checkpoint, .Lfunc_end91-perf_trace_f2fs_write_checkpoint
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_write_checkpoint
	.type	trace_event_define_fields_f2fs_write_checkpoint,@function
trace_event_define_fields_f2fs_write_checkpoint: // @trace_event_define_fields_f2fs_write_checkpoint
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB92_3
// %bb.1:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.234
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.234
	mov	w3, #12
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB92_3
// %bb.2:
	adrp	x1, .L.str.235
	adrp	x2, .L.str.236
	add	x1, x1, :lo12:.L.str.235
	add	x2, x2, :lo12:.L.str.236
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB92_3:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end92:
	.size	trace_event_define_fields_f2fs_write_checkpoint, .Lfunc_end92-trace_event_define_fields_f2fs_write_checkpoint
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_discard
	.type	trace_event_raw_event_f2fs_discard,@function
trace_event_raw_event_f2fs_discard:     // @trace_event_raw_event_f2fs_discard
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x23, [sp, #80]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x23, [x0, #72]
	mov	w19, w3
	mov	w20, w2
	mov	x21, x0
	mov	x22, x1
	tbnz	w23, #8, .LBB93_6
// %bb.1:
	tbz	w23, #7, .LBB93_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB93_3:
	tbnz	w23, #6, .LBB93_8
// %bb.4:
	tbz	w23, #9, .LBB93_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB93_8
.LBB93_6:
	add	x0, sp, #8              // =8
	mov	w2, #20
	mov	x1, x21
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB93_8
// %bb.7:
	ldr	w8, [x22]
	str	w19, [x0, #16]
	mov	w1, #20
	stp	w8, w20, [x0, #8]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB93_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB93_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldr	x23, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB93_10:
	bl	__stack_chk_fail
.Lfunc_end93:
	.size	trace_event_raw_event_f2fs_discard, .Lfunc_end93-trace_event_raw_event_f2fs_discard
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_discard
	.type	perf_trace_f2fs_discard,@function
perf_trace_f2fs_discard:                // @perf_trace_f2fs_discard
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x23, x30
	mov	w20, w3
	mov	w21, w2
	mov	x24, x1
	mov	x19, x0
	add	x22, x9, x8
	cbnz	x10, .LBB94_2
// %bb.1:
	ldr	x8, [x22]
	cbz	x8, .LBB94_4
.LBB94_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #20
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB94_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w10, #5
	mov	w1, #20
	str	x29, [x9, #232]
	stp	x8, x23, [x9, #248]
	str	x10, [x9, #264]
	ldr	w8, [x24]
	stp	w21, w20, [x0, #12]
	mov	w4, #1
	mov	x3, x19
	str	w8, [x0, #8]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	mov	x6, x22
	mov	x7, xzr
	bl	perf_trace_run_bpf_submit
.LBB94_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB94_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB94_6:
	bl	__stack_chk_fail
.Lfunc_end94:
	.size	perf_trace_f2fs_discard, .Lfunc_end94-perf_trace_f2fs_discard
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_discard
	.type	trace_event_define_fields_f2fs_discard,@function
trace_event_define_fields_f2fs_discard: // @trace_event_define_fields_f2fs_discard
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB95_3
// %bb.1:
	adrp	x1, .L.str.108
	adrp	x2, .L.str.246
	add	x1, x1, :lo12:.L.str.108
	add	x2, x2, :lo12:.L.str.246
	mov	w3, #12
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB95_3
// %bb.2:
	adrp	x1, .L.str.108
	adrp	x2, .L.str.247
	add	x1, x1, :lo12:.L.str.108
	add	x2, x2, :lo12:.L.str.247
	mov	w3, #16
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB95_3:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end95:
	.size	trace_event_define_fields_f2fs_discard, .Lfunc_end95-trace_event_define_fields_f2fs_discard
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_issue_reset_zone
	.type	trace_event_raw_event_f2fs_issue_reset_zone,@function
trace_event_raw_event_f2fs_issue_reset_zone: // @trace_event_raw_event_f2fs_issue_reset_zone
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x22, [x0, #72]
	mov	w19, w2
	mov	x20, x0
	mov	x21, x1
	tbnz	w22, #8, .LBB96_6
// %bb.1:
	tbz	w22, #7, .LBB96_3
// %bb.2:
	mov	x0, x20
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB96_3:
	tbnz	w22, #6, .LBB96_8
// %bb.4:
	tbz	w22, #9, .LBB96_6
// %bb.5:
	mov	x0, x20
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB96_8
.LBB96_6:
	add	x0, sp, #8              // =8
	mov	w2, #16
	mov	x1, x20
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB96_8
// %bb.7:
	ldr	w8, [x21]
	mov	w1, #16
	stp	w8, w19, [x0, #8]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB96_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB96_10
// %bb.9:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB96_10:
	bl	__stack_chk_fail
.Lfunc_end96:
	.size	trace_event_raw_event_f2fs_issue_reset_zone, .Lfunc_end96-trace_event_raw_event_f2fs_issue_reset_zone
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_issue_reset_zone
	.type	perf_trace_f2fs_issue_reset_zone,@function
perf_trace_f2fs_issue_reset_zone:       // @perf_trace_f2fs_issue_reset_zone
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x23, x30
	mov	w20, w2
	mov	x22, x1
	mov	x19, x0
	add	x21, x9, x8
	cbnz	x10, .LBB97_2
// %bb.1:
	ldr	x8, [x21]
	cbz	x8, .LBB97_4
.LBB97_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #20
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB97_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w10, #5
	mov	w1, #20
	str	x29, [x9, #232]
	stp	x8, x23, [x9, #248]
	str	x10, [x9, #264]
	ldr	w8, [x22]
	mov	w4, #1
	mov	x3, x19
	mov	x6, x21
	stp	w8, w20, [x0, #8]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	mov	x7, xzr
	bl	perf_trace_run_bpf_submit
.LBB97_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB97_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB97_6:
	bl	__stack_chk_fail
.Lfunc_end97:
	.size	perf_trace_f2fs_issue_reset_zone, .Lfunc_end97-perf_trace_f2fs_issue_reset_zone
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_issue_reset_zone
	.type	trace_event_define_fields_f2fs_issue_reset_zone,@function
trace_event_define_fields_f2fs_issue_reset_zone: // @trace_event_define_fields_f2fs_issue_reset_zone
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB98_2
// %bb.1:
	adrp	x1, .L.str.108
	adrp	x2, .L.str.246
	add	x1, x1, :lo12:.L.str.108
	add	x2, x2, :lo12:.L.str.246
	mov	w3, #12
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB98_2:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end98:
	.size	trace_event_define_fields_f2fs_issue_reset_zone, .Lfunc_end98-trace_event_define_fields_f2fs_issue_reset_zone
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_issue_flush
	.type	trace_event_raw_event_f2fs_issue_flush,@function
trace_event_raw_event_f2fs_issue_flush: // @trace_event_raw_event_f2fs_issue_flush
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x24, [x0, #72]
	mov	w19, w4
	mov	w20, w3
	mov	w21, w2
	mov	x22, x0
	mov	x23, x1
	tbnz	w24, #8, .LBB99_6
// %bb.1:
	tbz	w24, #7, .LBB99_3
// %bb.2:
	mov	x0, x22
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB99_3:
	tbnz	w24, #6, .LBB99_8
// %bb.4:
	tbz	w24, #9, .LBB99_6
// %bb.5:
	mov	x0, x22
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB99_8
.LBB99_6:
	add	x0, sp, #8              // =8
	mov	w2, #24
	mov	x1, x22
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB99_8
// %bb.7:
	ldr	w8, [x23]
	stp	w20, w19, [x0, #16]
	mov	w1, #24
	stp	w8, w21, [x0, #8]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB99_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB99_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB99_10:
	bl	__stack_chk_fail
.Lfunc_end99:
	.size	trace_event_raw_event_f2fs_issue_flush, .Lfunc_end99-trace_event_raw_event_f2fs_issue_flush
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_issue_flush
	.type	perf_trace_f2fs_issue_flush,@function
perf_trace_f2fs_issue_flush:            // @perf_trace_f2fs_issue_flush
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x25, [sp, #48]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x24, x30
	mov	w20, w4
	mov	w22, w3
	mov	w21, w2
	mov	x25, x1
	mov	x19, x0
	add	x23, x9, x8
	cbnz	x10, .LBB100_2
// %bb.1:
	ldr	x8, [x23]
	cbz	x8, .LBB100_4
.LBB100_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #28
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB100_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w10, #5
	mov	w1, #28
	str	x29, [x9, #232]
	stp	x8, x24, [x9, #248]
	str	x10, [x9, #264]
	ldr	w8, [x25]
	stp	w22, w20, [x0, #16]
	mov	w4, #1
	mov	x3, x19
	stp	w8, w21, [x0, #8]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	mov	x6, x23
	mov	x7, xzr
	bl	perf_trace_run_bpf_submit
.LBB100_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB100_6
// %bb.5:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldr	x25, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB100_6:
	bl	__stack_chk_fail
.Lfunc_end100:
	.size	perf_trace_f2fs_issue_flush, .Lfunc_end100-perf_trace_f2fs_issue_flush
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_issue_flush
	.type	trace_event_define_fields_f2fs_issue_flush,@function
trace_event_define_fields_f2fs_issue_flush: // @trace_event_define_fields_f2fs_issue_flush
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB101_4
// %bb.1:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.250
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.250
	mov	w3, #12
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB101_4
// %bb.2:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.251
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.251
	mov	w3, #16
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB101_4
// %bb.3:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.75
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.75
	mov	w3, #20
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB101_4:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end101:
	.size	trace_event_define_fields_f2fs_issue_flush, .Lfunc_end101-trace_event_define_fields_f2fs_issue_flush
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_lookup_extent_tree_start
	.type	trace_event_raw_event_f2fs_lookup_extent_tree_start,@function
trace_event_raw_event_f2fs_lookup_extent_tree_start: // @trace_event_raw_event_f2fs_lookup_extent_tree_start
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x22, [x0, #72]
	mov	w19, w2
	mov	x20, x0
	mov	x21, x1
	tbnz	w22, #8, .LBB102_6
// %bb.1:
	tbz	w22, #7, .LBB102_3
// %bb.2:
	mov	x0, x20
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB102_3:
	tbnz	w22, #6, .LBB102_8
// %bb.4:
	tbz	w22, #9, .LBB102_6
// %bb.5:
	mov	x0, x20
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB102_8
.LBB102_6:
	add	x0, sp, #8              // =8
	mov	w2, #32
	mov	x1, x20
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB102_8
// %bb.7:
	ldr	x8, [x21, #40]
	mov	w1, #32
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x21, #64]
	str	w19, [x0, #24]
	str	x8, [x0, #16]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB102_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB102_10
// %bb.9:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB102_10:
	bl	__stack_chk_fail
.Lfunc_end102:
	.size	trace_event_raw_event_f2fs_lookup_extent_tree_start, .Lfunc_end102-trace_event_raw_event_f2fs_lookup_extent_tree_start
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_lookup_extent_tree_start
	.type	perf_trace_f2fs_lookup_extent_tree_start,@function
perf_trace_f2fs_lookup_extent_tree_start: // @perf_trace_f2fs_lookup_extent_tree_start
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x23, x30
	mov	w20, w2
	mov	x22, x1
	mov	x19, x0
	add	x21, x9, x8
	cbnz	x10, .LBB103_2
// %bb.1:
	ldr	x8, [x21]
	cbz	x8, .LBB103_4
.LBB103_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #36
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB103_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #36
	mov	w4, #1
	stp	x8, x23, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x22, #40]
	mov	x3, x19
	mov	x6, x21
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x22, #64]
	str	w20, [x0, #24]
	str	x8, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB103_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB103_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB103_6:
	bl	__stack_chk_fail
.Lfunc_end103:
	.size	perf_trace_f2fs_lookup_extent_tree_start, .Lfunc_end103-perf_trace_f2fs_lookup_extent_tree_start
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_lookup_extent_tree_start
	.type	trace_event_define_fields_f2fs_lookup_extent_tree_start,@function
trace_event_define_fields_f2fs_lookup_extent_tree_start: // @trace_event_define_fields_f2fs_lookup_extent_tree_start
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB104_3
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB104_3
// %bb.2:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.257
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.257
	mov	w3, #24
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB104_3:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end104:
	.size	trace_event_define_fields_f2fs_lookup_extent_tree_start, .Lfunc_end104-trace_event_define_fields_f2fs_lookup_extent_tree_start
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_lookup_extent_tree_end
	.type	trace_event_raw_event_f2fs_lookup_extent_tree_end,@function
trace_event_raw_event_f2fs_lookup_extent_tree_end: // @trace_event_raw_event_f2fs_lookup_extent_tree_end
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x23, [sp, #80]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x23, [x0, #72]
	mov	x19, x3
	mov	w20, w2
	mov	x21, x0
	mov	x22, x1
	tbnz	w23, #8, .LBB105_6
// %bb.1:
	tbz	w23, #7, .LBB105_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB105_3:
	tbnz	w23, #6, .LBB105_8
// %bb.4:
	tbz	w23, #9, .LBB105_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB105_8
.LBB105_6:
	add	x0, sp, #8              // =8
	mov	w2, #40
	mov	x1, x21
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB105_8
// %bb.7:
	ldr	x8, [x22, #40]
	mov	w1, #40
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x22, #64]
	str	w20, [x0, #24]
	str	x8, [x0, #16]
	ldr	w8, [x19]
	str	w8, [x0, #28]
	ldr	w8, [x19, #8]
	str	w8, [x0, #32]
	ldr	w8, [x19, #4]
	str	w8, [x0, #36]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB105_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB105_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldr	x23, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB105_10:
	bl	__stack_chk_fail
.Lfunc_end105:
	.size	trace_event_raw_event_f2fs_lookup_extent_tree_end, .Lfunc_end105-trace_event_raw_event_f2fs_lookup_extent_tree_end
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_lookup_extent_tree_end
	.type	perf_trace_f2fs_lookup_extent_tree_end,@function
perf_trace_f2fs_lookup_extent_tree_end: // @perf_trace_f2fs_lookup_extent_tree_end
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x24, x30
	mov	x20, x3
	mov	w22, w2
	mov	x23, x1
	mov	x19, x0
	add	x21, x9, x8
	cbnz	x10, .LBB106_2
// %bb.1:
	ldr	x8, [x21]
	cbz	x8, .LBB106_4
.LBB106_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #44
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB106_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #44
	mov	w4, #1
	stp	x8, x24, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x23, #40]
	mov	x3, x19
	mov	x6, x21
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	str	w22, [x0, #24]
	str	x8, [x0, #16]
	ldr	w8, [x20]
	str	w8, [x0, #28]
	ldr	w8, [x20, #8]
	str	w8, [x0, #32]
	ldr	w8, [x20, #4]
	str	w8, [x0, #36]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB106_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB106_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB106_6:
	bl	__stack_chk_fail
.Lfunc_end106:
	.size	perf_trace_f2fs_lookup_extent_tree_end, .Lfunc_end106-perf_trace_f2fs_lookup_extent_tree_end
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_lookup_extent_tree_end
	.type	trace_event_define_fields_f2fs_lookup_extent_tree_end,@function
trace_event_define_fields_f2fs_lookup_extent_tree_end: // @trace_event_define_fields_f2fs_lookup_extent_tree_end
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB107_6
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB107_6
// %bb.2:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.257
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.257
	mov	w3, #24
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB107_6
// %bb.3:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.259
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.259
	mov	w3, #28
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB107_6
// %bb.4:
	adrp	x1, .L.str.260
	adrp	x2, .L.str.261
	add	x1, x1, :lo12:.L.str.260
	add	x2, x2, :lo12:.L.str.261
	mov	w3, #32
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB107_6
// %bb.5:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.176
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.176
	mov	w3, #36
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB107_6:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end107:
	.size	trace_event_define_fields_f2fs_lookup_extent_tree_end, .Lfunc_end107-trace_event_define_fields_f2fs_lookup_extent_tree_end
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_update_extent_tree_range
	.type	trace_event_raw_event_f2fs_update_extent_tree_range,@function
trace_event_raw_event_f2fs_update_extent_tree_range: // @trace_event_raw_event_f2fs_update_extent_tree_range
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x24, [x0, #72]
	mov	w19, w4
	mov	w20, w3
	mov	w21, w2
	mov	x22, x0
	mov	x23, x1
	tbnz	w24, #8, .LBB108_6
// %bb.1:
	tbz	w24, #7, .LBB108_3
// %bb.2:
	mov	x0, x22
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB108_3:
	tbnz	w24, #6, .LBB108_8
// %bb.4:
	tbz	w24, #9, .LBB108_6
// %bb.5:
	mov	x0, x22
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB108_8
.LBB108_6:
	add	x0, sp, #8              // =8
	mov	w2, #40
	mov	x1, x22
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB108_8
// %bb.7:
	ldr	x8, [x23, #40]
	mov	w1, #40
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	stp	w21, w20, [x0, #24]
	str	w19, [x0, #32]
	str	x8, [x0, #16]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB108_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB108_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB108_10:
	bl	__stack_chk_fail
.Lfunc_end108:
	.size	trace_event_raw_event_f2fs_update_extent_tree_range, .Lfunc_end108-trace_event_raw_event_f2fs_update_extent_tree_range
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_update_extent_tree_range
	.type	perf_trace_f2fs_update_extent_tree_range,@function
perf_trace_f2fs_update_extent_tree_range: // @perf_trace_f2fs_update_extent_tree_range
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x25, [sp, #48]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x25, x30
	mov	w20, w4
	mov	w21, w3
	mov	w23, w2
	mov	x24, x1
	mov	x19, x0
	add	x22, x9, x8
	cbnz	x10, .LBB109_2
// %bb.1:
	ldr	x8, [x22]
	cbz	x8, .LBB109_4
.LBB109_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #44
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB109_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #44
	mov	w4, #1
	stp	x8, x25, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x24, #40]
	mov	x3, x19
	mov	x6, x22
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x24, #64]
	stp	w23, w21, [x0, #24]
	str	w20, [x0, #32]
	str	x8, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB109_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB109_6
// %bb.5:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldr	x25, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB109_6:
	bl	__stack_chk_fail
.Lfunc_end109:
	.size	perf_trace_f2fs_update_extent_tree_range, .Lfunc_end109-perf_trace_f2fs_update_extent_tree_range
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_update_extent_tree_range
	.type	trace_event_define_fields_f2fs_update_extent_tree_range,@function
trace_event_define_fields_f2fs_update_extent_tree_range: // @trace_event_define_fields_f2fs_update_extent_tree_range
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB110_5
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB110_5
// %bb.2:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.257
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.257
	mov	w3, #24
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB110_5
// %bb.3:
	adrp	x1, .L.str.260
	adrp	x2, .L.str.261
	add	x1, x1, :lo12:.L.str.260
	add	x2, x2, :lo12:.L.str.261
	mov	w3, #28
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB110_5
// %bb.4:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.176
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.176
	mov	w3, #32
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB110_5:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end110:
	.size	trace_event_define_fields_f2fs_update_extent_tree_range, .Lfunc_end110-trace_event_define_fields_f2fs_update_extent_tree_range
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_shrink_extent_tree
	.type	trace_event_raw_event_f2fs_shrink_extent_tree,@function
trace_event_raw_event_f2fs_shrink_extent_tree: // @trace_event_raw_event_f2fs_shrink_extent_tree
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x23, [sp, #80]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x23, [x0, #72]
	mov	w19, w3
	mov	w20, w2
	mov	x21, x0
	mov	x22, x1
	tbnz	w23, #8, .LBB111_6
// %bb.1:
	tbz	w23, #7, .LBB111_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB111_3:
	tbnz	w23, #6, .LBB111_8
// %bb.4:
	tbz	w23, #9, .LBB111_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB111_8
.LBB111_6:
	add	x0, sp, #8              // =8
	mov	w2, #20
	mov	x1, x21
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB111_8
// %bb.7:
	ldr	x8, [x22]
	mov	w1, #20
	ldr	w8, [x8, #16]
	str	w19, [x0, #16]
	stp	w8, w20, [x0, #8]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB111_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB111_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldr	x23, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB111_10:
	bl	__stack_chk_fail
.Lfunc_end111:
	.size	trace_event_raw_event_f2fs_shrink_extent_tree, .Lfunc_end111-trace_event_raw_event_f2fs_shrink_extent_tree
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_shrink_extent_tree
	.type	perf_trace_f2fs_shrink_extent_tree,@function
perf_trace_f2fs_shrink_extent_tree:     // @perf_trace_f2fs_shrink_extent_tree
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x23, x30
	mov	w20, w3
	mov	w21, w2
	mov	x24, x1
	mov	x19, x0
	add	x22, x9, x8
	cbnz	x10, .LBB112_2
// %bb.1:
	ldr	x8, [x22]
	cbz	x8, .LBB112_4
.LBB112_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #20
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB112_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w10, #5
	mov	w1, #20
	str	x29, [x9, #232]
	stp	x8, x23, [x9, #248]
	str	x10, [x9, #264]
	ldr	x8, [x24]
	mov	w4, #1
	mov	x3, x19
	mov	x6, x22
	ldr	w8, [x8, #16]
	stp	w21, w20, [x0, #12]
	mov	x7, xzr
	str	w8, [x0, #8]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB112_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB112_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB112_6:
	bl	__stack_chk_fail
.Lfunc_end112:
	.size	perf_trace_f2fs_shrink_extent_tree, .Lfunc_end112-perf_trace_f2fs_shrink_extent_tree
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_shrink_extent_tree
	.type	trace_event_define_fields_f2fs_shrink_extent_tree,@function
trace_event_define_fields_f2fs_shrink_extent_tree: // @trace_event_define_fields_f2fs_shrink_extent_tree
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB113_3
// %bb.1:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.264
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.264
	mov	w3, #12
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB113_3
// %bb.2:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.265
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.265
	mov	w3, #16
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB113_3:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end113:
	.size	trace_event_define_fields_f2fs_shrink_extent_tree, .Lfunc_end113-trace_event_define_fields_f2fs_shrink_extent_tree
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_destroy_extent_tree
	.type	trace_event_raw_event_f2fs_destroy_extent_tree,@function
trace_event_raw_event_f2fs_destroy_extent_tree: // @trace_event_raw_event_f2fs_destroy_extent_tree
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x22, [x0, #72]
	mov	w19, w2
	mov	x20, x0
	mov	x21, x1
	tbnz	w22, #8, .LBB114_6
// %bb.1:
	tbz	w22, #7, .LBB114_3
// %bb.2:
	mov	x0, x20
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB114_3:
	tbnz	w22, #6, .LBB114_8
// %bb.4:
	tbz	w22, #9, .LBB114_6
// %bb.5:
	mov	x0, x20
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB114_8
.LBB114_6:
	add	x0, sp, #8              // =8
	mov	w2, #32
	mov	x1, x20
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB114_8
// %bb.7:
	ldr	x8, [x21, #40]
	mov	w1, #32
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x21, #64]
	str	w19, [x0, #24]
	str	x8, [x0, #16]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB114_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB114_10
// %bb.9:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB114_10:
	bl	__stack_chk_fail
.Lfunc_end114:
	.size	trace_event_raw_event_f2fs_destroy_extent_tree, .Lfunc_end114-trace_event_raw_event_f2fs_destroy_extent_tree
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_destroy_extent_tree
	.type	perf_trace_f2fs_destroy_extent_tree,@function
perf_trace_f2fs_destroy_extent_tree:    // @perf_trace_f2fs_destroy_extent_tree
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x23, x30
	mov	w20, w2
	mov	x22, x1
	mov	x19, x0
	add	x21, x9, x8
	cbnz	x10, .LBB115_2
// %bb.1:
	ldr	x8, [x21]
	cbz	x8, .LBB115_4
.LBB115_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #36
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB115_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #36
	mov	w4, #1
	stp	x8, x23, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x22, #40]
	mov	x3, x19
	mov	x6, x21
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x22, #64]
	str	w20, [x0, #24]
	str	x8, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB115_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB115_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB115_6:
	bl	__stack_chk_fail
.Lfunc_end115:
	.size	perf_trace_f2fs_destroy_extent_tree, .Lfunc_end115-perf_trace_f2fs_destroy_extent_tree
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_destroy_extent_tree
	.type	trace_event_define_fields_f2fs_destroy_extent_tree,@function
trace_event_define_fields_f2fs_destroy_extent_tree: // @trace_event_define_fields_f2fs_destroy_extent_tree
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB116_3
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB116_3
// %bb.2:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.264
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.264
	mov	w3, #24
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB116_3:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end116:
	.size	trace_event_define_fields_f2fs_destroy_extent_tree, .Lfunc_end116-trace_event_define_fields_f2fs_destroy_extent_tree
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_sync_dirty_inodes
	.type	trace_event_raw_event_f2fs_sync_dirty_inodes,@function
trace_event_raw_event_f2fs_sync_dirty_inodes: // @trace_event_raw_event_f2fs_sync_dirty_inodes
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x23, [sp, #80]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x23, [x0, #72]
	mov	x19, x3
	mov	w20, w2
	mov	x21, x0
	mov	x22, x1
	tbnz	w23, #8, .LBB117_6
// %bb.1:
	tbz	w23, #7, .LBB117_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB117_3:
	tbnz	w23, #6, .LBB117_8
// %bb.4:
	tbz	w23, #9, .LBB117_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB117_8
.LBB117_6:
	add	x0, sp, #8              // =8
	mov	w2, #24
	mov	x1, x21
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB117_8
// %bb.7:
	ldr	w8, [x22, #16]
	str	x19, [x0, #16]
	mov	w1, #24
	stp	w8, w20, [x0, #8]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB117_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB117_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldr	x23, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB117_10:
	bl	__stack_chk_fail
.Lfunc_end117:
	.size	trace_event_raw_event_f2fs_sync_dirty_inodes, .Lfunc_end117-trace_event_raw_event_f2fs_sync_dirty_inodes
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_sync_dirty_inodes
	.type	perf_trace_f2fs_sync_dirty_inodes,@function
perf_trace_f2fs_sync_dirty_inodes:      // @perf_trace_f2fs_sync_dirty_inodes
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x23, x30
	mov	x20, x3
	mov	w21, w2
	mov	x24, x1
	mov	x19, x0
	add	x22, x9, x8
	cbnz	x10, .LBB118_2
// %bb.1:
	ldr	x8, [x22]
	cbz	x8, .LBB118_4
.LBB118_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #28
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB118_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w10, #5
	mov	w1, #28
	str	x29, [x9, #232]
	stp	x8, x23, [x9, #248]
	str	x10, [x9, #264]
	ldr	w8, [x24, #16]
	str	x20, [x0, #16]
	mov	w4, #1
	mov	x3, x19
	stp	w8, w21, [x0, #8]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	mov	x6, x22
	mov	x7, xzr
	bl	perf_trace_run_bpf_submit
.LBB118_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB118_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB118_6:
	bl	__stack_chk_fail
.Lfunc_end118:
	.size	perf_trace_f2fs_sync_dirty_inodes, .Lfunc_end118-perf_trace_f2fs_sync_dirty_inodes
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_sync_dirty_inodes
	.type	trace_event_define_fields_f2fs_sync_dirty_inodes,@function
trace_event_define_fields_f2fs_sync_dirty_inodes: // @trace_event_define_fields_f2fs_sync_dirty_inodes
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB119_3
// %bb.1:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.144
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.144
	mov	w3, #12
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB119_3
// %bb.2:
	adrp	x1, .L.str.268
	adrp	x2, .L.str.183
	add	x1, x1, :lo12:.L.str.268
	add	x2, x2, :lo12:.L.str.183
	mov	w3, #16
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB119_3:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end119:
	.size	trace_event_define_fields_f2fs_sync_dirty_inodes, .Lfunc_end119-trace_event_define_fields_f2fs_sync_dirty_inodes
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_shutdown
	.type	trace_event_raw_event_f2fs_shutdown,@function
trace_event_raw_event_f2fs_shutdown:    // @trace_event_raw_event_f2fs_shutdown
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x23, [sp, #80]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x23, [x0, #72]
	mov	w19, w3
	mov	w20, w2
	mov	x21, x0
	mov	x22, x1
	tbnz	w23, #8, .LBB120_6
// %bb.1:
	tbz	w23, #7, .LBB120_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB120_3:
	tbnz	w23, #6, .LBB120_8
// %bb.4:
	tbz	w23, #9, .LBB120_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB120_8
.LBB120_6:
	add	x0, sp, #8              // =8
	mov	w2, #20
	mov	x1, x21
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB120_8
// %bb.7:
	ldr	x8, [x22]
	mov	w1, #20
	ldr	w8, [x8, #16]
	str	w19, [x0, #16]
	stp	w8, w20, [x0, #8]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB120_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB120_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldr	x23, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB120_10:
	bl	__stack_chk_fail
.Lfunc_end120:
	.size	trace_event_raw_event_f2fs_shutdown, .Lfunc_end120-trace_event_raw_event_f2fs_shutdown
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_shutdown
	.type	perf_trace_f2fs_shutdown,@function
perf_trace_f2fs_shutdown:               // @perf_trace_f2fs_shutdown
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x23, x30
	mov	w20, w3
	mov	w21, w2
	mov	x24, x1
	mov	x19, x0
	add	x22, x9, x8
	cbnz	x10, .LBB121_2
// %bb.1:
	ldr	x8, [x22]
	cbz	x8, .LBB121_4
.LBB121_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #20
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB121_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w10, #5
	mov	w1, #20
	str	x29, [x9, #232]
	stp	x8, x23, [x9, #248]
	str	x10, [x9, #264]
	ldr	x8, [x24]
	mov	w4, #1
	mov	x3, x19
	mov	x6, x22
	ldr	w8, [x8, #16]
	stp	w21, w20, [x0, #12]
	mov	x7, xzr
	str	w8, [x0, #8]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB121_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB121_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB121_6:
	bl	__stack_chk_fail
.Lfunc_end121:
	.size	perf_trace_f2fs_shutdown, .Lfunc_end121-perf_trace_f2fs_shutdown
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_shutdown
	.type	trace_event_define_fields_f2fs_shutdown,@function
trace_event_define_fields_f2fs_shutdown: // @trace_event_define_fields_f2fs_shutdown
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB122_3
// %bb.1:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.65
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.65
	mov	w3, #12
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB122_3
// %bb.2:
	adrp	x1, .L.str.74
	adrp	x2, .L.str.75
	add	x1, x1, :lo12:.L.str.74
	add	x2, x2, :lo12:.L.str.75
	mov	w3, #16
	mov	w4, #4
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
.LBB122_3:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end122:
	.size	trace_event_define_fields_f2fs_shutdown, .Lfunc_end122-trace_event_define_fields_f2fs_shutdown
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_zip_start
	.type	trace_event_raw_event_f2fs_zip_start,@function
trace_event_raw_event_f2fs_zip_start:   // @trace_event_raw_event_f2fs_zip_start
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x24, [x0, #72]
	mov	w20, w4
	mov	w19, w3
	mov	x21, x2
	mov	x22, x0
	mov	x23, x1
	tbnz	w24, #8, .LBB123_6
// %bb.1:
	tbz	w24, #7, .LBB123_3
// %bb.2:
	mov	x0, x22
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB123_3:
	tbnz	w24, #6, .LBB123_8
// %bb.4:
	tbz	w24, #9, .LBB123_6
// %bb.5:
	mov	x0, x22
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB123_8
.LBB123_6:
	add	x0, sp, #8              // =8
	mov	w2, #40
	mov	x1, x22
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB123_8
// %bb.7:
	ldr	x8, [x23, #40]
	and	w9, w20, #0xff
	mov	w1, #40
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	stp	w19, w9, [x0, #32]
	stp	x8, x21, [x0, #16]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB123_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB123_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB123_10:
	bl	__stack_chk_fail
.Lfunc_end123:
	.size	trace_event_raw_event_f2fs_zip_start, .Lfunc_end123-trace_event_raw_event_f2fs_zip_start
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_zip_start
	.type	perf_trace_f2fs_zip_start,@function
perf_trace_f2fs_zip_start:              // @perf_trace_f2fs_zip_start
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x25, [sp, #48]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x25, x30
	mov	w20, w4
	mov	w22, w3
	mov	x21, x2
	mov	x24, x1
	mov	x19, x0
	add	x23, x9, x8
	cbnz	x10, .LBB124_2
// %bb.1:
	ldr	x8, [x23]
	cbz	x8, .LBB124_4
.LBB124_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #44
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB124_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #44
	mov	w4, #1
	stp	x8, x25, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x24, #40]
	and	w9, w20, #0xff
	mov	x3, x19
	mov	x6, x23
	ldr	w8, [x8, #16]
	mov	x7, xzr
	str	w8, [x0, #8]
	ldr	x8, [x24, #64]
	stp	w22, w9, [x0, #32]
	stp	x8, x21, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB124_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB124_6
// %bb.5:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldr	x25, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB124_6:
	bl	__stack_chk_fail
.Lfunc_end124:
	.size	perf_trace_f2fs_zip_start, .Lfunc_end124-perf_trace_f2fs_zip_start
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_zip_start
	.type	trace_event_define_fields_f2fs_zip_start,@function
trace_event_define_fields_f2fs_zip_start: // @trace_event_define_fields_f2fs_zip_start
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB125_5
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB125_5
// %bb.2:
	adrp	x1, .L.str.115
	adrp	x2, .L.str.276
	add	x1, x1, :lo12:.L.str.115
	add	x2, x2, :lo12:.L.str.276
	mov	w3, #24
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB125_5
// %bb.3:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.67
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.67
	mov	w3, #32
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB125_5
// %bb.4:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.277
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.277
	mov	w3, #36
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB125_5:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end125:
	.size	trace_event_define_fields_f2fs_zip_start, .Lfunc_end125-trace_event_define_fields_f2fs_zip_start
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_zip_end
	.type	trace_event_raw_event_f2fs_zip_end,@function
trace_event_raw_event_f2fs_zip_end:     // @trace_event_raw_event_f2fs_zip_end
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x24, [x0, #72]
	mov	w19, w4
	mov	w20, w3
	mov	x21, x2
	mov	x22, x0
	mov	x23, x1
	tbnz	w24, #8, .LBB126_6
// %bb.1:
	tbz	w24, #7, .LBB126_3
// %bb.2:
	mov	x0, x22
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB126_3:
	tbnz	w24, #6, .LBB126_8
// %bb.4:
	tbz	w24, #9, .LBB126_6
// %bb.5:
	mov	x0, x22
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB126_8
.LBB126_6:
	add	x0, sp, #8              // =8
	mov	w2, #40
	mov	x1, x22
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB126_8
// %bb.7:
	ldr	x8, [x23, #40]
	mov	w1, #40
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x23, #64]
	stp	w20, w19, [x0, #32]
	stp	x8, x21, [x0, #16]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB126_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB126_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB126_10:
	bl	__stack_chk_fail
.Lfunc_end126:
	.size	trace_event_raw_event_f2fs_zip_end, .Lfunc_end126-trace_event_raw_event_f2fs_zip_end
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_zip_end
	.type	perf_trace_f2fs_zip_end,@function
perf_trace_f2fs_zip_end:                // @perf_trace_f2fs_zip_end
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x25, [sp, #48]          // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x25, x30
	mov	w20, w4
	mov	w22, w3
	mov	x21, x2
	mov	x24, x1
	mov	x19, x0
	add	x23, x9, x8
	cbnz	x10, .LBB127_2
// %bb.1:
	ldr	x8, [x23]
	cbz	x8, .LBB127_4
.LBB127_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #44
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB127_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #44
	mov	w4, #1
	stp	x8, x25, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x24, #40]
	mov	x3, x19
	mov	x6, x23
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x24, #64]
	stp	w22, w20, [x0, #32]
	stp	x8, x21, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB127_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB127_6
// %bb.5:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldr	x25, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB127_6:
	bl	__stack_chk_fail
.Lfunc_end127:
	.size	perf_trace_f2fs_zip_end, .Lfunc_end127-perf_trace_f2fs_zip_end
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_zip_end
	.type	trace_event_define_fields_f2fs_zip_end,@function
trace_event_define_fields_f2fs_zip_end: // @trace_event_define_fields_f2fs_zip_end
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB128_5
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB128_5
// %bb.2:
	adrp	x1, .L.str.115
	adrp	x2, .L.str.276
	add	x1, x1, :lo12:.L.str.115
	add	x2, x2, :lo12:.L.str.276
	mov	w3, #24
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB128_5
// %bb.3:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.67
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.67
	mov	w3, #32
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB128_5
// %bb.4:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.75
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.75
	mov	w3, #36
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB128_5:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end128:
	.size	trace_event_define_fields_f2fs_zip_end, .Lfunc_end128-trace_event_define_fields_f2fs_zip_end
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_iostat
	.type	trace_event_raw_event_f2fs_iostat,@function
trace_event_raw_event_f2fs_iostat:      // @trace_event_raw_event_f2fs_iostat
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x22, [x0, #72]
	mov	x19, x2
	mov	x20, x0
	mov	x21, x1
	tbnz	w22, #8, .LBB129_6
// %bb.1:
	tbz	w22, #7, .LBB129_3
// %bb.2:
	mov	x0, x20
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB129_3:
	tbnz	w22, #6, .LBB129_8
// %bb.4:
	tbz	w22, #9, .LBB129_6
// %bb.5:
	mov	x0, x20
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB129_8
.LBB129_6:
	add	x0, sp, #8              // =8
	mov	w2, #192
	mov	x1, x20
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB129_8
// %bb.7:
	ldr	x8, [x21]
	mov	w1, #192
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x19]
	str	x8, [x0, #16]
	ldr	x8, [x19, #8]
	str	x8, [x0, #24]
	ldr	x8, [x19, #16]
	str	x8, [x0, #32]
	ldr	x8, [x19, #24]
	str	x8, [x0, #40]
	ldr	x8, [x19, #32]
	str	x8, [x0, #48]
	ldr	x8, [x19, #40]
	str	x8, [x0, #56]
	ldr	x8, [x19, #48]
	str	x8, [x0, #64]
	ldr	x8, [x19, #56]
	str	x8, [x0, #72]
	ldr	x8, [x19, #64]
	str	x8, [x0, #80]
	ldr	x8, [x19, #72]
	str	x8, [x0, #88]
	ldr	x8, [x19, #80]
	str	x8, [x0, #96]
	ldr	x8, [x19, #88]
	str	x8, [x0, #104]
	ldr	x8, [x19, #96]
	str	x8, [x0, #112]
	ldr	x8, [x19, #104]
	str	x8, [x0, #120]
	ldr	x8, [x19, #112]
	str	x8, [x0, #128]
	ldr	x8, [x19, #120]
	str	x8, [x0, #136]
	ldr	x8, [x19, #128]
	str	x8, [x0, #144]
	ldr	x8, [x19, #136]
	str	x8, [x0, #152]
	ldr	x8, [x19, #144]
	str	x8, [x0, #160]
	ldr	x8, [x19, #152]
	str	x8, [x0, #168]
	ldr	x8, [x19, #160]
	str	x8, [x0, #176]
	ldr	x8, [x19, #168]
	str	x8, [x0, #184]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB129_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB129_10
// %bb.9:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB129_10:
	bl	__stack_chk_fail
.Lfunc_end129:
	.size	trace_event_raw_event_f2fs_iostat, .Lfunc_end129-trace_event_raw_event_f2fs_iostat
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_iostat
	.type	perf_trace_f2fs_iostat,@function
perf_trace_f2fs_iostat:                 // @perf_trace_f2fs_iostat
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x23, x30
	mov	x21, x2
	mov	x22, x1
	mov	x19, x0
	add	x20, x9, x8
	cbnz	x10, .LBB130_2
// %bb.1:
	ldr	x8, [x20]
	cbz	x8, .LBB130_4
.LBB130_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #196
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB130_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #196
	mov	w4, #1
	stp	x8, x23, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x22]
	mov	x3, x19
	mov	x6, x20
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x21]
	str	x8, [x0, #16]
	ldr	x8, [x21, #8]
	str	x8, [x0, #24]
	ldr	x8, [x21, #16]
	str	x8, [x0, #32]
	ldr	x8, [x21, #24]
	str	x8, [x0, #40]
	ldr	x8, [x21, #32]
	str	x8, [x0, #48]
	ldr	x8, [x21, #40]
	str	x8, [x0, #56]
	ldr	x8, [x21, #48]
	str	x8, [x0, #64]
	ldr	x8, [x21, #56]
	str	x8, [x0, #72]
	ldr	x8, [x21, #64]
	str	x8, [x0, #80]
	ldr	x8, [x21, #72]
	str	x8, [x0, #88]
	ldr	x8, [x21, #80]
	str	x8, [x0, #96]
	ldr	x8, [x21, #88]
	str	x8, [x0, #104]
	ldr	x8, [x21, #96]
	str	x8, [x0, #112]
	ldr	x8, [x21, #104]
	str	x8, [x0, #120]
	ldr	x8, [x21, #112]
	str	x8, [x0, #128]
	ldr	x8, [x21, #120]
	str	x8, [x0, #136]
	ldr	x8, [x21, #128]
	str	x8, [x0, #144]
	ldr	x8, [x21, #136]
	str	x8, [x0, #152]
	ldr	x8, [x21, #144]
	str	x8, [x0, #160]
	ldr	x8, [x21, #152]
	str	x8, [x0, #168]
	ldr	x8, [x21, #160]
	str	x8, [x0, #176]
	ldr	x8, [x21, #168]
	str	x8, [x0, #184]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB130_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB130_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB130_6:
	bl	__stack_chk_fail
.Lfunc_end130:
	.size	perf_trace_f2fs_iostat, .Lfunc_end130-perf_trace_f2fs_iostat
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_iostat
	.type	trace_event_define_fields_f2fs_iostat,@function
trace_event_define_fields_f2fs_iostat:  // @trace_event_define_fields_f2fs_iostat
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.1:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.285
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.285
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.2:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.286
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.286
	mov	w3, #24
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.3:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.287
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.287
	mov	w3, #32
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.4:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.288
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.288
	mov	w3, #40
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.5:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.289
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.289
	mov	w3, #48
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.6:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.290
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.290
	mov	w3, #56
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.7:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.291
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.291
	mov	w3, #64
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.8:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.292
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.292
	mov	w3, #72
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.9:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.293
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.293
	mov	w3, #80
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.10:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.294
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.294
	mov	w3, #88
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.11:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.295
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.295
	mov	w3, #96
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.12:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.296
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.296
	mov	w3, #104
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.13:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.297
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.297
	mov	w3, #112
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.14:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.298
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.298
	mov	w3, #120
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.15:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.299
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.299
	mov	w3, #128
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.16:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.300
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.300
	mov	w3, #136
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.17:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.301
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.301
	mov	w3, #144
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.18:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.302
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.302
	mov	w3, #152
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.19:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.303
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.303
	mov	w3, #160
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.20:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.304
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.304
	mov	w3, #168
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.21:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.305
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.305
	mov	w3, #176
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB131_23
// %bb.22:
	adrp	x1, .L.str.284
	adrp	x2, .L.str.306
	add	x1, x1, :lo12:.L.str.284
	add	x2, x2, :lo12:.L.str.306
	mov	w3, #184
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB131_23:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end131:
	.size	trace_event_define_fields_f2fs_iostat, .Lfunc_end131-trace_event_define_fields_f2fs_iostat
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs_grading_ssr
	.type	trace_event_raw_event_f2fs_grading_ssr,@function
trace_event_raw_event_f2fs_grading_ssr: // @trace_event_raw_event_f2fs_grading_ssr
// %bb.0:
	sub	sp, sp, #128            // =128
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	str	x23, [sp, #80]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x23, [x0, #72]
	mov	w19, w3
	mov	w20, w2
	mov	x21, x0
	mov	w22, w1
	tbnz	w23, #8, .LBB132_6
// %bb.1:
	tbz	w23, #7, .LBB132_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB132_3:
	tbnz	w23, #6, .LBB132_8
// %bb.4:
	tbz	w23, #9, .LBB132_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB132_8
.LBB132_6:
	add	x0, sp, #8              // =8
	mov	w2, #20
	mov	x1, x21
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB132_8
// %bb.7:
	stp	w22, w20, [x0, #8]
	str	w19, [x0, #16]
	add	x0, sp, #8              // =8
	mov	w1, #20
	bl	trace_event_buffer_commit
.LBB132_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB132_10
// %bb.9:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldr	x23, [sp, #80]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.LBB132_10:
	bl	__stack_chk_fail
.Lfunc_end132:
	.size	trace_event_raw_event_f2fs_grading_ssr, .Lfunc_end132-trace_event_raw_event_f2fs_grading_ssr
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs_grading_ssr
	.type	perf_trace_f2fs_grading_ssr,@function
perf_trace_f2fs_grading_ssr:            // @perf_trace_f2fs_grading_ssr
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x23, x30
	mov	w20, w3
	mov	w22, w2
	mov	w24, w1
	mov	x19, x0
	add	x21, x9, x8
	cbnz	x10, .LBB133_2
// %bb.1:
	ldr	x8, [x21]
	cbz	x8, .LBB133_4
.LBB133_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #20
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB133_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w10, #5
	mov	w1, #20
	str	x29, [x9, #232]
	stp	x8, x23, [x9, #248]
	str	x10, [x9, #264]
	stp	w24, w22, [x0, #8]
	str	w20, [x0, #16]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	mov	w4, #1
	mov	x3, x19
	mov	x6, x21
	mov	x7, xzr
	bl	perf_trace_run_bpf_submit
.LBB133_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB133_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB133_6:
	bl	__stack_chk_fail
.Lfunc_end133:
	.size	perf_trace_f2fs_grading_ssr, .Lfunc_end133-perf_trace_f2fs_grading_ssr
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs_grading_ssr
	.type	trace_event_define_fields_f2fs_grading_ssr,@function
trace_event_define_fields_f2fs_grading_ssr: // @trace_event_define_fields_f2fs_grading_ssr
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.68
	adrp	x2, .L.str.308
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.308
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB134_3
// %bb.1:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.103
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.103
	mov	w3, #12
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB134_3
// %bb.2:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.309
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.309
	mov	w3, #16
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB134_3:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end134:
	.size	trace_event_define_fields_f2fs_grading_ssr, .Lfunc_end134-trace_event_define_fields_f2fs_grading_ssr
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs__dedup_inode
	.type	trace_event_raw_event_f2fs__dedup_inode,@function
trace_event_raw_event_f2fs__dedup_inode: // @trace_event_raw_event_f2fs__dedup_inode
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x22, [x0, #72]
	mov	x19, x2
	mov	x21, x0
	mov	x20, x1
	tbnz	w22, #8, .LBB135_6
// %bb.1:
	tbz	w22, #7, .LBB135_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB135_3:
	tbnz	w22, #6, .LBB135_8
// %bb.4:
	tbz	w22, #9, .LBB135_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB135_8
.LBB135_6:
	add	x0, sp, #8              // =8
	mov	w2, #64
	mov	x1, x21
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB135_8
// %bb.7:
	ldr	x8, [x20, #40]
	mov	w1, #64
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x20, #64]
	str	x8, [x0, #16]
	ldr	w8, [x20, #728]
	str	x8, [x0, #24]
	ldr	w8, [x20, #72]
	str	w8, [x0, #40]
	ldr	x8, [x20, #80]
	str	x8, [x0, #32]
	ldr	x8, [x19, #64]
	str	x8, [x0, #48]
	ldr	w8, [x19, #72]
	str	w8, [x0, #56]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB135_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB135_10
// %bb.9:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB135_10:
	bl	__stack_chk_fail
.Lfunc_end135:
	.size	trace_event_raw_event_f2fs__dedup_inode, .Lfunc_end135-trace_event_raw_event_f2fs__dedup_inode
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs__dedup_inode
	.type	perf_trace_f2fs__dedup_inode,@function
perf_trace_f2fs__dedup_inode:           // @perf_trace_f2fs__dedup_inode
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x23, x30
	mov	x21, x2
	mov	x22, x1
	mov	x19, x0
	add	x20, x9, x8
	cbnz	x10, .LBB136_2
// %bb.1:
	ldr	x8, [x20]
	cbz	x8, .LBB136_4
.LBB136_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #68
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB136_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #68
	mov	w4, #1
	stp	x8, x23, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x22, #40]
	mov	x3, x19
	mov	x6, x20
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x22, #64]
	str	x8, [x0, #16]
	ldr	w8, [x22, #728]
	str	x8, [x0, #24]
	ldr	w8, [x22, #72]
	str	w8, [x0, #40]
	ldr	x8, [x22, #80]
	str	x8, [x0, #32]
	ldr	x8, [x21, #64]
	str	x8, [x0, #48]
	ldr	w8, [x21, #72]
	str	w8, [x0, #56]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB136_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB136_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB136_6:
	bl	__stack_chk_fail
.Lfunc_end136:
	.size	perf_trace_f2fs__dedup_inode, .Lfunc_end136-perf_trace_f2fs__dedup_inode
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs__dedup_inode
	.type	trace_event_define_fields_f2fs__dedup_inode,@function
trace_event_define_fields_f2fs__dedup_inode: // @trace_event_define_fields_f2fs__dedup_inode
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB137_7
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB137_7
// %bb.2:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.63
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.63
	mov	w3, #24
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB137_7
// %bb.3:
	adrp	x1, .L.str.66
	adrp	x2, .L.str.67
	add	x1, x1, :lo12:.L.str.66
	add	x2, x2, :lo12:.L.str.67
	mov	w3, #32
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB137_7
// %bb.4:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.69
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.69
	mov	w3, #40
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB137_7
// %bb.5:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.311
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.311
	mov	w3, #48
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB137_7
// %bb.6:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.312
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.312
	mov	w3, #56
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB137_7:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end137:
	.size	trace_event_define_fields_f2fs__dedup_inode, .Lfunc_end137-trace_event_define_fields_f2fs__dedup_inode
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_event_raw_event_f2fs__dedup_map
	.type	trace_event_raw_event_f2fs__dedup_map,@function
trace_event_raw_event_f2fs__dedup_map:  // @trace_event_raw_event_f2fs__dedup_map
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	ldr	x22, [x0, #72]
	mov	x19, x2
	mov	x21, x0
	mov	x20, x1
	tbnz	w22, #8, .LBB138_6
// %bb.1:
	tbz	w22, #7, .LBB138_3
// %bb.2:
	mov	x0, x21
	mov	x1, xzr
	mov	x2, xzr
	bl	event_triggers_call
.LBB138_3:
	tbnz	w22, #6, .LBB138_8
// %bb.4:
	tbz	w22, #9, .LBB138_6
// %bb.5:
	mov	x0, x21
	bl	trace_event_ignore_this_pid
	tbnz	w0, #0, .LBB138_8
.LBB138_6:
	add	x0, sp, #8              // =8
	mov	w2, #48
	mov	x1, x21
	bl	trace_event_buffer_reserve
	cbz	x0, .LBB138_8
// %bb.7:
	ldr	x8, [x20, #40]
	mov	w1, #48
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x20, #64]
	str	x8, [x0, #16]
	ldr	x8, [x20, #80]
	str	x8, [x0, #24]
	ldr	x8, [x19, #64]
	str	x8, [x0, #32]
	ldr	w8, [x19, #72]
	str	w8, [x0, #40]
	add	x0, sp, #8              // =8
	bl	trace_event_buffer_commit
.LBB138_8:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB138_10
// %bb.9:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB138_10:
	bl	__stack_chk_fail
.Lfunc_end138:
	.size	trace_event_raw_event_f2fs__dedup_map, .Lfunc_end138-trace_event_raw_event_f2fs__dedup_map
                                        // -- End function
	.p2align	2               // -- Begin function perf_trace_f2fs__dedup_map
	.type	perf_trace_f2fs__dedup_map,@function
perf_trace_f2fs__dedup_map:             // @perf_trace_f2fs__dedup_map
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	xzr, [sp, #16]
	str	wzr, [sp, #12]
	ldr	x8, [x0, #120]
	//APP
	.if 1 == 1
661:
	mrs x9, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x9, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	ldr	x10, [x0, #128]
	mov	x23, x30
	mov	x21, x2
	mov	x22, x1
	mov	x19, x0
	add	x20, x9, x8
	cbnz	x10, .LBB139_2
// %bb.1:
	ldr	x8, [x20]
	cbz	x8, .LBB139_4
.LBB139_2:
	add	x1, sp, #16             // =16
	add	x2, sp, #12             // =12
	mov	w0, #52
	bl	perf_trace_buf_alloc
	cbz	x0, .LBB139_4
// %bb.3:
	ldr	x9, [sp, #16]
	mov	x8, sp
	mov	w1, #52
	mov	w4, #1
	stp	x8, x23, [x9, #248]
	mov	w8, #5
	str	x29, [x9, #232]
	str	x8, [x9, #264]
	ldr	x8, [x22, #40]
	mov	x3, x19
	mov	x6, x20
	mov	x7, xzr
	ldr	w8, [x8, #16]
	str	w8, [x0, #8]
	ldr	x8, [x22, #64]
	str	x8, [x0, #16]
	ldr	x8, [x22, #80]
	str	x8, [x0, #24]
	ldr	x8, [x21, #64]
	str	x8, [x0, #32]
	ldr	w8, [x21, #72]
	str	w8, [x0, #40]
	ldr	w2, [sp, #12]
	ldr	x5, [sp, #16]
	bl	perf_trace_run_bpf_submit
.LBB139_4:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB139_6
// %bb.5:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB139_6:
	bl	__stack_chk_fail
.Lfunc_end139:
	.size	perf_trace_f2fs__dedup_map, .Lfunc_end139-perf_trace_f2fs__dedup_map
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function trace_event_define_fields_f2fs__dedup_map
	.type	trace_event_define_fields_f2fs__dedup_map,@function
trace_event_define_fields_f2fs__dedup_map: // @trace_event_define_fields_f2fs__dedup_map
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x1, .L.str.59
	adrp	x2, .L.str.60
	add	x1, x1, :lo12:.L.str.59
	add	x2, x2, :lo12:.L.str.60
	mov	w3, #8
	mov	w4, #4
	mov	w5, wzr
	mov	w6, wzr
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	trace_define_field
	cbnz	w0, .LBB140_5
// %bb.1:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.62
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.62
	mov	w3, #16
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB140_5
// %bb.2:
	adrp	x1, .L.str.66
	adrp	x2, .L.str.67
	add	x1, x1, :lo12:.L.str.66
	add	x2, x2, :lo12:.L.str.67
	mov	w3, #24
	mov	w4, #8
	mov	w5, #1
	mov	x0, x19
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB140_5
// %bb.3:
	adrp	x1, .L.str.61
	adrp	x2, .L.str.311
	add	x1, x1, :lo12:.L.str.61
	add	x2, x2, :lo12:.L.str.311
	mov	w3, #32
	mov	w4, #8
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
	cbnz	w0, .LBB140_5
// %bb.4:
	adrp	x1, .L.str.68
	adrp	x2, .L.str.312
	add	x1, x1, :lo12:.L.str.68
	add	x2, x2, :lo12:.L.str.312
	mov	w3, #40
	mov	w4, #4
	mov	x0, x19
	mov	w5, wzr
	mov	w6, wzr
	bl	trace_define_field
.LBB140_5:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end140:
	.size	trace_event_define_fields_f2fs__dedup_map, .Lfunc_end140-trace_event_define_fields_f2fs__dedup_map
                                        // -- End function
	.text
	.p2align	2               // -- Begin function __bpf_trace_f2fs__inode
	.type	__bpf_trace_f2fs__inode,@function
__bpf_trace_f2fs__inode:                // @__bpf_trace_f2fs__inode
// %bb.0:
	sub	sp, sp, #64             // =64
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x19, [sp, #48]          // 8-byte Folded Spill
	mov	x19, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	bl	memcpy
	ldr	x1, [sp, #8]
	mov	x0, x19
	bl	bpf_trace_run1
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB141_2
// %bb.1:
	ldr	x19, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #64             // =64
	ret
.LBB141_2:
	bl	__stack_chk_fail
.Lfunc_end141:
	.size	__bpf_trace_f2fs__inode, .Lfunc_end141-__bpf_trace_f2fs__inode
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_sync_file_exit
	.type	__bpf_trace_f2fs_sync_file_exit,@function
__bpf_trace_f2fs_sync_file_exit:        // @__bpf_trace_f2fs_sync_file_exit
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	w21, w2
	mov	x22, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w4
	mov	w20, w3
	bl	memcpy
	ldr	x23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w21, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w4, [sp, #8]
	mov	x0, x22
	mov	x1, x23
	mov	x2, x21
	mov	x3, x20
	bl	bpf_trace_run4
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB142_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB142_2:
	bl	__stack_chk_fail
.Lfunc_end142:
	.size	__bpf_trace_f2fs_sync_file_exit, .Lfunc_end142-__bpf_trace_f2fs_sync_file_exit
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_sync_fs
	.type	__bpf_trace_f2fs_sync_fs,@function
__bpf_trace_f2fs_sync_fs:               // @__bpf_trace_f2fs_sync_fs
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x21, [sp, #48]          // 8-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	w19, w2
	mov	x20, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w2, [sp, #8]
	mov	x0, x20
	mov	x1, x21
	bl	bpf_trace_run2
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB143_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldr	x21, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB143_2:
	bl	__stack_chk_fail
.Lfunc_end143:
	.size	__bpf_trace_f2fs_sync_fs, .Lfunc_end143-__bpf_trace_f2fs_sync_fs
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs__inode_exit
	.type	__bpf_trace_f2fs__inode_exit,@function
__bpf_trace_f2fs__inode_exit:           // @__bpf_trace_f2fs__inode_exit
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x21, [sp, #48]          // 8-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	w19, w2
	mov	x20, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w2, [sp, #8]
	mov	x0, x20
	mov	x1, x21
	bl	bpf_trace_run2
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB144_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldr	x21, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB144_2:
	bl	__stack_chk_fail
.Lfunc_end144:
	.size	__bpf_trace_f2fs__inode_exit, .Lfunc_end144-__bpf_trace_f2fs__inode_exit
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_unlink_enter
	.type	__bpf_trace_f2fs_unlink_enter,@function
__bpf_trace_f2fs_unlink_enter:          // @__bpf_trace_f2fs_unlink_enter
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x21, [sp, #48]          // 8-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	x19, x2
	mov	x20, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x19, [sp, #8]
	bl	memcpy
	ldr	x2, [sp, #8]
	mov	x0, x20
	mov	x1, x21
	bl	bpf_trace_run2
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB145_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldr	x21, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB145_2:
	bl	__stack_chk_fail
.Lfunc_end145:
	.size	__bpf_trace_f2fs_unlink_enter, .Lfunc_end145-__bpf_trace_f2fs_unlink_enter
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_truncate_data_blocks_range
	.type	__bpf_trace_f2fs_truncate_data_blocks_range,@function
__bpf_trace_f2fs_truncate_data_blocks_range: // @__bpf_trace_f2fs_truncate_data_blocks_range
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	w21, w2
	mov	x22, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w4
	mov	w20, w3
	bl	memcpy
	ldr	x23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w21, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w4, [sp, #8]
	mov	x0, x22
	mov	x1, x23
	mov	x2, x21
	mov	x3, x20
	bl	bpf_trace_run4
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB146_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB146_2:
	bl	__stack_chk_fail
.Lfunc_end146:
	.size	__bpf_trace_f2fs_truncate_data_blocks_range, .Lfunc_end146-__bpf_trace_f2fs_truncate_data_blocks_range
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs__truncate_op
	.type	__bpf_trace_f2fs__truncate_op,@function
__bpf_trace_f2fs__truncate_op:          // @__bpf_trace_f2fs__truncate_op
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x21, [sp, #48]          // 8-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	x19, x2
	mov	x20, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x19, [sp, #8]
	bl	memcpy
	ldr	x2, [sp, #8]
	mov	x0, x20
	mov	x1, x21
	bl	bpf_trace_run2
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB147_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldr	x21, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB147_2:
	bl	__stack_chk_fail
.Lfunc_end147:
	.size	__bpf_trace_f2fs__truncate_op, .Lfunc_end147-__bpf_trace_f2fs__truncate_op
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs__truncate_node
	.type	__bpf_trace_f2fs__truncate_node,@function
__bpf_trace_f2fs__truncate_node:        // @__bpf_trace_f2fs__truncate_node
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x22, x21, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	w20, w2
	mov	x21, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w3
	bl	memcpy
	ldr	x22, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w3, [sp, #8]
	mov	x0, x21
	mov	x1, x22
	mov	x2, x20
	bl	bpf_trace_run3
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB148_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB148_2:
	bl	__stack_chk_fail
.Lfunc_end148:
	.size	__bpf_trace_f2fs__truncate_node, .Lfunc_end148-__bpf_trace_f2fs__truncate_node
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_truncate_partial_nodes
	.type	__bpf_trace_f2fs_truncate_partial_nodes,@function
__bpf_trace_f2fs_truncate_partial_nodes: // @__bpf_trace_f2fs_truncate_partial_nodes
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	x21, x2
	mov	x22, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w4
	mov	w20, w3
	bl	memcpy
	ldr	x23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x21, [sp, #8]
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w4, [sp, #8]
	mov	x0, x22
	mov	x1, x23
	mov	x2, x21
	mov	x3, x20
	bl	bpf_trace_run4
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB149_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB149_2:
	bl	__stack_chk_fail
.Lfunc_end149:
	.size	__bpf_trace_f2fs_truncate_partial_nodes, .Lfunc_end149-__bpf_trace_f2fs_truncate_partial_nodes
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_file_write_iter
	.type	__bpf_trace_f2fs_file_write_iter,@function
__bpf_trace_f2fs_file_write_iter:       // @__bpf_trace_f2fs_file_write_iter
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	x21, x2
	mov	x22, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w4
	mov	x20, x3
	bl	memcpy
	ldr	x23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x21, [sp, #8]
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x20, [sp, #8]
	bl	memcpy
	ldr	x20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w4, [sp, #8]
	mov	x0, x22
	mov	x1, x23
	mov	x2, x21
	mov	x3, x20
	bl	bpf_trace_run4
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB150_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB150_2:
	bl	__stack_chk_fail
.Lfunc_end150:
	.size	__bpf_trace_f2fs_file_write_iter, .Lfunc_end150-__bpf_trace_f2fs_file_write_iter
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_map_blocks
	.type	__bpf_trace_f2fs_map_blocks,@function
__bpf_trace_f2fs_map_blocks:            // @__bpf_trace_f2fs_map_blocks
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x22, x21, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	x20, x2
	mov	x21, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w3
	bl	memcpy
	ldr	x22, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x20, [sp, #8]
	bl	memcpy
	ldr	x20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w3, [sp, #8]
	mov	x0, x21
	mov	x1, x22
	mov	x2, x20
	bl	bpf_trace_run3
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB151_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB151_2:
	bl	__stack_chk_fail
.Lfunc_end151:
	.size	__bpf_trace_f2fs_map_blocks, .Lfunc_end151-__bpf_trace_f2fs_map_blocks
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_background_gc
	.type	__bpf_trace_f2fs_background_gc,@function
__bpf_trace_f2fs_background_gc:         // @__bpf_trace_f2fs_background_gc
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	w21, w2
	mov	x22, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w4
	mov	w20, w3
	bl	memcpy
	ldr	x23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w21, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w4, [sp, #8]
	mov	x0, x22
	mov	x1, x23
	mov	x2, x21
	mov	x3, x20
	bl	bpf_trace_run4
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB152_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB152_2:
	bl	__stack_chk_fail
.Lfunc_end152:
	.size	__bpf_trace_f2fs_background_gc, .Lfunc_end152-__bpf_trace_f2fs_background_gc
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_gc_begin
	.type	__bpf_trace_f2fs_gc_begin,@function
__bpf_trace_f2fs_gc_begin:              // @__bpf_trace_f2fs_gc_begin
// %bb.0:
	sub	sp, sp, #160            // =160
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #64]     // 16-byte Folded Spill
	add	x29, sp, #64            // =64
	stp	x28, x27, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]    // 16-byte Folded Spill
	ldr	w27, [x29, #112]
	ldr	w28, [x29, #104]
	ldr	w19, [x29, #96]
	stp	x26, x25, [sp, #96]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]    // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]    // 16-byte Folded Spill
	str	x0, [sp, #32]           // 8-byte Folded Spill
	and	w21, w2, #0x1
	stur	x8, [x29, #-8]
	stp	xzr, x1, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #8
	mov	w23, w7
	mov	x25, x6
	mov	x26, x5
	mov	x24, x4
	and	w22, w3, #0x1
	bl	memcpy
	ldur	x20, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #1
	sturb	w21, [x29, #-16]
	sturb	wzr, [x29, #-24]
	bl	memcpy
	ldurb	w21, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #1
	sturb	w22, [x29, #-16]
	sturb	wzr, [x29, #-24]
	bl	memcpy
	ldurb	w22, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #8
	stp	xzr, x24, [x29, #-24]
	bl	memcpy
	ldur	x24, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #8
	stp	xzr, x26, [x29, #-24]
	bl	memcpy
	ldur	x26, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #8
	stp	xzr, x25, [x29, #-24]
	bl	memcpy
	ldur	x25, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #4
	stur	w23, [x29, #-16]
	stur	wzr, [x29, #-24]
	bl	memcpy
	ldur	w23, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #4
	stur	w19, [x29, #-16]
	stur	wzr, [x29, #-24]
	bl	memcpy
	ldur	w19, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #4
	stur	w28, [x29, #-16]
	stur	wzr, [x29, #-24]
	bl	memcpy
	ldur	w28, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #4
	stur	w27, [x29, #-16]
	stur	wzr, [x29, #-24]
	bl	memcpy
	ldur	w8, [x29, #-24]
	ldr	x0, [sp, #32]           // 8-byte Folded Reload
	mov	x1, x20
	mov	x2, x21
	mov	x3, x22
	mov	x4, x24
	mov	x5, x26
	mov	x6, x25
	mov	x7, x23
	stp	x28, x8, [sp, #8]
	str	x19, [sp]
	bl	bpf_trace_run10
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB153_2
// %bb.1:
	ldp	x20, x19, [sp, #144]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #128]    // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]    // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]     // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]     // 16-byte Folded Reload
	add	sp, sp, #160            // =160
	ret
.LBB153_2:
	bl	__stack_chk_fail
.Lfunc_end153:
	.size	__bpf_trace_f2fs_gc_begin, .Lfunc_end153-__bpf_trace_f2fs_gc_begin
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_gc_end
	.type	__bpf_trace_f2fs_gc_end,@function
__bpf_trace_f2fs_gc_end:                // @__bpf_trace_f2fs_gc_end
// %bb.0:
	sub	sp, sp, #176            // =176
	stp	x29, x30, [sp, #80]     // 16-byte Folded Spill
	add	x29, sp, #80            // =80
	ldr	w8, [x29, #120]
	stp	x28, x27, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]    // 16-byte Folded Spill
	ldr	w28, [x29, #112]
	stur	w8, [x29, #-36]         // 4-byte Folded Spill
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	ldr	w19, [x29, #104]
	ldr	w27, [x29, #96]
	stp	x26, x25, [sp, #112]    // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]    // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]    // 16-byte Folded Spill
	mov	w21, w2
	stur	x0, [x29, #-32]         // 8-byte Folded Spill
	stur	x8, [x29, #-8]
	stp	xzr, x1, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #8
	mov	x24, x7
	mov	x26, x6
	mov	x25, x5
	mov	w23, w4
	mov	w22, w3
	bl	memcpy
	ldur	x20, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #4
	stur	w21, [x29, #-16]
	stur	wzr, [x29, #-24]
	bl	memcpy
	ldur	w21, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #4
	stur	w22, [x29, #-16]
	stur	wzr, [x29, #-24]
	bl	memcpy
	ldur	w22, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #4
	stur	w23, [x29, #-16]
	stur	wzr, [x29, #-24]
	bl	memcpy
	ldur	w23, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #8
	stp	xzr, x25, [x29, #-24]
	bl	memcpy
	ldur	x25, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #8
	stp	xzr, x26, [x29, #-24]
	bl	memcpy
	ldur	x26, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #8
	stp	xzr, x24, [x29, #-24]
	bl	memcpy
	ldur	x24, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #4
	stur	w27, [x29, #-16]
	stur	wzr, [x29, #-24]
	bl	memcpy
	ldur	w27, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #4
	stur	w19, [x29, #-16]
	stur	wzr, [x29, #-24]
	bl	memcpy
	ldur	w19, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #4
	stur	w28, [x29, #-16]
	stur	wzr, [x29, #-24]
	bl	memcpy
	ldur	w8, [x29, #-36]         // 4-byte Folded Reload
	ldur	w28, [x29, #-24]
	sub	x0, x29, #24            // =24
	sub	x1, x29, #16            // =16
	mov	w2, #4
	stur	w8, [x29, #-16]
	stur	wzr, [x29, #-24]
	bl	memcpy
	ldur	w8, [x29, #-24]
	ldur	x0, [x29, #-32]         // 8-byte Folded Reload
	mov	x1, x20
	mov	x2, x21
	mov	x3, x22
	mov	x4, x23
	mov	x5, x25
	mov	x6, x26
	mov	x7, x24
	stp	x28, x8, [sp, #16]
	stp	x27, x19, [sp]
	bl	bpf_trace_run11
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB154_2
// %bb.1:
	ldp	x20, x19, [sp, #160]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]    // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]    // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]    // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]     // 16-byte Folded Reload
	add	sp, sp, #176            // =176
	ret
.LBB154_2:
	bl	__stack_chk_fail
.Lfunc_end154:
	.size	__bpf_trace_f2fs_gc_end, .Lfunc_end154-__bpf_trace_f2fs_gc_end
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_get_victim
	.type	__bpf_trace_f2fs_get_victim,@function
__bpf_trace_f2fs_get_victim:            // @__bpf_trace_f2fs_get_victim
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x26, x25, [sp, #48]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	mov	w26, w2
	mov	x19, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w20, w7
	mov	w22, w6
	mov	w23, w5
	mov	x24, x4
	mov	w25, w3
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w26, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w26, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w25, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w25, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x24, [sp, #8]
	bl	memcpy
	ldr	x24, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w23, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w22, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w22, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w7, [sp, #8]
	mov	x0, x19
	mov	x1, x21
	mov	x2, x26
	mov	x3, x25
	mov	x4, x24
	mov	x5, x23
	mov	x6, x22
	bl	bpf_trace_run7
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB155_2
// %bb.1:
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB155_2:
	bl	__stack_chk_fail
.Lfunc_end155:
	.size	__bpf_trace_f2fs_get_victim, .Lfunc_end155-__bpf_trace_f2fs_get_victim
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_lookup_start
	.type	__bpf_trace_f2fs_lookup_start,@function
__bpf_trace_f2fs_lookup_start:          // @__bpf_trace_f2fs_lookup_start
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x22, x21, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	x20, x2
	mov	x21, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w3
	bl	memcpy
	ldr	x22, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x20, [sp, #8]
	bl	memcpy
	ldr	x20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w3, [sp, #8]
	mov	x0, x21
	mov	x1, x22
	mov	x2, x20
	bl	bpf_trace_run3
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB156_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB156_2:
	bl	__stack_chk_fail
.Lfunc_end156:
	.size	__bpf_trace_f2fs_lookup_start, .Lfunc_end156-__bpf_trace_f2fs_lookup_start
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_lookup_end
	.type	__bpf_trace_f2fs_lookup_end,@function
__bpf_trace_f2fs_lookup_end:            // @__bpf_trace_f2fs_lookup_end
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	x21, x2
	mov	x22, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w4
	mov	w20, w3
	bl	memcpy
	ldr	x23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x21, [sp, #8]
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w4, [sp, #8]
	mov	x0, x22
	mov	x1, x23
	mov	x2, x21
	mov	x3, x20
	bl	bpf_trace_run4
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB157_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB157_2:
	bl	__stack_chk_fail
.Lfunc_end157:
	.size	__bpf_trace_f2fs_lookup_end, .Lfunc_end157-__bpf_trace_f2fs_lookup_end
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_readdir
	.type	__bpf_trace_f2fs_readdir,@function
__bpf_trace_f2fs_readdir:               // @__bpf_trace_f2fs_readdir
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	x21, x2
	mov	x22, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w4
	mov	x20, x3
	bl	memcpy
	ldr	x23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x21, [sp, #8]
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x20, [sp, #8]
	bl	memcpy
	ldr	x20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w4, [sp, #8]
	mov	x0, x22
	mov	x1, x23
	mov	x2, x21
	mov	x3, x20
	bl	bpf_trace_run4
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB158_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB158_2:
	bl	__stack_chk_fail
.Lfunc_end158:
	.size	__bpf_trace_f2fs_readdir, .Lfunc_end158-__bpf_trace_f2fs_readdir
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_fallocate
	.type	__bpf_trace_f2fs_fallocate,@function
__bpf_trace_f2fs_fallocate:             // @__bpf_trace_f2fs_fallocate
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	w23, w2
	mov	x19, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w20, w5
	mov	x21, x4
	mov	x22, x3
	bl	memcpy
	ldr	x24, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w23, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x22, [sp, #8]
	bl	memcpy
	ldr	x22, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x21, [sp, #8]
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w5, [sp, #8]
	mov	x0, x19
	mov	x1, x24
	mov	x2, x23
	mov	x3, x22
	mov	x4, x21
	bl	bpf_trace_run5
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB159_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB159_2:
	bl	__stack_chk_fail
.Lfunc_end159:
	.size	__bpf_trace_f2fs_fallocate, .Lfunc_end159-__bpf_trace_f2fs_fallocate
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_direct_IO_enter
	.type	__bpf_trace_f2fs_direct_IO_enter,@function
__bpf_trace_f2fs_direct_IO_enter:       // @__bpf_trace_f2fs_direct_IO_enter
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	x21, x2
	mov	x22, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w4
	mov	x20, x3
	bl	memcpy
	ldr	x23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x21, [sp, #8]
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x20, [sp, #8]
	bl	memcpy
	ldr	x20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w4, [sp, #8]
	mov	x0, x22
	mov	x1, x23
	mov	x2, x21
	mov	x3, x20
	bl	bpf_trace_run4
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB160_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB160_2:
	bl	__stack_chk_fail
.Lfunc_end160:
	.size	__bpf_trace_f2fs_direct_IO_enter, .Lfunc_end160-__bpf_trace_f2fs_direct_IO_enter
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_direct_IO_exit
	.type	__bpf_trace_f2fs_direct_IO_exit,@function
__bpf_trace_f2fs_direct_IO_exit:        // @__bpf_trace_f2fs_direct_IO_exit
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	x23, x2
	mov	x19, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w20, w5
	mov	w21, w4
	mov	x22, x3
	bl	memcpy
	ldr	x24, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x23, [sp, #8]
	bl	memcpy
	ldr	x23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x22, [sp, #8]
	bl	memcpy
	ldr	x22, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w21, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w5, [sp, #8]
	mov	x0, x19
	mov	x1, x24
	mov	x2, x23
	mov	x3, x22
	mov	x4, x21
	bl	bpf_trace_run5
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB161_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB161_2:
	bl	__stack_chk_fail
.Lfunc_end161:
	.size	__bpf_trace_f2fs_direct_IO_exit, .Lfunc_end161-__bpf_trace_f2fs_direct_IO_exit
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_reserve_new_blocks
	.type	__bpf_trace_f2fs_reserve_new_blocks,@function
__bpf_trace_f2fs_reserve_new_blocks:    // @__bpf_trace_f2fs_reserve_new_blocks
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	w21, w2
	mov	x22, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	x19, x4
	mov	w20, w3
	bl	memcpy
	ldr	x23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w21, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x19, [sp, #8]
	bl	memcpy
	ldr	x4, [sp, #8]
	mov	x0, x22
	mov	x1, x23
	mov	x2, x21
	mov	x3, x20
	bl	bpf_trace_run4
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB162_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB162_2:
	bl	__stack_chk_fail
.Lfunc_end162:
	.size	__bpf_trace_f2fs_reserve_new_blocks, .Lfunc_end162-__bpf_trace_f2fs_reserve_new_blocks
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs__submit_page_bio
	.type	__bpf_trace_f2fs__submit_page_bio,@function
__bpf_trace_f2fs__submit_page_bio:      // @__bpf_trace_f2fs__submit_page_bio
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x21, [sp, #48]          // 8-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	x19, x2
	mov	x20, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x19, [sp, #8]
	bl	memcpy
	ldr	x2, [sp, #8]
	mov	x0, x20
	mov	x1, x21
	bl	bpf_trace_run2
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB163_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldr	x21, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB163_2:
	bl	__stack_chk_fail
.Lfunc_end163:
	.size	__bpf_trace_f2fs__submit_page_bio, .Lfunc_end163-__bpf_trace_f2fs__submit_page_bio
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs__bio
	.type	__bpf_trace_f2fs__bio,@function
__bpf_trace_f2fs__bio:                  // @__bpf_trace_f2fs__bio
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x22, x21, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	w20, w2
	mov	x21, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	x19, x3
	bl	memcpy
	ldr	x22, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x19, [sp, #8]
	bl	memcpy
	ldr	x3, [sp, #8]
	mov	x0, x21
	mov	x1, x22
	mov	x2, x20
	bl	bpf_trace_run3
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB164_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB164_2:
	bl	__stack_chk_fail
.Lfunc_end164:
	.size	__bpf_trace_f2fs__bio, .Lfunc_end164-__bpf_trace_f2fs__bio
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_write_begin
	.type	__bpf_trace_f2fs_write_begin,@function
__bpf_trace_f2fs_write_begin:           // @__bpf_trace_f2fs_write_begin
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	x21, x2
	mov	x22, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w4
	mov	w20, w3
	bl	memcpy
	ldr	x23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x21, [sp, #8]
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w4, [sp, #8]
	mov	x0, x22
	mov	x1, x23
	mov	x2, x21
	mov	x3, x20
	bl	bpf_trace_run4
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB165_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB165_2:
	bl	__stack_chk_fail
.Lfunc_end165:
	.size	__bpf_trace_f2fs_write_begin, .Lfunc_end165-__bpf_trace_f2fs_write_begin
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_write_end
	.type	__bpf_trace_f2fs_write_end,@function
__bpf_trace_f2fs_write_end:             // @__bpf_trace_f2fs_write_end
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	x21, x2
	mov	x22, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w4
	mov	w20, w3
	bl	memcpy
	ldr	x23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x21, [sp, #8]
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w4, [sp, #8]
	mov	x0, x22
	mov	x1, x23
	mov	x2, x21
	mov	x3, x20
	bl	bpf_trace_run4
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB166_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB166_2:
	bl	__stack_chk_fail
.Lfunc_end166:
	.size	__bpf_trace_f2fs_write_end, .Lfunc_end166-__bpf_trace_f2fs_write_end
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs__page
	.type	__bpf_trace_f2fs__page,@function
__bpf_trace_f2fs__page:                 // @__bpf_trace_f2fs__page
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x21, [sp, #48]          // 8-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	w19, w2
	mov	x20, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w2, [sp, #8]
	mov	x0, x20
	mov	x1, x21
	bl	bpf_trace_run2
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB167_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldr	x21, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB167_2:
	bl	__stack_chk_fail
.Lfunc_end167:
	.size	__bpf_trace_f2fs__page, .Lfunc_end167-__bpf_trace_f2fs__page
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_filemap_fault
	.type	__bpf_trace_f2fs_filemap_fault,@function
__bpf_trace_f2fs_filemap_fault:         // @__bpf_trace_f2fs_filemap_fault
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x22, x21, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	x20, x2
	mov	x21, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	x19, x3
	bl	memcpy
	ldr	x22, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x20, [sp, #8]
	bl	memcpy
	ldr	x20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x19, [sp, #8]
	bl	memcpy
	ldr	x3, [sp, #8]
	mov	x0, x21
	mov	x1, x22
	mov	x2, x20
	bl	bpf_trace_run3
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB168_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB168_2:
	bl	__stack_chk_fail
.Lfunc_end168:
	.size	__bpf_trace_f2fs_filemap_fault, .Lfunc_end168-__bpf_trace_f2fs_filemap_fault
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_writepages
	.type	__bpf_trace_f2fs_writepages,@function
__bpf_trace_f2fs_writepages:            // @__bpf_trace_f2fs_writepages
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x22, x21, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	x20, x2
	mov	x21, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w3
	bl	memcpy
	ldr	x22, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x20, [sp, #8]
	bl	memcpy
	ldr	x20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w3, [sp, #8]
	mov	x0, x21
	mov	x1, x22
	mov	x2, x20
	bl	bpf_trace_run3
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB169_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB169_2:
	bl	__stack_chk_fail
.Lfunc_end169:
	.size	__bpf_trace_f2fs_writepages, .Lfunc_end169-__bpf_trace_f2fs_writepages
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_readpages
	.type	__bpf_trace_f2fs_readpages,@function
__bpf_trace_f2fs_readpages:             // @__bpf_trace_f2fs_readpages
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x22, x21, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	x20, x2
	mov	x21, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w3
	bl	memcpy
	ldr	x22, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x20, [sp, #8]
	bl	memcpy
	ldr	x20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w3, [sp, #8]
	mov	x0, x21
	mov	x1, x22
	mov	x2, x20
	bl	bpf_trace_run3
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB170_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB170_2:
	bl	__stack_chk_fail
.Lfunc_end170:
	.size	__bpf_trace_f2fs_readpages, .Lfunc_end170-__bpf_trace_f2fs_readpages
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_write_checkpoint
	.type	__bpf_trace_f2fs_write_checkpoint,@function
__bpf_trace_f2fs_write_checkpoint:      // @__bpf_trace_f2fs_write_checkpoint
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x22, x21, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	w20, w2
	mov	x21, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	x19, x3
	bl	memcpy
	ldr	x22, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x19, [sp, #8]
	bl	memcpy
	ldr	x3, [sp, #8]
	mov	x0, x21
	mov	x1, x22
	mov	x2, x20
	bl	bpf_trace_run3
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB171_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB171_2:
	bl	__stack_chk_fail
.Lfunc_end171:
	.size	__bpf_trace_f2fs_write_checkpoint, .Lfunc_end171-__bpf_trace_f2fs_write_checkpoint
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_discard
	.type	__bpf_trace_f2fs_discard,@function
__bpf_trace_f2fs_discard:               // @__bpf_trace_f2fs_discard
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x22, x21, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	w20, w2
	mov	x21, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w3
	bl	memcpy
	ldr	x22, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w3, [sp, #8]
	mov	x0, x21
	mov	x1, x22
	mov	x2, x20
	bl	bpf_trace_run3
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB172_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB172_2:
	bl	__stack_chk_fail
.Lfunc_end172:
	.size	__bpf_trace_f2fs_discard, .Lfunc_end172-__bpf_trace_f2fs_discard
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_issue_reset_zone
	.type	__bpf_trace_f2fs_issue_reset_zone,@function
__bpf_trace_f2fs_issue_reset_zone:      // @__bpf_trace_f2fs_issue_reset_zone
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x21, [sp, #48]          // 8-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	w19, w2
	mov	x20, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w2, [sp, #8]
	mov	x0, x20
	mov	x1, x21
	bl	bpf_trace_run2
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB173_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldr	x21, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB173_2:
	bl	__stack_chk_fail
.Lfunc_end173:
	.size	__bpf_trace_f2fs_issue_reset_zone, .Lfunc_end173-__bpf_trace_f2fs_issue_reset_zone
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_issue_flush
	.type	__bpf_trace_f2fs_issue_flush,@function
__bpf_trace_f2fs_issue_flush:           // @__bpf_trace_f2fs_issue_flush
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	w21, w2
	mov	x22, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w4
	mov	w20, w3
	bl	memcpy
	ldr	x23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w21, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w4, [sp, #8]
	mov	x0, x22
	mov	x1, x23
	mov	x2, x21
	mov	x3, x20
	bl	bpf_trace_run4
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB174_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB174_2:
	bl	__stack_chk_fail
.Lfunc_end174:
	.size	__bpf_trace_f2fs_issue_flush, .Lfunc_end174-__bpf_trace_f2fs_issue_flush
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_lookup_extent_tree_start
	.type	__bpf_trace_f2fs_lookup_extent_tree_start,@function
__bpf_trace_f2fs_lookup_extent_tree_start: // @__bpf_trace_f2fs_lookup_extent_tree_start
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x21, [sp, #48]          // 8-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	w19, w2
	mov	x20, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w2, [sp, #8]
	mov	x0, x20
	mov	x1, x21
	bl	bpf_trace_run2
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB175_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldr	x21, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB175_2:
	bl	__stack_chk_fail
.Lfunc_end175:
	.size	__bpf_trace_f2fs_lookup_extent_tree_start, .Lfunc_end175-__bpf_trace_f2fs_lookup_extent_tree_start
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_lookup_extent_tree_end
	.type	__bpf_trace_f2fs_lookup_extent_tree_end,@function
__bpf_trace_f2fs_lookup_extent_tree_end: // @__bpf_trace_f2fs_lookup_extent_tree_end
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x22, x21, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	w20, w2
	mov	x21, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	x19, x3
	bl	memcpy
	ldr	x22, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x19, [sp, #8]
	bl	memcpy
	ldr	x3, [sp, #8]
	mov	x0, x21
	mov	x1, x22
	mov	x2, x20
	bl	bpf_trace_run3
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB176_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB176_2:
	bl	__stack_chk_fail
.Lfunc_end176:
	.size	__bpf_trace_f2fs_lookup_extent_tree_end, .Lfunc_end176-__bpf_trace_f2fs_lookup_extent_tree_end
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_update_extent_tree_range
	.type	__bpf_trace_f2fs_update_extent_tree_range,@function
__bpf_trace_f2fs_update_extent_tree_range: // @__bpf_trace_f2fs_update_extent_tree_range
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	w21, w2
	mov	x22, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w4
	mov	w20, w3
	bl	memcpy
	ldr	x23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w21, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w4, [sp, #8]
	mov	x0, x22
	mov	x1, x23
	mov	x2, x21
	mov	x3, x20
	bl	bpf_trace_run4
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB177_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB177_2:
	bl	__stack_chk_fail
.Lfunc_end177:
	.size	__bpf_trace_f2fs_update_extent_tree_range, .Lfunc_end177-__bpf_trace_f2fs_update_extent_tree_range
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_shrink_extent_tree
	.type	__bpf_trace_f2fs_shrink_extent_tree,@function
__bpf_trace_f2fs_shrink_extent_tree:    // @__bpf_trace_f2fs_shrink_extent_tree
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x22, x21, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	w20, w2
	mov	x21, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w3
	bl	memcpy
	ldr	x22, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w3, [sp, #8]
	mov	x0, x21
	mov	x1, x22
	mov	x2, x20
	bl	bpf_trace_run3
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB178_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB178_2:
	bl	__stack_chk_fail
.Lfunc_end178:
	.size	__bpf_trace_f2fs_shrink_extent_tree, .Lfunc_end178-__bpf_trace_f2fs_shrink_extent_tree
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_destroy_extent_tree
	.type	__bpf_trace_f2fs_destroy_extent_tree,@function
__bpf_trace_f2fs_destroy_extent_tree:   // @__bpf_trace_f2fs_destroy_extent_tree
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x21, [sp, #48]          // 8-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	w19, w2
	mov	x20, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w2, [sp, #8]
	mov	x0, x20
	mov	x1, x21
	bl	bpf_trace_run2
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB179_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldr	x21, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB179_2:
	bl	__stack_chk_fail
.Lfunc_end179:
	.size	__bpf_trace_f2fs_destroy_extent_tree, .Lfunc_end179-__bpf_trace_f2fs_destroy_extent_tree
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_sync_dirty_inodes
	.type	__bpf_trace_f2fs_sync_dirty_inodes,@function
__bpf_trace_f2fs_sync_dirty_inodes:     // @__bpf_trace_f2fs_sync_dirty_inodes
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x22, x21, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	w20, w2
	mov	x21, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	x19, x3
	bl	memcpy
	ldr	x22, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x19, [sp, #8]
	bl	memcpy
	ldr	x3, [sp, #8]
	mov	x0, x21
	mov	x1, x22
	mov	x2, x20
	bl	bpf_trace_run3
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB180_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB180_2:
	bl	__stack_chk_fail
.Lfunc_end180:
	.size	__bpf_trace_f2fs_sync_dirty_inodes, .Lfunc_end180-__bpf_trace_f2fs_sync_dirty_inodes
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_shutdown
	.type	__bpf_trace_f2fs_shutdown,@function
__bpf_trace_f2fs_shutdown:              // @__bpf_trace_f2fs_shutdown
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	stp	x22, x21, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	w20, w2
	mov	x21, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w3
	bl	memcpy
	ldr	x22, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w3, [sp, #8]
	mov	x0, x21
	mov	x1, x22
	mov	x2, x20
	bl	bpf_trace_run3
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB181_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB181_2:
	bl	__stack_chk_fail
.Lfunc_end181:
	.size	__bpf_trace_f2fs_shutdown, .Lfunc_end181-__bpf_trace_f2fs_shutdown
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_zip_start
	.type	__bpf_trace_f2fs_zip_start,@function
__bpf_trace_f2fs_zip_start:             // @__bpf_trace_f2fs_zip_start
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	x21, x2
	mov	x22, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w4
	mov	w20, w3
	bl	memcpy
	ldr	x23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x21, [sp, #8]
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #1
	strb	w19, [sp, #16]
	strb	wzr, [sp, #8]
	bl	memcpy
	ldrb	w4, [sp, #8]
	mov	x0, x22
	mov	x1, x23
	mov	x2, x21
	mov	x3, x20
	bl	bpf_trace_run4
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB182_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB182_2:
	bl	__stack_chk_fail
.Lfunc_end182:
	.size	__bpf_trace_f2fs_zip_start, .Lfunc_end182-__bpf_trace_f2fs_zip_start
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_zip_end
	.type	__bpf_trace_f2fs_zip_end,@function
__bpf_trace_f2fs_zip_end:               // @__bpf_trace_f2fs_zip_end
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x23, [sp, #48]          // 8-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	x21, x2
	mov	x22, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	mov	w19, w4
	mov	w20, w3
	bl	memcpy
	ldr	x23, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x21, [sp, #8]
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w20, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w20, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #4
	str	w19, [sp, #16]
	str	wzr, [sp, #8]
	bl	memcpy
	ldr	w4, [sp, #8]
	mov	x0, x22
	mov	x1, x23
	mov	x2, x21
	mov	x3, x20
	bl	bpf_trace_run4
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB183_2
// %bb.1:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldr	x23, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB183_2:
	bl	__stack_chk_fail
.Lfunc_end183:
	.size	__bpf_trace_f2fs_zip_end, .Lfunc_end183-__bpf_trace_f2fs_zip_end
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_iostat
	.type	__bpf_trace_f2fs_iostat,@function
__bpf_trace_f2fs_iostat:                // @__bpf_trace_f2fs_iostat
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x21, [sp, #48]          // 8-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	x19, x2
	mov	x20, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x19, [sp, #8]
	bl	memcpy
	ldr	x2, [sp, #8]
	mov	x0, x20
	mov	x1, x21
	bl	bpf_trace_run2
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB184_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldr	x21, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB184_2:
	bl	__stack_chk_fail
.Lfunc_end184:
	.size	__bpf_trace_f2fs_iostat, .Lfunc_end184-__bpf_trace_f2fs_iostat
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs_grading_ssr
	.type	__bpf_trace_f2fs_grading_ssr,@function
__bpf_trace_f2fs_grading_ssr:           // @__bpf_trace_f2fs_grading_ssr
// %bb.0:
	sub	sp, sp, #64             // =64
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #16]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]     // 16-byte Folded Spill
	mov	w20, w2
	mov	x21, x0
	str	x8, [sp, #8]
	stp	wzr, w1, [sp]
	mov	x0, sp
	add	x1, sp, #4              // =4
	mov	w2, #4
	add	x29, sp, #16            // =16
	mov	w19, w3
	bl	memcpy
	ldr	w22, [sp]
	mov	x0, sp
	add	x1, sp, #4              // =4
	mov	w2, #4
	stp	wzr, w20, [sp]
	bl	memcpy
	ldr	w20, [sp]
	mov	x0, sp
	add	x1, sp, #4              // =4
	mov	w2, #4
	stp	wzr, w19, [sp]
	bl	memcpy
	ldr	w3, [sp]
	mov	x0, x21
	mov	x1, x22
	mov	x2, x20
	bl	bpf_trace_run3
	adrp	x9, __stack_chk_guard
	ldr	x8, [sp, #8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB185_2
// %bb.1:
	ldp	x20, x19, [sp, #48]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]     // 16-byte Folded Reload
	add	sp, sp, #64             // =64
	ret
.LBB185_2:
	bl	__stack_chk_fail
.Lfunc_end185:
	.size	__bpf_trace_f2fs_grading_ssr, .Lfunc_end185-__bpf_trace_f2fs_grading_ssr
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs__dedup_inode
	.type	__bpf_trace_f2fs__dedup_inode,@function
__bpf_trace_f2fs__dedup_inode:          // @__bpf_trace_f2fs__dedup_inode
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x21, [sp, #48]          // 8-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	x19, x2
	mov	x20, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x19, [sp, #8]
	bl	memcpy
	ldr	x2, [sp, #8]
	mov	x0, x20
	mov	x1, x21
	bl	bpf_trace_run2
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB186_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldr	x21, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB186_2:
	bl	__stack_chk_fail
.Lfunc_end186:
	.size	__bpf_trace_f2fs__dedup_inode, .Lfunc_end186-__bpf_trace_f2fs__dedup_inode
                                        // -- End function
	.p2align	2               // -- Begin function __bpf_trace_f2fs__dedup_map
	.type	__bpf_trace_f2fs__dedup_map,@function
__bpf_trace_f2fs__dedup_map:            // @__bpf_trace_f2fs__dedup_map
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	add	x29, sp, #32            // =32
	str	x21, [sp, #48]          // 8-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	mov	x19, x2
	mov	x20, x0
	stur	x8, [x29, #-8]
	stp	xzr, x1, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	bl	memcpy
	ldr	x21, [sp, #8]
	add	x0, sp, #8              // =8
	add	x1, sp, #16             // =16
	mov	w2, #8
	stp	xzr, x19, [sp, #8]
	bl	memcpy
	ldr	x2, [sp, #8]
	mov	x0, x20
	mov	x1, x21
	bl	bpf_trace_run2
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB187_2
// %bb.1:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldr	x21, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB187_2:
	bl	__stack_chk_fail
.Lfunc_end187:
	.size	__bpf_trace_f2fs__dedup_map, .Lfunc_end187-__bpf_trace_f2fs__dedup_map
                                        // -- End function
	.globl	need_fsck_fn            // -- Begin function need_fsck_fn
	.p2align	2
	.type	need_fsck_fn,@function
need_fsck_fn:                           // @need_fsck_fn
.Lneed_fsck_fn$local:
// %bb.0:
	stp	x29, x30, [sp, #-48]!   // 16-byte Folded Spill
	sub	x9, sp, #336            // =336
	stp	x28, x21, [sp, #16]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	mov	x29, sp
	and	sp, x9, #0xffffffffffffff80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	str	x8, [sp, #328]
	ldur	x21, [x0, #-8]
	ldrb	w8, [x21, #3376]
	cbnz	w8, .LBB188_16
// %bb.1:
	ldr	x8, [x21, #16]
	ldr	x9, [x21]
	ldr	w10, [x21, #1188]
	mov	w3, #8
	ldr	w8, [x8, #76]
	ldr	x0, [x9, #248]
	ldr	w2, [x9, #24]
	add	w8, w8, w10
	sub	w1, w8, #1              // =1
	bl	__bread_gfp
	cbz	x0, .LBB188_18
// %bb.2:
	ldr	x8, [x0]
	mov	x19, x0
	str	x8, [sp]
	ldr	x8, [sp]
	tbnz	w8, #2, .LBB188_4
// %bb.3:
	//APP
	// atomic64_fetch_or_acquire
	prfm	pstl1strm, [x19]
1:	ldaxr	x8, [x19]
	orr	x9, x8, 4
	stxr	w10, x9, [x19]
	cbnz	w10, 1b
	
	//NO_APP
	tbz	w8, #2, .LBB188_5
.LBB188_4:
	mov	x0, x19
	bl	__lock_buffer
.LBB188_5:
	ldr	x20, [x19, #40]
	mov	w8, #17227
	movk	w8, #18003, lsl #16
	ldr	w9, [x20]
	cmp	w9, w8
	b.ne	.LBB188_7
// %bb.6:
	mov	x0, x19
	bl	unlock_buffer
	b	.LBB188_15
.LBB188_7:
	str	w8, [x20]
	stp	xzr, xzr, [sp, #240]
	stp	xzr, xzr, [sp, #224]
	stp	xzr, xzr, [sp, #208]
	stp	xzr, xzr, [sp, #192]
	stp	xzr, xzr, [sp, #176]
	stp	xzr, xzr, [sp, #160]
	stp	xzr, xzr, [sp, #144]
	stp	xzr, xzr, [sp, #128]
	stp	xzr, xzr, [sp, #112]
	stp	xzr, xzr, [sp, #96]
	stp	xzr, xzr, [sp, #80]
	stp	xzr, xzr, [sp, #64]
	stp	xzr, xzr, [sp, #48]
	stp	xzr, xzr, [sp, #32]
	stp	xzr, xzr, [sp, #16]
	stp	xzr, xzr, [sp]
	ldr	x8, [x21, #3208]
	ldr	w9, [x8]
	cmp	w9, #4                  // =4
	b.ne	.LBB188_20
// %bb.8:
	str	x8, [sp]
	mov	w8, #8208
	movk	w8, #62197, lsl #16
	mov	x0, sp
	mov	w2, #4092
	mov	x1, x20
	str	w8, [sp, #128]
	bl	crypto_shash_update
	cbnz	w0, .LBB188_21
// %bb.9:
	ldr	w8, [sp, #128]
	str	w8, [x20, #4092]
	ldr	x8, [x19]
	tbnz	w8, #0, .LBB188_11
// %bb.10:
	//APP
	// atomic64_or
	prfm	pstl1strm, [x19]
1:	ldxr	x8, [x19]
	orr	x8, x8, 1
	stxr	w9, x8, [x19]
	cbnz	w9, 1b
	//NO_APP
.LBB188_11:
	ldr	x8, [x19]
	tbnz	w8, #1, .LBB188_13
// %bb.12:
	//APP
	// atomic64_or
	prfm	pstl1strm, [x19]
1:	ldxr	x8, [x19]
	orr	x8, x8, 2
	stxr	w9, x8, [x19]
	cbnz	w9, 1b
	//NO_APP
.LBB188_13:
	mov	x0, x19
	bl	unlock_buffer
	mov	w1, #2048
	movk	w1, #12, lsl #16
	mov	x0, x19
	bl	__sync_dirty_buffer
	cbnz	w0, .LBB188_15
// %bb.14:
	mov	w8, #1
	strb	w8, [x21, #3376]
.LBB188_15:
	mov	x0, x19
	bl	__brelse
.LBB188_16:
	adrp	x9, __stack_chk_guard
	ldr	x8, [sp, #328]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB188_19
// %bb.17:
	mov	sp, x29
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldp	x28, x21, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48     // 16-byte Folded Reload
	ret
.LBB188_18:
	adrp	x0, .L.str.315
	add	x0, x0, :lo12:.L.str.315
	bl	printk
	b	.LBB188_16
.LBB188_19:
	bl	__stack_chk_fail
.LBB188_20:
	//APP
	.pushsection __bug_table,"aw"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,"aMS",@progbits,1; 14472: .string "fs/hw_f2fs/f2fs.h"; .popsection; .long 14472b - 14470b; .short 2937; .short 0; .popsection; 14471: brk 0x800
	//NO_APP
.LBB188_21:
	//APP
	.pushsection __bug_table,"aw"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,"aMS",@progbits,1; 14472: .string "fs/hw_f2fs/f2fs.h"; .popsection; .long 14472b - 14470b; .short 2943; .short 0; .popsection; 14471: brk 0x800
	//NO_APP
.Lfunc_end188:
	.size	need_fsck_fn, .Lfunc_end188-need_fsck_fn
                                        // -- End function
	.globl	f2fs_printk             // -- Begin function f2fs_printk
	.p2align	2
	.type	f2fs_printk,@function
f2fs_printk:                            // @f2fs_printk
.Lf2fs_printk$local:
// %bb.0:
	sub	sp, sp, #256            // =256
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #240]    // 16-byte Folded Spill
	add	x29, sp, #240           // =240
	sub	x10, x29, #104          // =104
	mov	x11, sp
	mov	x12, #-48
	add	x9, x29, #16            // =16
	movk	x12, #65408, lsl #32
	add	x10, x10, #48           // =48
	add	x11, x11, #128          // =128
	stp	x2, x3, [x29, #-104]
	stp	x4, x5, [x29, #-88]
	stp	x6, x7, [x29, #-72]
	stp	q1, q2, [sp, #16]
	stp	q3, q4, [sp, #48]
	str	q0, [sp]
	stp	q5, q6, [sp, #80]
	str	q7, [sp, #112]
	stur	x8, [x29, #-8]
	stp	xzr, xzr, [x29, #-24]
	stp	x9, x10, [x29, #-56]
	stp	x11, x12, [x29, #-40]
	ldrb	w8, [x1]
	cmp	w8, #1                  // =1
	b.ne	.LBB189_4
// %bb.1:
	ldrb	w8, [x1, #1]
	sub	w9, w8, #48             // =48
	cmp	w9, #8                  // =8
	b.hs	.LBB189_7
.LBB189_2:
	mov	w2, w8
	cmp	w9, #8                  // =8
	b.hs	.LBB189_9
.LBB189_3:
	add	x1, x1, #2              // =2
	b	.LBB189_5
.LBB189_4:
	mov	w2, wzr
.LBB189_5:
	sub	x8, x29, #56            // =56
	stp	x1, x8, [x29, #-24]
	ldr	x8, [x0]
	adrp	x0, .L.str.42
	add	x0, x0, :lo12:.L.str.42
	sub	x4, x29, #24            // =24
	add	x3, x8, #1056           // =1056
	mov	w1, #1
	bl	printk
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB189_10
// %bb.6:
	ldp	x29, x30, [sp, #240]    // 16-byte Folded Reload
	add	sp, sp, #256            // =256
	ret
.LBB189_7:
	cmp	w8, #99                 // =99
	b.eq	.LBB189_2
// %bb.8:
	mov	w2, wzr
	cmp	w9, #8                  // =8
	b.lo	.LBB189_3
.LBB189_9:
	cmp	w8, #99                 // =99
	b.eq	.LBB189_3
	b	.LBB189_5
.LBB189_10:
	bl	__stack_chk_fail
.Lfunc_end189:
	.size	f2fs_printk, .Lfunc_end189-f2fs_printk
                                        // -- End function
	.globl	f2fs_inode_dirtied      // -- Begin function f2fs_inode_dirtied
	.p2align	2
	.type	f2fs_inode_dirtied,@function
f2fs_inode_dirtied:                     // @f2fs_inode_dirtied
.Lf2fs_inode_dirtied$local:
// %bb.0:
	stp	x29, x30, [sp, #-64]!   // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]     // 16-byte Folded Spill
	ldr	x8, [x0, #40]
	mov	x21, x0
	mov	x29, sp
	mov	w22, w1
	ldr	x24, [x8, #1008]
	add	x19, x24, #1024         // =1024
	mov	x0, x19
	bl	_raw_spin_lock
	ldr	x8, [x21, #736]
	tbnz	w8, #1, .LBB190_2
// %bb.1:
	add	x8, x21, #736           // =736
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 2
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
	ldr	w8, [x24, #2284]
	mov	w20, wzr
	add	w8, w8, #1              // =1
	str	w8, [x24, #2284]
	tbnz	w22, #0, .LBB190_3
	b	.LBB190_8
.LBB190_2:
	mov	w20, #1
	tbz	w22, #0, .LBB190_8
.LBB190_3:
	ldr	x8, [x21, #896]
	add	x21, x21, #896          // =896
	cmp	x8, x21
	b.ne	.LBB190_8
// %bb.4:
	ldr	x22, [x24, #992]
	add	x23, x24, #984          // =984
	mov	x0, x21
	mov	x2, x23
	mov	x1, x22
	bl	__list_add_valid
	tbz	w0, #0, .LBB190_6
// %bb.5:
	str	x21, [x24, #992]
	stp	x23, x22, [x21]
	str	x21, [x22]
.LBB190_6:
	add	x8, x24, #1296          // =1296
	//APP
	// atomic_add
	prfm	pstl1strm, [x8]
1:	ldxr	w9, [x8]
	add	w9, w9, 1
	stxr	w10, w9, [x8]
	cbnz	w10, 1b

	//NO_APP
	cbz	x24, .LBB190_8
// %bb.7:
	add	x8, x24, #80            // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 1
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB190_8:
	mov	x0, x19
	bl	_raw_spin_unlock
	mov	w0, w20
	ldp	x20, x19, [sp, #48]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64     // 16-byte Folded Reload
	ret
.Lfunc_end190:
	.size	f2fs_inode_dirtied, .Lfunc_end190-f2fs_inode_dirtied
                                        // -- End function
	.globl	f2fs_inode_synced       // -- Begin function f2fs_inode_synced
	.p2align	2
	.type	f2fs_inode_synced,@function
f2fs_inode_synced:                      // @f2fs_inode_synced
.Lf2fs_inode_synced$local:
// %bb.0:
	stp	x29, x30, [sp, #-48]!   // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	ldr	x8, [x0, #40]
	mov	x20, x0
	mov	x29, sp
	ldr	x22, [x8, #1008]
	add	x19, x22, #1024         // =1024
	mov	x0, x19
	bl	_raw_spin_lock
	ldr	x8, [x20, #736]
	tbz	w8, #1, .LBB191_6
// %bb.1:
	ldr	x8, [x20, #896]
	add	x21, x20, #896          // =896
	cmp	x8, x21
	b.eq	.LBB191_5
// %bb.2:
	mov	x0, x21
	bl	__list_del_entry_valid
	tbz	w0, #0, .LBB191_4
// %bb.3:
	ldp	x9, x8, [x21]
	str	x8, [x9, #8]
	str	x9, [x8]
.LBB191_4:
	str	x21, [x21]
	str	x21, [x21, #8]
	add	x8, x22, #1296          // =1296
	mov	w9, #1
	//APP
	// atomic_sub
	prfm	pstl1strm, [x8]
1:	ldxr	w10, [x8]
	sub	w10, w10, w9
	stxr	w11, w10, [x8]
	cbnz	w11, 1b

	//NO_APP
.LBB191_5:
	add	x8, x20, #736           // =736
	mov	w9, #2
	//APP
	// atomic64_andnot
	prfm	pstl1strm, [x8]
1:	ldxr	x10, [x8]
	bic	x10, x10, x9
	stxr	w11, x10, [x8]
	cbnz	w11, 1b
	//NO_APP
	mov	w9, #4
	//APP
	// atomic64_andnot
	prfm	pstl1strm, [x8]
1:	ldxr	x10, [x8]
	bic	x10, x10, x9
	stxr	w11, x10, [x8]
	cbnz	w11, 1b
	//NO_APP
	ldr	x8, [x20, #40]
	ldr	x8, [x8, #1008]
	ldr	w9, [x8, #2284]
	sub	w9, w9, #1              // =1
	str	w9, [x8, #2284]
.LBB191_6:
	mov	x0, x19
	bl	_raw_spin_unlock
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48     // 16-byte Folded Reload
	ret
.Lfunc_end191:
	.size	f2fs_inode_synced, .Lfunc_end191-f2fs_inode_synced
                                        // -- End function
	.globl	f2fs_sync_fs            // -- Begin function f2fs_sync_fs
	.p2align	2
	.type	f2fs_sync_fs,@function
f2fs_sync_fs:                           // @f2fs_sync_fs
.Lf2fs_sync_fs$local:
// %bb.0:
	stp	x29, x30, [sp, #-64]!   // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]     // 16-byte Folded Spill
	ldr	x19, [x0, #1008]
	str	x23, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	ldr	x8, [x19, #224]
	ldrb	w8, [x8, #132]
	tbnz	w8, #3, .LBB192_12
// %bb.1:
	ldr	x8, [x19, #80]
	tbnz	w8, #8, .LBB192_12
// %bb.2:
	adrp	x8, __tracepoint_f2fs_sync_fs+8
	ldr	w8, [x8, :lo12:__tracepoint_f2fs_sync_fs+8]
	mov	w20, w1
	cmp	w8, #1                  // =1
	b.lt	.LBB192_9
// %bb.3:
	adrp	x9, cpu_number
	//APP
	.if 1 == 1
661:
	mrs x8, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x8, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	add	x9, x9, :lo12:cpu_number
	ldr	w8, [x8, x9]
	adrp	x10, __cpu_online_mask
	add	x10, x10, :lo12:__cpu_online_mask
	add	w9, w8, #63             // =63
	cmp	w8, #0                  // =0
	csel	w9, w9, w8, lt
	asr	w9, w9, #6
	ldr	x9, [x10, w9, sxtw #3]
	lsr	x8, x9, x8
	tbz	w8, #0, .LBB192_9
// %bb.4:
	//APP
	mrs x22, sp_el0
	//NO_APP
	ldr	w8, [x22, #24]
	add	w8, w8, #1              // =1
	str	w8, [x22, #24]
	//APP
	//NO_APP
	adrp	x8, __tracepoint_f2fs_sync_fs+32
	ldr	x23, [x8, :lo12:__tracepoint_f2fs_sync_fs+32]
	cbz	x23, .LBB192_7
// %bb.5:
	mov	x21, x0
.LBB192_6:                              // =>This Inner Loop Header: Depth=1
	ldp	x8, x0, [x23]
	mov	x1, x21
	mov	w2, w20
	blr	x8
	ldr	x8, [x23, #24]!
	cbnz	x8, .LBB192_6
.LBB192_7:
	//APP
	//NO_APP
	ldr	x8, [x22, #24]
	subs	x8, x8, #1              // =1
	str	w8, [x22, #24]
	b.eq	.LBB192_14
// %bb.8:
	ldr	x8, [x22, #24]
	cbz	x8, .LBB192_14
.LBB192_9:
	ldr	x8, [x19, #80]
	tbnz	w8, #3, .LBB192_15
.LBB192_10:
	cbz	w20, .LBB192_12
// %bb.11:
	mov	x0, x19
	bl	f2fs_issue_checkpoint
	b	.LBB192_13
.LBB192_12:
	mov	w0, wzr
.LBB192_13:
	ldp	x20, x19, [sp, #48]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]     // 16-byte Folded Reload
	ldr	x23, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64     // 16-byte Folded Reload
	ret
.LBB192_14:
	bl	preempt_schedule_notrace
	ldr	x8, [x19, #80]
	tbz	w8, #3, .LBB192_10
.LBB192_15:
	mov	w0, #-11
	b	.LBB192_13
.Lfunc_end192:
	.size	f2fs_sync_fs, .Lfunc_end192-f2fs_sync_fs
                                        // -- End function
	.globl	f2fs_enable_quota_files // -- Begin function f2fs_enable_quota_files
	.p2align	2
	.type	f2fs_enable_quota_files,@function
f2fs_enable_quota_files:                // @f2fs_enable_quota_files
.Lf2fs_enable_quota_files$local:
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x8, [x0, #16]
	mov	x19, x0
	mov	x29, sp
	ldrb	w8, [x8, #2180]
	tbz	w8, #7, .LBB193_4
// %bb.1:
	tbz	w1, #0, .LBB193_4
// %bb.2:
	ldr	x0, [x19]
	bl	f2fs_enable_quotas
	cbz	w0, .LBB193_20
// %bb.3:
	adrp	x1, .L.str.43
	mov	w2, w0
	add	x1, x1, :lo12:.L.str.43
	mov	x0, x19
	bl	f2fs_printk
	mov	w20, wzr
	b	.LBB193_21
.LBB193_4:
	ldr	x1, [x19, #1456]
	cbz	x1, .LBB193_8
// %bb.5:
	ldr	x8, [x19, #224]
	ldrb	w8, [x8, #133]
	tbnz	w8, #4, .LBB193_9
// %bb.6:
	ldr	x0, [x19]
	ldr	w2, [x19, #1480]
	mov	w3, wzr
	bl	dquot_quota_on_mount
	cbz	w0, .LBB193_10
// %bb.7:
	adrp	x1, .L.str.44
	mov	w2, w0
	add	x1, x1, :lo12:.L.str.44
	mov	x0, x19
	mov	w3, wzr
	bl	f2fs_printk
.LBB193_8:
	mov	w20, wzr
	ldr	x1, [x19, #1464]
	cbnz	x1, .LBB193_11
	b	.LBB193_15
.LBB193_9:
	adrp	x1, .L.str.316
	add	x1, x1, :lo12:.L.str.316
	mov	x0, x19
	bl	f2fs_printk
.LBB193_10:
	mov	w20, #1
	ldr	x1, [x19, #1464]
	cbz	x1, .LBB193_15
.LBB193_11:
	ldr	x8, [x19, #224]
	ldrb	w8, [x8, #133]
	tbnz	w8, #4, .LBB193_14
// %bb.12:
	ldr	x0, [x19]
	ldr	w2, [x19, #1480]
	mov	w3, #1
	bl	dquot_quota_on_mount
	cbz	w0, .LBB193_22
// %bb.13:
	adrp	x1, .L.str.44
	mov	w2, w0
	add	x1, x1, :lo12:.L.str.44
	mov	w3, #1
	mov	x0, x19
	bl	f2fs_printk
	ldr	x1, [x19, #1472]
	cbnz	x1, .LBB193_16
	b	.LBB193_21
.LBB193_14:
	adrp	x1, .L.str.316
	add	x1, x1, :lo12:.L.str.316
	mov	x0, x19
	bl	f2fs_printk
	mov	w20, #1
.LBB193_15:
	ldr	x1, [x19, #1472]
	cbz	x1, .LBB193_21
.LBB193_16:
	ldr	x8, [x19, #224]
	ldrb	w8, [x8, #133]
	tbnz	w8, #4, .LBB193_19
// %bb.17:
	ldr	x0, [x19]
	ldr	w2, [x19, #1480]
	mov	w3, #2
	bl	dquot_quota_on_mount
	cbz	w0, .LBB193_20
// %bb.18:
	adrp	x1, .L.str.44
	mov	w2, w0
	add	x1, x1, :lo12:.L.str.44
	mov	w3, #2
	mov	x0, x19
	bl	f2fs_printk
	b	.LBB193_21
.LBB193_19:
	adrp	x1, .L.str.316
	add	x1, x1, :lo12:.L.str.316
	mov	x0, x19
	bl	f2fs_printk
.LBB193_20:
	mov	w20, #1
.LBB193_21:
	mov	w0, w20
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.LBB193_22:
	mov	w20, #1
	ldr	x1, [x19, #1472]
	cbnz	x1, .LBB193_16
	b	.LBB193_21
.Lfunc_end193:
	.size	f2fs_enable_quota_files, .Lfunc_end193-f2fs_enable_quota_files
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_enable_quotas
	.type	f2fs_enable_quotas,@function
f2fs_enable_quotas:                     // @f2fs_enable_quotas
// %bb.0:
	stp	x29, x30, [sp, #-64]!   // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]     // 16-byte Folded Spill
	ldr	x20, [x0, #1008]
	mov	x29, sp
	ldr	x8, [x20, #224]
	ldrb	w8, [x8, #133]
	tbnz	w8, #4, .LBB194_6
// %bb.1:
	ldr	w8, [x0, #296]
	ldr	w24, [x20, #1424]
	mov	x19, x0
	orr	w8, w8, #0x200
	str	w8, [x0, #296]
	ldr	x8, [x20, #16]
	add	x9, x8, #2745           // =2745
	ldr	w22, [x9]
	cbz	w22, .LBB194_9
// %bb.2:
	ldrb	w8, [x8, #2180]
	tst	w24, #0x80000
	mov	w9, #9
	csinc	w23, w9, wzr, ne
	tbz	w8, #7, .LBB194_27
// %bb.3:
	mov	x0, x19
	mov	x1, x22
	bl	f2fs_iget
	mov	x21, x0
	cmn	x0, #4095               // =4095
	b.lo	.LBB194_7
// %bb.4:
	ldr	x0, [x19, #1008]
	adrp	x1, .L.str.319
	add	x1, x1, :lo12:.L.str.319
	mov	w2, wzr
	mov	x3, x22
	bl	f2fs_printk
	cbz	w21, .LBB194_8
.LBB194_5:
	adrp	x1, .L.str.318
	add	x1, x1, :lo12:.L.str.318
	mov	x0, x20
	mov	w2, wzr
	mov	w3, w21
	bl	f2fs_printk
	b	.LBB194_24
.LBB194_6:
	adrp	x1, .L.str.317
	add	x1, x1, :lo12:.L.str.317
	mov	x0, x20
	bl	f2fs_printk
	mov	w21, wzr
	b	.LBB194_26
.LBB194_7:
	ldr	w8, [x21, #12]
	mov	w2, #4
	mov	x0, x21
	mov	w1, wzr
	orr	w8, w8, #0x20
	mov	w3, w23
	str	w8, [x21, #12]
	bl	dquot_enable
	mov	w22, w0
	mov	x0, x21
	bl	iput
	mov	w21, w22
	cbnz	w21, .LBB194_5
.LBB194_8:
	ldr	x8, [x19, #1008]
	ldr	x8, [x8, #16]
.LBB194_9:
	add	x9, x8, #2749           // =2749
	ldr	w21, [x9]
	cbz	w21, .LBB194_16
// %bb.10:
	ldrb	w8, [x8, #2180]
	tst	w24, #0x100000
	mov	w9, #9
	csinc	w23, w9, wzr, ne
	tbz	w8, #7, .LBB194_27
// %bb.11:
	mov	x0, x19
	mov	x1, x21
	bl	f2fs_iget
	mov	x22, x0
	cmn	x0, #1, lsl #12         // =4096
	b.ls	.LBB194_14
// %bb.12:
	ldr	x0, [x19, #1008]
	adrp	x1, .L.str.319
	add	x1, x1, :lo12:.L.str.319
	mov	w2, #1
	mov	x3, x21
	bl	f2fs_printk
	mov	w21, w22
	cbz	w21, .LBB194_15
.LBB194_13:
	mov	w22, #1
	b	.LBB194_22
.LBB194_14:
	ldr	w8, [x22, #12]
	mov	w1, #1
	mov	w2, #4
	mov	x0, x22
	orr	w8, w8, #0x20
	mov	w3, w23
	str	w8, [x22, #12]
	bl	dquot_enable
	mov	w21, w0
	mov	x0, x22
	bl	iput
	cbnz	w21, .LBB194_13
.LBB194_15:
	ldr	x8, [x19, #1008]
	ldr	x8, [x8, #16]
.LBB194_16:
	add	x9, x8, #2753           // =2753
	ldr	w21, [x9]
	cbz	w21, .LBB194_26
// %bb.17:
	ldrb	w8, [x8, #2180]
	tst	w24, #0x200000
	mov	w9, #9
	csinc	w23, w9, wzr, ne
	tbz	w8, #7, .LBB194_27
// %bb.18:
	mov	x0, x19
	mov	x1, x21
	bl	f2fs_iget
	mov	x22, x0
	cmn	x0, #1, lsl #12         // =4096
	b.ls	.LBB194_20
// %bb.19:
	ldr	x0, [x19, #1008]
	adrp	x1, .L.str.319
	add	x1, x1, :lo12:.L.str.319
	mov	w2, #2
	mov	x3, x21
	bl	f2fs_printk
	mov	w21, w22
	cbnz	w21, .LBB194_21
	b	.LBB194_26
.LBB194_20:
	ldr	w8, [x22, #12]
	mov	w1, #2
	mov	w2, #4
	mov	x0, x22
	orr	w8, w8, #0x20
	mov	w3, w23
	str	w8, [x22, #12]
	bl	dquot_enable
	mov	w21, w0
	mov	x0, x22
	bl	iput
	cbz	w21, .LBB194_26
.LBB194_21:
	mov	w22, #2
.LBB194_22:
	adrp	x1, .L.str.318
	add	x1, x1, :lo12:.L.str.318
	mov	x0, x20
	mov	w2, w22
	mov	w3, w21
	bl	f2fs_printk
	add	w20, w22, #1            // =1
.LBB194_23:                             // =>This Inner Loop Header: Depth=1
	sub	w1, w20, #2             // =2
	mov	x0, x19
	bl	dquot_quota_off
	sub	w20, w20, #1            // =1
	cmp	w20, #1                 // =1
	b.gt	.LBB194_23
.LBB194_24:
	ldr	x8, [x19, #1008]
	cbz	x8, .LBB194_26
// %bb.25:
	add	x8, x8, #80             // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4096
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB194_26:
	mov	w0, w21
	ldp	x20, x19, [sp, #48]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64     // 16-byte Folded Reload
	ret
.LBB194_27:
	//APP
	.pushsection __bug_table,"aw"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,"aMS",@progbits,1; 14472: .string "fs/hw_f2fs/super.c"; .popsection; .long 14472b - 14470b; .short 2917; .short 0; .popsection; 14471: brk 0x800
	//NO_APP
.Lfunc_end194:
	.size	f2fs_enable_quotas, .Lfunc_end194-f2fs_enable_quotas
                                        // -- End function
	.globl	f2fs_quota_sync         // -- Begin function f2fs_quota_sync
	.p2align	2
	.type	f2fs_quota_sync,@function
f2fs_quota_sync:                        // @f2fs_quota_sync
.Lf2fs_quota_sync$local:
// %bb.0:
	stp	x29, x30, [sp, #-96]!   // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]     // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	ldr	x25, [x0, #1008]
	mov	x29, sp
	mov	x19, x0
	mov	w20, w1
	bl	dquot_writeback_dquots
	mov	w23, w0
	cbnz	w0, .LBB195_20
// %bb.1:
	adrp	x22, .L.str.45
	mov	x26, xzr
	mov	w21, w20
	add	x27, x19, #352          // =352
	mov	w28, #64
	add	x22, x22, :lo12:.L.str.45
	b	.LBB195_4
.LBB195_2:                              //   in Loop: Header=BB195_4 Depth=1
	mov	w23, wzr
.LBB195_3:                              //   in Loop: Header=BB195_4 Depth=1
	add	x26, x26, #1            // =1
	cmp	x26, #3                 // =3
	b.eq	.LBB195_19
.LBB195_4:                              // =>This Inner Loop Header: Depth=1
	cmn	w20, #1                 // =1
	b.eq	.LBB195_6
// %bb.5:                               //   in Loop: Header=BB195_4 Depth=1
	cmp	x21, x26
	b.ne	.LBB195_3
.LBB195_6:                              //   in Loop: Header=BB195_4 Depth=1
	ldr	w8, [x19, #296]
	lsr	w9, w8, w26
	tbz	w9, #0, .LBB195_3
// %bb.7:                               //   in Loop: Header=BB195_4 Depth=1
	lsl	w9, w28, w26
	and	w8, w8, w9
	cbnz	w8, .LBB195_3
// %bb.8:                               //   in Loop: Header=BB195_4 Depth=1
	ldr	x8, [x27, x26, lsl #3]
	ldr	x24, [x8, #48]
	mov	x0, x24
	bl	filemap_fdatawrite
	cbnz	w0, .LBB195_23
// %bb.9:                               //   in Loop: Header=BB195_4 Depth=1
	ldr	x8, [x25, #16]
	ldrb	w8, [x8, #2180]
	tbnz	w8, #7, .LBB195_2
// %bb.10:                              //   in Loop: Header=BB195_4 Depth=1
	ldr	x8, [x25, #1456]
	cbnz	x8, .LBB195_2
// %bb.11:                              //   in Loop: Header=BB195_4 Depth=1
	ldr	x8, [x25, #1464]
	cbnz	x8, .LBB195_2
// %bb.12:                              //   in Loop: Header=BB195_4 Depth=1
	ldr	x8, [x25, #1472]
	cbnz	x8, .LBB195_2
// %bb.13:                              //   in Loop: Header=BB195_4 Depth=1
	mov	x2, #9223372036854775807
	mov	x0, x24
	mov	x1, xzr
	bl	filemap_fdatawait_range
	mov	w23, w0
	cbz	w0, .LBB195_18
// %bb.14:                              //   in Loop: Header=BB195_4 Depth=1
	ldr	x8, [x19, #1008]
	cbz	x8, .LBB195_16
// %bb.15:                              //   in Loop: Header=BB195_4 Depth=1
	add	x8, x8, #80             // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4096
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
	ldr	x0, [x19, #1008]
	b	.LBB195_17
.LBB195_16:                             //   in Loop: Header=BB195_4 Depth=1
	mov	x0, xzr
.LBB195_17:                             //   in Loop: Header=BB195_4 Depth=1
	mov	x1, x22
	mov	w2, w21
	mov	w3, w23
	bl	f2fs_printk
.LBB195_18:                             //   in Loop: Header=BB195_4 Depth=1
	lsl	x24, x26, #3
	ldr	x8, [x27, x24]
	add	x0, x8, #160            // =160
	bl	down_write
	ldr	x8, [x27, x24]
	mov	x1, xzr
	add	x0, x8, #416            // =416
	bl	truncate_inode_pages
	ldr	x8, [x27, x24]
	add	x0, x8, #160            // =160
	bl	up_write
	b	.LBB195_3
.LBB195_19:
	cbz	w23, .LBB195_22
.LBB195_20:
	ldr	x8, [x19, #1008]
	cbz	x8, .LBB195_22
.LBB195_21:
	add	x8, x8, #80             // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4096
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB195_22:
	mov	w0, w23
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]     // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96     // 16-byte Folded Reload
	ret
.LBB195_23:
	mov	w23, w0
	ldr	x8, [x19, #1008]
	cbnz	x8, .LBB195_21
	b	.LBB195_22
.Lfunc_end195:
	.size	f2fs_quota_sync, .Lfunc_end195-f2fs_quota_sync
                                        // -- End function
	.globl	f2fs_quota_off_umount   // -- Begin function f2fs_quota_off_umount
	.p2align	2
	.type	f2fs_quota_off_umount,@function
f2fs_quota_off_umount:                  // @f2fs_quota_off_umount
.Lf2fs_quota_off_umount$local:
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	mov	w1, wzr
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	__f2fs_quota_off
	cbz	w0, .LBB196_3
// %bb.1:
	mov	w20, w0
	mov	x0, x19
	mov	w1, wzr
	bl	dquot_quota_off
	ldr	x8, [x19, #1008]
	adrp	x1, .L.str.46
	mov	w4, w0
	add	x1, x1, :lo12:.L.str.46
	mov	x0, x8
	mov	w2, wzr
	mov	w3, w20
	bl	f2fs_printk
	ldr	x8, [x19, #1008]
	cbz	x8, .LBB196_3
// %bb.2:
	add	x8, x8, #80             // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4096
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB196_3:
	mov	w1, #1
	mov	x0, x19
	bl	__f2fs_quota_off
	cbz	w0, .LBB196_6
// %bb.4:
	mov	w20, w0
	mov	w1, #1
	mov	x0, x19
	bl	dquot_quota_off
	ldr	x8, [x19, #1008]
	adrp	x1, .L.str.46
	mov	w4, w0
	add	x1, x1, :lo12:.L.str.46
	mov	w2, #1
	mov	x0, x8
	mov	w3, w20
	bl	f2fs_printk
	ldr	x8, [x19, #1008]
	cbz	x8, .LBB196_6
// %bb.5:
	add	x8, x8, #80             // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4096
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB196_6:
	mov	w1, #2
	mov	x0, x19
	bl	__f2fs_quota_off
	cbz	w0, .LBB196_9
// %bb.7:
	mov	w20, w0
	mov	w1, #2
	mov	x0, x19
	bl	dquot_quota_off
	ldr	x8, [x19, #1008]
	adrp	x1, .L.str.46
	mov	w4, w0
	add	x1, x1, :lo12:.L.str.46
	mov	w2, #2
	mov	x0, x8
	mov	w3, w20
	bl	f2fs_printk
	ldr	x8, [x19, #1008]
	cbz	x8, .LBB196_9
// %bb.8:
	add	x8, x8, #80             // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4096
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB196_9:
	mov	x0, x19
	bl	sync_filesystem
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end196:
	.size	f2fs_quota_off_umount, .Lfunc_end196-f2fs_quota_off_umount
                                        // -- End function
	.p2align	2               // -- Begin function __f2fs_quota_off
	.type	__f2fs_quota_off,@function
__f2fs_quota_off:                       // @__f2fs_quota_off
// %bb.0:
	stp	x29, x30, [sp, #-48]!   // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	add	x8, x0, w1, sxtw #3
	ldr	x19, [x8, #352]
	mov	w21, w1
	mov	x20, x0
	mov	x29, sp
	cbz	x19, .LBB197_8
// %bb.1:
	mov	x0, x19
	bl	igrab
	cbz	x0, .LBB197_8
// %bb.2:
	mov	x0, x20
	mov	w1, w21
	bl	f2fs_quota_sync
	mov	w22, w0
	cbnz	w0, .LBB197_7
// %bb.3:
	mov	x0, x20
	mov	w1, w21
	bl	dquot_quota_off
	mov	w22, w0
	cbnz	w0, .LBB197_7
// %bb.4:
	ldr	x8, [x20, #1008]
	ldr	x8, [x8, #16]
	ldrb	w8, [x8, #2180]
	tbnz	w8, #7, .LBB197_6
// %bb.5:
	add	x20, x19, #160          // =160
	mov	x0, x20
	bl	down_write
	ldr	x8, [x19, #704]
	mov	x9, #-145
	mov	x0, x19
	and	x8, x8, x9
	str	x8, [x19, #704]
	bl	f2fs_set_inode_flags
	mov	x0, x20
	bl	up_write
	mov	x0, x19
	mov	w1, wzr
	bl	f2fs_mark_inode_dirty_sync
.LBB197_6:
	mov	w22, wzr
.LBB197_7:
	mov	x0, x19
	bl	iput
	b	.LBB197_9
.LBB197_8:
	mov	x0, x20
	mov	w1, w21
	bl	dquot_quota_off
	mov	w22, w0
.LBB197_9:
	mov	w0, w22
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48     // 16-byte Folded Reload
	ret
.Lfunc_end197:
	.size	__f2fs_quota_off, .Lfunc_end197-__f2fs_quota_off
                                        // -- End function
	.globl	f2fs_flush_mbio         // -- Begin function f2fs_flush_mbio
	.p2align	2
	.type	f2fs_flush_mbio,@function
f2fs_flush_mbio:                        // @f2fs_flush_mbio
.Lf2fs_flush_mbio$local:
// %bb.0:
	stp	x29, x30, [sp, #-16]!   // 16-byte Folded Spill
	ldr	x0, [x0, #1008]
	mov	x29, sp
	bl	f2fs_flush_merged_writes
	ldp	x29, x30, [sp], #16     // 16-byte Folded Reload
	ret
.Lfunc_end198:
	.size	f2fs_flush_mbio, .Lfunc_end198-f2fs_flush_mbio
                                        // -- End function
	.globl	max_file_blocks         // -- Begin function max_file_blocks
	.p2align	2
	.type	max_file_blocks,@function
max_file_blocks:                        // @max_file_blocks
.Lmax_file_blocks$local:
// %bb.0:
	mov	x8, x0
	mov	w0, #22372
	movk	w0, #16129, lsl #16
	cbz	x8, .LBB199_3
// %bb.1:
	ldrh	w9, [x8]
	and	w9, w9, #0xf000
	cmp	w9, #8, lsl #12         // =32768
	b.ne	.LBB199_3
// %bb.2:
	ldr	x9, [x8, #736]
	tbnz	w9, #31, .LBB199_4
.LBB199_3:
	ret
.LBB199_4:
	ldr	x9, [x8, #736]
	tbz	w9, #31, .LBB199_3
// %bb.5:
	ldr	w8, [x8, #1292]
	mov	w9, #1018
	neg	w8, w8
	and	w8, w8, w9
	mov	w9, #55322
	movk	w9, #15, lsl #16
	mul	w0, w8, w9
	ret
.Lfunc_end199:
	.size	max_file_blocks, .Lfunc_end199-max_file_blocks
                                        // -- End function
	.globl	f2fs_sanity_check_ckpt  // -- Begin function f2fs_sanity_check_ckpt
	.p2align	2
	.type	f2fs_sanity_check_ckpt,@function
f2fs_sanity_check_ckpt:                 // @f2fs_sanity_check_ckpt
.Lf2fs_sanity_check_ckpt$local:
// %bb.0:
	stp	x29, x30, [sp, #-16]!   // 16-byte Folded Spill
	ldr	x10, [x0, #16]
	ldr	x9, [x0, #224]
	mov	x29, sp
	ldp	w8, w14, [x10, #48]
	ldp	w12, w11, [x10, #56]
	ldr	w13, [x9, #24]
	ldr	w15, [x10, #64]
	add	w14, w12, w14
	add	w14, w14, w11
	add	w14, w14, w13
	add	w14, w14, w15
	cmp	w14, w8
	b.hs	.LBB200_11
// %bb.1:
	ldr	w8, [x10, #2180]
	lsr	w15, w8, #14
	tbnz	w15, #0, .LBB200_5
// %bb.2:
	cbz	w13, .LBB200_40
// %bb.3:
	cmp	w14, #8                 // =8
	b.lo	.LBB200_40
// %bb.4:
	ldr	w13, [x9, #28]
	cbz	w13, .LBB200_40
.LBB200_5:
	ldr	w3, [x9, #8]
	cbz	w3, .LBB200_9
// %bb.6:
	ldr	w15, [x10, #68]
	ldr	w13, [x10, #20]
	ubfx	w16, w8, #14, #1
	add	w8, w15, w16
	lsl	w8, w8, w13
	cmp	w8, w3
	b.ls	.LBB200_9
// %bb.7:
	ldr	w2, [x9, #16]
	cmp	w2, w3
	b.ls	.LBB200_12
// %bb.8:
	adrp	x1, .L.str.49
	add	x1, x1, :lo12:.L.str.49
	bl	f2fs_printk
	b	.LBB200_11
.LBB200_9:
	adrp	x1, .L.str.48
	add	x1, x1, :lo12:.L.str.48
	mov	w2, w3
.LBB200_10:
	bl	f2fs_printk
.LBB200_11:
	mov	w0, #1
	ldp	x29, x30, [sp], #16     // 16-byte Folded Reload
	ret
.LBB200_12:
	ldr	w8, [x0, #1204]
	ldr	w2, [x9, #144]
	sub	w3, w8, #3              // =3
	cmp	w2, w3
	b.ls	.LBB200_14
// %bb.13:
	adrp	x1, .L.str.50
	add	x1, x1, :lo12:.L.str.50
	bl	f2fs_printk
	b	.LBB200_11
.LBB200_14:
	ldr	w4, [x9, #36]
	cmp	w4, w15
	b.hs	.LBB200_11
// %bb.15:
	ldr	w14, [x0, #1188]
	ldrh	w8, [x9, #68]
	cmp	w14, w8
	b.ls	.LBB200_11
// %bb.16:
	cbnz	w16, .LBB200_28
// %bb.17:
	ldr	w8, [x9, #40]
	cmp	w4, w8
	b.ne	.LBB200_19
// %bb.18:
	mov	w2, wzr
	mov	w3, #1
	b	.LBB200_21
.LBB200_19:
	ldr	w8, [x9, #44]
	cmp	w4, w8
	b.ne	.LBB200_22
// %bb.20:
	mov	w2, wzr
	mov	w3, #2
.LBB200_21:
	adrp	x1, .L.str.51
	add	x1, x1, :lo12:.L.str.51
	bl	f2fs_printk
	b	.LBB200_11
.LBB200_22:
	ldr	w8, [x9, #40]
	cmp	w8, w15
	b.hs	.LBB200_11
// %bb.23:
	ldrh	w17, [x9, #70]
	cmp	w14, w17
	b.ls	.LBB200_11
// %bb.24:
	ldr	w17, [x9, #44]
	cmp	w8, w17
	b.ne	.LBB200_26
// %bb.25:
	mov	w2, #1
	mov	w3, #2
	mov	w4, w8
	b	.LBB200_21
.LBB200_26:
	ldr	w8, [x9, #44]
	cmp	w8, w15
	b.hs	.LBB200_11
// %bb.27:
	ldrh	w8, [x9, #72]
	cmp	w14, w8
	b.ls	.LBB200_11
.LBB200_28:
	ldr	w8, [x9, #84]
	cmp	w8, w15
	b.hs	.LBB200_11
// %bb.29:
	ldrh	w17, [x9, #116]
	cmp	w14, w17
	b.ls	.LBB200_11
// %bb.30:
	cbnz	w16, .LBB200_65
// %bb.31:
	ldr	w16, [x9, #88]
	cmp	w8, w16
	b.ne	.LBB200_33
// %bb.32:
	mov	w2, wzr
	mov	w3, #1
	b	.LBB200_35
.LBB200_33:
	ldr	w16, [x9, #92]
	cmp	w8, w16
	b.ne	.LBB200_36
// %bb.34:
	mov	w2, wzr
	mov	w3, #2
.LBB200_35:
	adrp	x1, .L.str.52
	add	x1, x1, :lo12:.L.str.52
	mov	w4, w8
	bl	f2fs_printk
	b	.LBB200_11
.LBB200_36:
	ldr	w16, [x9, #88]
	cmp	w16, w15
	b.hs	.LBB200_11
// %bb.37:
	ldrh	w17, [x9, #118]
	cmp	w14, w17
	b.ls	.LBB200_11
// %bb.38:
	ldr	w17, [x9, #92]
	cmp	w16, w17
	b.ne	.LBB200_42
// %bb.39:
	mov	w2, #1
	mov	w3, #2
	mov	w8, w16
	b	.LBB200_35
.LBB200_40:
	adrp	x1, .L.str.47
	add	x1, x1, :lo12:.L.str.47
.LBB200_41:
	bl	f2fs_printk
	b	.LBB200_11
.LBB200_42:
	ldr	w17, [x9, #92]
	cmp	w17, w15
	b.hs	.LBB200_11
// %bb.43:
	ldrh	w15, [x9, #120]
	cmp	w14, w15
	b.ls	.LBB200_11
// %bb.44:
	cmp	w4, w8
	b.ne	.LBB200_46
// %bb.45:
	mov	w2, wzr
	mov	w3, wzr
	b	.LBB200_54
.LBB200_46:
	cmp	w4, w16
	b.ne	.LBB200_49
// %bb.47:
	mov	w2, wzr
.LBB200_48:
	mov	w3, #1
	b	.LBB200_54
.LBB200_49:
	cmp	w4, w17
	b.ne	.LBB200_51
// %bb.50:
	mov	w2, wzr
	mov	w3, #2
	b	.LBB200_54
.LBB200_51:
	ldr	w15, [x9, #40]
	cmp	w15, w8
	b.ne	.LBB200_55
// %bb.52:
	mov	w3, wzr
	mov	w2, #1
.LBB200_53:
	mov	w4, w8
.LBB200_54:
	adrp	x1, .L.str.53
	add	x1, x1, :lo12:.L.str.53
	bl	f2fs_printk
	b	.LBB200_11
.LBB200_55:
	cmp	w15, w16
	b.ne	.LBB200_57
// %bb.56:
	mov	w2, #1
	mov	w4, w16
	b	.LBB200_48
.LBB200_57:
	cmp	w15, w17
	b.ne	.LBB200_59
// %bb.58:
	mov	w3, #2
	mov	w2, #1
	mov	w4, w17
	b	.LBB200_54
.LBB200_59:
	ldr	w15, [x9, #44]
	cmp	w15, w8
	b.ne	.LBB200_61
// %bb.60:
	mov	w3, wzr
	mov	w2, #2
	b	.LBB200_53
.LBB200_61:
	cmp	w15, w16
	b.ne	.LBB200_63
// %bb.62:
	mov	w3, #1
	mov	w2, #2
	mov	w4, w16
	b	.LBB200_54
.LBB200_63:
	cmp	w15, w17
	b.ne	.LBB200_65
// %bb.64:
	mov	w2, #2
	mov	w4, w17
	mov	w3, #2
	b	.LBB200_54
.LBB200_65:
	ldp	w2, w3, [x9, #156]
	lsr	w8, w12, #1
	lsl	w8, w8, w13
	cmp	w2, w8, lsr #3
	b.ne	.LBB200_73
// %bb.66:
	lsr	w8, w11, #1
	lsl	w8, w8, w13
	cmp	w3, w8, lsr #3
	b.ne	.LBB200_73
// %bb.67:
	ldr	w2, [x9, #140]
	sub	w8, w14, #7             // =7
	cmp	w2, w8
	b.hi	.LBB200_74
// %bb.68:
	ldr	w8, [x10, #1664]
	add	w8, w8, #1              // =1
	cmp	w2, w8
	b.lo	.LBB200_74
// %bb.69:
	ldr	w8, [x9, #132]
	tbz	w8, #13, .LBB200_71
// %bb.70:
	ldr	w2, [x9, #164]
	cmp	w2, #192                // =192
	b.ne	.LBB200_75
.LBB200_71:
	tbnz	w8, #3, .LBB200_76
// %bb.72:
	mov	w0, wzr
	ldp	x29, x30, [sp], #16     // 16-byte Folded Reload
	ret
.LBB200_73:
	adrp	x1, .L.str.54
	add	x1, x1, :lo12:.L.str.54
	bl	f2fs_printk
	b	.LBB200_11
.LBB200_74:
	adrp	x1, .L.str.55
	add	x1, x1, :lo12:.L.str.55
	b	.LBB200_10
.LBB200_75:
	adrp	x1, .L.str.56
	add	x1, x1, :lo12:.L.str.56
	b	.LBB200_10
.LBB200_76:
	adrp	x1, .L.str.57
	add	x1, x1, :lo12:.L.str.57
	b	.LBB200_41
.Lfunc_end200:
	.size	f2fs_sanity_check_ckpt, .Lfunc_end200-f2fs_sanity_check_ckpt
                                        // -- End function
	.globl	f2fs_commit_super       // -- Begin function f2fs_commit_super
	.p2align	2
	.type	f2fs_commit_super,@function
f2fs_commit_super:                      // @f2fs_commit_super
.Lf2fs_commit_super$local:
// %bb.0:
	stp	x29, x30, [sp, #-64]!   // 16-byte Folded Spill
	sub	x9, sp, #320            // =320
	stp	x28, x23, [sp, #16]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]     // 16-byte Folded Spill
	mov	x29, sp
	and	sp, x9, #0xffffffffffffff80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	mov	x19, x0
	mov	w20, w1
	str	x8, [sp, #312]
	ldr	x8, [x0]
	tbz	w1, #0, .LBB201_2
// %bb.1:
	ldrb	w9, [x8, #80]
	tbnz	w9, #0, .LBB201_3
.LBB201_2:
	ldr	x0, [x8, #248]
	bl	bdev_read_only
	cbz	w0, .LBB201_5
.LBB201_3:
	cbz	x19, .LBB201_19
// %bb.4:
	add	x8, x19, #80            // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 16
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
	mov	w21, #-30
	b	.LBB201_21
.LBB201_5:
	tbnz	w20, #0, .LBB201_10
// %bb.6:
	ldr	x1, [x19, #16]
	ldrb	w8, [x1, #2181]
	tbz	w8, #3, .LBB201_10
// %bb.7:
	stp	xzr, xzr, [sp, #240]
	stp	xzr, xzr, [sp, #224]
	stp	xzr, xzr, [sp, #208]
	stp	xzr, xzr, [sp, #192]
	stp	xzr, xzr, [sp, #176]
	stp	xzr, xzr, [sp, #160]
	stp	xzr, xzr, [sp, #144]
	stp	xzr, xzr, [sp, #128]
	stp	xzr, xzr, [sp, #112]
	stp	xzr, xzr, [sp, #96]
	stp	xzr, xzr, [sp, #80]
	stp	xzr, xzr, [sp, #64]
	stp	xzr, xzr, [sp, #48]
	stp	xzr, xzr, [sp, #32]
	stp	xzr, xzr, [sp, #16]
	stp	xzr, xzr, [sp]
	ldr	x8, [x19, #3208]
	ldr	w9, [x8]
	cmp	w9, #4                  // =4
	b.ne	.LBB201_24
// %bb.8:
	str	x8, [sp]
	mov	w8, #8208
	movk	w8, #62197, lsl #16
	mov	x0, sp
	mov	w2, #3068
	str	w8, [sp, #128]
	bl	crypto_shash_update
	cbnz	w0, .LBB201_25
// %bb.9:
	ldr	w8, [sp, #128]
	ldr	x9, [x19, #16]
	str	w8, [x9, #3068]
.LBB201_10:
	ldr	x8, [x19]
	ldr	w9, [x19, #72]
	mov	w3, #8
	ldr	x0, [x8, #248]
	ldr	w2, [x8, #24]
	cmp	w9, #0                  // =0
	cset	w1, eq
	bl	__bread_gfp
	cbz	x0, .LBB201_20
// %bb.11:
	ldr	x1, [x19, #16]
	mov	x23, x0
	bl	__f2fs_commit_super
	add	x22, x19, #2296         // =2296
	mov	w21, w0
	mov	x0, x22
	bl	mutex_lock
	ldr	x8, [x19, #2328]
	cbz	x8, .LBB201_13
// %bb.12:
	ldr	x9, [x8, #368]
	add	x9, x9, #1              // =1
	str	x9, [x8, #368]
.LBB201_13:
	mov	x0, x22
	bl	mutex_unlock
	mov	x0, x23
	bl	__brelse
	cbnz	w21, .LBB201_21
// %bb.14:
	tbnz	w20, #0, .LBB201_21
// %bb.15:
	ldr	x8, [x19]
	ldrsw	x1, [x19, #72]
	mov	w3, #8
	ldr	x0, [x8, #248]
	ldr	w2, [x8, #24]
	bl	__bread_gfp
	cbz	x0, .LBB201_20
// %bb.16:
	ldr	x1, [x19, #16]
	mov	x20, x0
	bl	__f2fs_commit_super
	mov	w21, w0
	mov	x0, x22
	bl	mutex_lock
	ldr	x8, [x19, #2328]
	cbz	x8, .LBB201_18
// %bb.17:
	ldr	x9, [x8, #368]
	add	x9, x9, #1              // =1
	str	x9, [x8, #368]
.LBB201_18:
	mov	x0, x22
	bl	mutex_unlock
	mov	x0, x20
	bl	__brelse
	b	.LBB201_21
.LBB201_19:
	mov	w21, #-30
	b	.LBB201_21
.LBB201_20:
	mov	w21, #-5
.LBB201_21:
	adrp	x9, __stack_chk_guard
	ldr	x8, [sp, #312]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB201_23
// %bb.22:
	mov	w0, w21
	mov	sp, x29
	ldp	x20, x19, [sp, #48]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]     // 16-byte Folded Reload
	ldp	x28, x23, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64     // 16-byte Folded Reload
	ret
.LBB201_23:
	bl	__stack_chk_fail
.LBB201_24:
	//APP
	.pushsection __bug_table,"aw"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,"aMS",@progbits,1; 14472: .string "fs/hw_f2fs/f2fs.h"; .popsection; .long 14472b - 14470b; .short 2937; .short 0; .popsection; 14471: brk 0x800
	//NO_APP
.LBB201_25:
	//APP
	.pushsection __bug_table,"aw"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,"aMS",@progbits,1; 14472: .string "fs/hw_f2fs/f2fs.h"; .popsection; .long 14472b - 14470b; .short 2943; .short 0; .popsection; 14471: brk 0x800
	//NO_APP
.Lfunc_end201:
	.size	f2fs_commit_super, .Lfunc_end201-f2fs_commit_super
                                        // -- End function
	.p2align	2               // -- Begin function __f2fs_commit_super
	.type	__f2fs_commit_super,@function
__f2fs_commit_super:                    // @__f2fs_commit_super
// %bb.0:
	sub	sp, sp, #48             // =48
	stp	x29, x30, [sp, #16]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	ldr	x8, [x0]
	mov	x19, x0
	mov	x20, x1
	add	x29, sp, #16            // =16
	str	x8, [sp, #8]
	ldr	x8, [sp, #8]
	tbnz	w8, #2, .LBB202_2
// %bb.1:
	//APP
	// atomic64_fetch_or_acquire
	prfm	pstl1strm, [x19]
1:	ldaxr	x8, [x19]
	orr	x9, x8, 4
	stxr	w10, x9, [x19]
	cbnz	w10, 1b
	
	//NO_APP
	tbz	w8, #2, .LBB202_3
.LBB202_2:
	mov	x0, x19
	bl	__lock_buffer
.LBB202_3:
	cbz	x20, .LBB202_5
// %bb.4:
	ldr	x8, [x19, #40]
	mov	w2, #3072
	mov	x1, x20
	add	x0, x8, #1024           // =1024
	bl	memcpy
.LBB202_5:
	ldr	x8, [x19]
	tbnz	w8, #1, .LBB202_7
// %bb.6:
	//APP
	// atomic64_or
	prfm	pstl1strm, [x19]
1:	ldxr	x8, [x19]
	orr	x8, x8, 2
	stxr	w9, x8, [x19]
	cbnz	w9, 1b
	//NO_APP
.LBB202_7:
	mov	x0, x19
	bl	unlock_buffer
	mov	w1, #2048
	movk	w1, #12, lsl #16
	mov	x0, x19
	bl	__sync_dirty_buffer
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]     // 16-byte Folded Reload
	add	sp, sp, #48             // =48
	ret
.Lfunc_end202:
	.size	__f2fs_commit_super, .Lfunc_end202-__f2fs_commit_super
                                        // -- End function
	.globl	f2fs_get_metadata_context // -- Begin function f2fs_get_metadata_context
	.p2align	2
	.type	f2fs_get_metadata_context,@function
f2fs_get_metadata_context:              // @f2fs_get_metadata_context
.Lf2fs_get_metadata_context$local:
// %bb.0:
	stp	x29, x30, [sp, #-16]!   // 16-byte Folded Spill
	mov	x4, x2
	adrp	x2, .L.str.58
	mov	x5, x3
	mov	x3, x1
	add	x2, x2, :lo12:.L.str.58
	mov	w1, #11
	mov	x29, sp
	bl	f2fs_getxattr
	ldp	x29, x30, [sp], #16     // 16-byte Folded Reload
	ret
.Lfunc_end203:
	.size	f2fs_get_metadata_context, .Lfunc_end203-f2fs_get_metadata_context
                                        // -- End function
	.section	.exit.text,"ax",@progbits
	.p2align	2               // -- Begin function exit_f2fs_fs
	.type	exit_f2fs_fs,@function
exit_f2fs_fs:                           // @exit_f2fs_fs
// %bb.0:
	stp	x29, x30, [sp, #-16]!   // 16-byte Folded Spill
	adrp	x8, f2fs_cf_name_slab
	ldr	x0, [x8, :lo12:f2fs_cf_name_slab]
	mov	x29, sp
	bl	kmem_cache_destroy
	bl	f2fs_destroy_compress_cache
	bl	f2fs_destroy_compress_mempool
	bl	f2fs_destroy_bioset
	bl	f2fs_destroy_bio_entry_cache
	bl	f2fs_destroy_post_read_processing
	bl	f2fs_destroy_root_stats
	adrp	x0, f2fs_fs_type
	add	x0, x0, :lo12:f2fs_fs_type
	bl	unregister_filesystem
	adrp	x0, f2fs_shrinker_info
	add	x0, x0, :lo12:f2fs_shrinker_info
	bl	unregister_shrinker
	bl	f2fs_exit_sysfs
	bl	f2fs_destroy_garbage_collection_cache
	bl	f2fs_destroy_extent_cache
	bl	f2fs_destroy_recovery_cache
	bl	f2fs_destroy_checkpoint_caches
	bl	f2fs_destroy_segment_manager_caches
	bl	f2fs_destroy_node_manager_caches
	bl	rcu_barrier
	adrp	x8, f2fs_inode_cachep
	ldr	x0, [x8, :lo12:f2fs_inode_cachep]
	bl	kmem_cache_destroy
	bl	acm_f2fs_free_cache
	ldp	x29, x30, [sp], #16     // 16-byte Folded Reload
	ret
.Lfunc_end204:
	.size	exit_f2fs_fs, .Lfunc_end204-exit_f2fs_fs
                                        // -- End function
	.section	.init.text,"ax",@progbits
	.p2align	2               // -- Begin function init_f2fs_fs
	.type	init_f2fs_fs,@function
init_f2fs_fs:                           // @init_f2fs_fs
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x0, .L.str.633
	add	x0, x0, :lo12:.L.str.633
	mov	w1, #1344
	mov	w3, #67239936
	mov	w2, wzr
	mov	x4, xzr
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	mov	x29, sp
	bl	kmem_cache_create
	adrp	x20, f2fs_inode_cachep
	str	x0, [x20, :lo12:f2fs_inode_cachep]
	cbnz	x0, .LBB205_3
// %bb.1:
	mov	w19, #-12
.LBB205_2:
	mov	w0, w19
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.LBB205_3:
	bl	f2fs_create_node_manager_caches
	mov	w19, w0
	cbz	w0, .LBB205_5
.LBB205_4:
	bl	rcu_barrier
	ldr	x0, [x20, :lo12:f2fs_inode_cachep]
	bl	kmem_cache_destroy
	b	.LBB205_2
.LBB205_5:
	bl	f2fs_create_segment_manager_caches
	mov	w19, w0
	cbz	w0, .LBB205_7
.LBB205_6:
	bl	f2fs_destroy_node_manager_caches
	b	.LBB205_4
.LBB205_7:
	bl	f2fs_create_checkpoint_caches
	mov	w19, w0
	cbz	w0, .LBB205_9
.LBB205_8:
	bl	f2fs_destroy_segment_manager_caches
	b	.LBB205_6
.LBB205_9:
	bl	f2fs_create_recovery_cache
	mov	w19, w0
	cbz	w0, .LBB205_11
.LBB205_10:
	bl	f2fs_destroy_checkpoint_caches
	b	.LBB205_8
.LBB205_11:
	bl	f2fs_create_extent_cache
	mov	w19, w0
	cbz	w0, .LBB205_13
.LBB205_12:
	bl	f2fs_destroy_recovery_cache
	b	.LBB205_10
.LBB205_13:
	bl	f2fs_create_garbage_collection_cache
	mov	w19, w0
	cbz	w0, .LBB205_15
.LBB205_14:
	bl	f2fs_destroy_extent_cache
	b	.LBB205_12
.LBB205_15:
	bl	f2fs_init_sysfs
	mov	w19, w0
	cbnz	w0, .LBB205_20
// %bb.16:
	adrp	x0, f2fs_shrinker_info
	add	x0, x0, :lo12:f2fs_shrinker_info
	bl	register_shrinker
	mov	w19, w0
	cbnz	w0, .LBB205_19
// %bb.17:
	adrp	x0, f2fs_fs_type
	add	x0, x0, :lo12:f2fs_fs_type
	bl	register_filesystem
	mov	w19, w0
	cbz	w0, .LBB205_21
.LBB205_18:
	adrp	x0, f2fs_shrinker_info
	add	x0, x0, :lo12:f2fs_shrinker_info
	bl	unregister_shrinker
.LBB205_19:
	bl	f2fs_exit_sysfs
.LBB205_20:
	bl	f2fs_destroy_garbage_collection_cache
	b	.LBB205_14
.LBB205_21:
	bl	f2fs_create_root_stats
	bl	f2fs_init_post_read_processing
	mov	w19, w0
	cbnz	w0, .LBB205_24
// %bb.22:
	bl	f2fs_init_bio_entry_cache
	mov	w19, w0
	cbz	w0, .LBB205_25
.LBB205_23:
	bl	f2fs_destroy_post_read_processing
.LBB205_24:
	bl	f2fs_destroy_root_stats
	adrp	x0, f2fs_fs_type
	add	x0, x0, :lo12:f2fs_fs_type
	bl	unregister_filesystem
	b	.LBB205_18
.LBB205_25:
	bl	f2fs_init_bioset
	mov	w19, w0
	cbnz	w0, .LBB205_28
// %bb.26:
	bl	f2fs_init_compress_mempool
	mov	w19, w0
	cbz	w0, .LBB205_29
.LBB205_27:
	bl	f2fs_destroy_bioset
.LBB205_28:
	bl	f2fs_destroy_bio_entry_cache
	b	.LBB205_23
.LBB205_29:
	bl	f2fs_init_compress_cache
	mov	w19, w0
	cbz	w0, .LBB205_31
.LBB205_30:
	bl	f2fs_destroy_compress_mempool
	b	.LBB205_27
.LBB205_31:
	adrp	x0, .L.str.634
	add	x0, x0, :lo12:.L.str.634
	mov	w1, #255
	mov	w3, #131072
	mov	w2, wzr
	mov	x4, xzr
	bl	kmem_cache_create
	adrp	x8, f2fs_cf_name_slab
	str	x0, [x8, :lo12:f2fs_cf_name_slab]
	cbz	x0, .LBB205_35
// %bb.32:
	adrp	x19, f2fs_dclient
	ldr	x8, [x19, :lo12:f2fs_dclient]
	cbnz	x8, .LBB205_34
// %bb.33:
	adrp	x0, dsm_f2fs
	add	x0, x0, :lo12:dsm_f2fs
	bl	dsm_register_client
	str	x0, [x19, :lo12:f2fs_dclient]
.LBB205_34:
	bl	acm_f2fs_init_cache
	mov	w19, wzr
	b	.LBB205_2
.LBB205_35:
	bl	f2fs_destroy_compress_cache
	mov	w19, #-12
	b	.LBB205_30
.Lfunc_end205:
	.size	init_f2fs_fs, .Lfunc_end205-init_f2fs_fs
                                        // -- End function
	.p2align	2               // -- Begin function pw_init
	.type	pw_init,@function
pw_init:                                // @pw_init
// %bb.0:
	stp	x29, x30, [sp, #-16]!   // 16-byte Folded Spill
	adrp	x0, f2fssys_table
	add	x0, x0, :lo12:f2fssys_table
	mov	x29, sp
	bl	register_sysctl_table
	cmp	x0, #0                  // =0
	mov	w8, #-12
	csel	w0, w8, wzr, eq
	ldp	x29, x30, [sp], #16     // 16-byte Folded Reload
	ret
.Lfunc_end206:
	.size	pw_init, .Lfunc_end206-pw_init
                                        // -- End function
	.text
	.p2align	2               // -- Begin function trace_raw_output_f2fs__inode
	.type	trace_raw_output_f2fs__inode,@function
trace_raw_output_f2fs__inode:           // @trace_raw_output_f2fs__inode
// %bb.0:
	sub	sp, sp, #64             // =64
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	add	x29, sp, #32            // =32
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB207_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldp	x4, x5, [x20, #16]
	ldrh	w6, [x20, #32]
	ldr	x7, [x20, #40]
	ldr	w10, [x20, #48]
	ldr	x11, [x20, #56]
	ldrb	w12, [x20, #64]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.76
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.76
	mov	x0, x19
	str	w12, [sp, #16]
	str	x11, [sp, #8]
	str	w10, [sp]
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB207_2:
	ldp	x20, x19, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #64             // =64
	ret
.Lfunc_end207:
	.size	trace_raw_output_f2fs__inode, .Lfunc_end207-trace_raw_output_f2fs__inode
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_sync_file_exit
	.type	trace_raw_output_f2fs_sync_file_exit,@function
trace_raw_output_f2fs_sync_file_exit:   // @trace_raw_output_f2fs_sync_file_exit
// %bb.0:
	stp	x29, x30, [sp, #-64]!   // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]     // 16-byte Folded Spill
	str	x23, [sp, #16]          // 8-byte Folded Spill
	ldr	x23, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB208_2
// %bb.1:
	ldr	w9, [x23, #8]
	ldrsw	x1, [x23, #24]
	ldr	x20, [x23, #16]
	adrp	x2, trace_raw_output_f2fs_sync_file_exit.symbols
	mov	w8, #4240
	add	x0, x19, #88            // =88
	add	x2, x2, :lo12:trace_raw_output_f2fs_sync_file_exit.symbols
	add	x19, x19, x8
	lsr	w21, w9, #20
	and	w22, w9, #0xfffff
	bl	trace_print_symbols_seq
	ldp	w6, w7, [x23, #28]
	adrp	x1, .L.str.79
	mov	x5, x0
	add	x1, x1, :lo12:.L.str.79
	mov	x0, x19
	mov	w2, w21
	mov	w3, w22
	mov	x4, x20
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB208_2:
	ldp	x20, x19, [sp, #48]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]     // 16-byte Folded Reload
	ldr	x23, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64     // 16-byte Folded Reload
	ret
.Lfunc_end208:
	.size	trace_raw_output_f2fs_sync_file_exit, .Lfunc_end208-trace_raw_output_f2fs_sync_file_exit
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_sync_fs
	.type	trace_raw_output_f2fs_sync_fs,@function
trace_raw_output_f2fs_sync_fs:          // @trace_raw_output_f2fs_sync_fs
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB209_2
// %bb.1:
	ldp	w9, w10, [x20, #8]
	ldr	w5, [x20, #16]
	mov	w8, #4240
	adrp	x11, .L.str.91
	adrp	x12, .L.str.94
	add	x11, x11, :lo12:.L.str.91
	add	x12, x12, :lo12:.L.str.94
	add	x19, x19, x8
	cmp	w10, #0                 // =0
	adrp	x1, .L.str.93
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	csel	x4, x12, x11, eq
	add	x1, x1, :lo12:.L.str.93
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB209_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end209:
	.size	trace_raw_output_f2fs_sync_fs, .Lfunc_end209-trace_raw_output_f2fs_sync_fs
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs__inode_exit
	.type	trace_raw_output_f2fs__inode_exit,@function
trace_raw_output_f2fs__inode_exit:      // @trace_raw_output_f2fs__inode_exit
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB210_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldr	x4, [x20, #16]
	ldr	w5, [x20, #24]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.95
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.95
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB210_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end210:
	.size	trace_raw_output_f2fs__inode_exit, .Lfunc_end210-trace_raw_output_f2fs__inode_exit
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_unlink_enter
	.type	trace_raw_output_f2fs_unlink_enter,@function
trace_raw_output_f2fs_unlink_enter:     // @trace_raw_output_f2fs_unlink_enter
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB211_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldrh	w10, [x20, #40]
	ldp	x4, x5, [x20, #16]
	ldr	x6, [x20, #32]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.99
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x7, x20, x10
	add	x1, x1, :lo12:.L.str.99
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB211_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end211:
	.size	trace_raw_output_f2fs_unlink_enter, .Lfunc_end211-trace_raw_output_f2fs_unlink_enter
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_truncate_data_blocks_range
	.type	trace_raw_output_f2fs_truncate_data_blocks_range,@function
trace_raw_output_f2fs_truncate_data_blocks_range: // @trace_raw_output_f2fs_truncate_data_blocks_range
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB212_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldr	x4, [x20, #16]
	ldp	w5, w6, [x20, #24]
	ldr	w7, [x20, #32]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.104
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.104
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB212_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end212:
	.size	trace_raw_output_f2fs_truncate_data_blocks_range, .Lfunc_end212-trace_raw_output_f2fs_truncate_data_blocks_range
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs__truncate_op
	.type	trace_raw_output_f2fs__truncate_op,@function
trace_raw_output_f2fs__truncate_op:     // @trace_raw_output_f2fs__truncate_op
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB213_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldp	x4, x5, [x20, #16]
	ldp	x6, x7, [x20, #32]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.107
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.107
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB213_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end213:
	.size	trace_raw_output_f2fs__truncate_op, .Lfunc_end213-trace_raw_output_f2fs__truncate_op
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs__truncate_node
	.type	trace_raw_output_f2fs__truncate_node,@function
trace_raw_output_f2fs__truncate_node:   // @trace_raw_output_f2fs__truncate_node
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB214_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldr	x4, [x20, #16]
	ldp	w5, w6, [x20, #24]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.110
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.110
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB214_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end214:
	.size	trace_raw_output_f2fs__truncate_node, .Lfunc_end214-trace_raw_output_f2fs__truncate_node
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_truncate_partial_nodes
	.type	trace_raw_output_f2fs_truncate_partial_nodes,@function
trace_raw_output_f2fs_truncate_partial_nodes: // @trace_raw_output_f2fs_truncate_partial_nodes
// %bb.0:
	sub	sp, sp, #48             // =48
	stp	x29, x30, [sp, #16]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	add	x29, sp, #16            // =16
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB215_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldr	x4, [x20, #16]
	ldp	w5, w6, [x20, #24]
	ldp	w7, w10, [x20, #32]
	ldr	w11, [x20, #40]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.114
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.114
	mov	x0, x19
	str	w11, [sp, #8]
	str	w10, [sp]
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB215_2:
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]     // 16-byte Folded Reload
	add	sp, sp, #48             // =48
	ret
.Lfunc_end215:
	.size	trace_raw_output_f2fs_truncate_partial_nodes, .Lfunc_end215-trace_raw_output_f2fs_truncate_partial_nodes
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_file_write_iter
	.type	trace_raw_output_f2fs_file_write_iter,@function
trace_raw_output_f2fs_file_write_iter:  // @trace_raw_output_f2fs_file_write_iter
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB216_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldp	x4, x5, [x20, #16]
	ldr	x6, [x20, #32]
	ldr	w7, [x20, #40]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.118
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.118
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB216_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end216:
	.size	trace_raw_output_f2fs_file_write_iter, .Lfunc_end216-trace_raw_output_f2fs_file_write_iter
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_map_blocks
	.type	trace_raw_output_f2fs_map_blocks,@function
trace_raw_output_f2fs_map_blocks:       // @trace_raw_output_f2fs_map_blocks
// %bb.0:
	sub	sp, sp, #64             // =64
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	add	x29, sp, #32            // =32
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB217_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldr	x4, [x20, #16]
	ldp	w5, w6, [x20, #24]
	ldp	w7, w10, [x20, #32]
	ldr	w11, [x20, #40]
	ldrb	w12, [x20, #44]
	ldr	w13, [x20, #48]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.126
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.126
	mov	x0, x19
	str	w13, [sp, #24]
	str	w12, [sp, #16]
	str	w11, [sp, #8]
	str	w10, [sp]
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB217_2:
	ldp	x20, x19, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #64             // =64
	ret
.Lfunc_end217:
	.size	trace_raw_output_f2fs_map_blocks, .Lfunc_end217-trace_raw_output_f2fs_map_blocks
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_background_gc
	.type	trace_raw_output_f2fs_background_gc,@function
trace_raw_output_f2fs_background_gc:    // @trace_raw_output_f2fs_background_gc
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB218_2
// %bb.1:
	ldp	w9, w4, [x20, #8]
	ldp	w5, w6, [x20, #16]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.129
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.129
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB218_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end218:
	.size	trace_raw_output_f2fs_background_gc, .Lfunc_end218-trace_raw_output_f2fs_background_gc
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_gc_begin
	.type	trace_raw_output_f2fs_gc_begin,@function
trace_raw_output_f2fs_gc_begin:         // @trace_raw_output_f2fs_gc_begin
// %bb.0:
	sub	sp, sp, #80             // =80
	stp	x29, x30, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	add	x29, sp, #48            // =48
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB219_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldrb	w4, [x20, #12]
	ldrb	w5, [x20, #13]
	ldp	x6, x7, [x20, #16]
	ldr	x10, [x20, #32]
	ldp	w11, w12, [x20, #40]
	ldp	w13, w14, [x20, #48]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.140
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.140
	mov	x0, x19
	str	w14, [sp, #32]
	str	w13, [sp, #24]
	str	w12, [sp, #16]
	str	w11, [sp, #8]
	str	x10, [sp]
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB219_2:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.Lfunc_end219:
	.size	trace_raw_output_f2fs_gc_begin, .Lfunc_end219-trace_raw_output_f2fs_gc_begin
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_gc_end
	.type	trace_raw_output_f2fs_gc_end,@function
trace_raw_output_f2fs_gc_end:           // @trace_raw_output_f2fs_gc_end
// %bb.0:
	sub	sp, sp, #80             // =80
	stp	x29, x30, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	add	x29, sp, #48            // =48
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB220_2
// %bb.1:
	ldp	w9, w4, [x20, #8]
	ldp	w5, w6, [x20, #16]
	ldp	x7, x10, [x20, #24]
	ldr	x11, [x20, #40]
	ldp	w12, w13, [x20, #48]
	ldp	w14, w15, [x20, #56]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.143
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.143
	mov	x0, x19
	str	w15, [sp, #40]
	str	w14, [sp, #32]
	str	w13, [sp, #24]
	str	w12, [sp, #16]
	stp	x10, x11, [sp]
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB220_2:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.Lfunc_end220:
	.size	trace_raw_output_f2fs_gc_end, .Lfunc_end220-trace_raw_output_f2fs_gc_end
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_get_victim
	.type	trace_raw_output_f2fs_get_victim,@function
trace_raw_output_f2fs_get_victim:       // @trace_raw_output_f2fs_get_victim
// %bb.0:
	sub	sp, sp, #128            // =128
	stp	x29, x30, [sp, #48]     // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	ldr	x26, [x0, #8376]
	mov	x1, x2
	add	x29, sp, #48            // =48
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB221_2
// %bb.1:
	ldp	w9, w1, [x26, #8]
                                        // kill: def $w1 killed $w1 def $x1
	add	x20, x19, #88           // =88
	adrp	x2, trace_raw_output_f2fs_get_victim.symbols
	mov	w8, #4240
	sxtw	x1, w1
	add	x2, x2, :lo12:trace_raw_output_f2fs_get_victim.symbols
	mov	x0, x20
	add	x19, x19, x8
	lsr	w21, w9, #20
	and	w22, w9, #0xfffff
	bl	trace_print_symbols_seq
	ldrsw	x1, [x26, #16]
	adrp	x2, trace_raw_output_f2fs_get_victim.symbols.160
	mov	x23, x0
	add	x2, x2, :lo12:trace_raw_output_f2fs_get_victim.symbols.160
	mov	x0, x20
	bl	trace_print_symbols_seq
	ldrsw	x1, [x26, #20]
	adrp	x2, trace_raw_output_f2fs_get_victim.symbols.163
	mov	x24, x0
	add	x2, x2, :lo12:trace_raw_output_f2fs_get_victim.symbols.163
	mov	x0, x20
	bl	trace_print_symbols_seq
	ldrsw	x1, [x26, #24]
	adrp	x2, trace_raw_output_f2fs_get_victim.symbols.166
	mov	x25, x0
	add	x2, x2, :lo12:trace_raw_output_f2fs_get_victim.symbols.166
	mov	x0, x20
	bl	trace_print_symbols_seq
	ldp	w8, w9, [x26, #28]
	ldp	w10, w11, [x26, #36]
	ldp	w12, w13, [x26, #44]
	adrp	x1, .L.str.152
	mov	x7, x0
	add	x1, x1, :lo12:.L.str.152
	mov	x0, x19
	mov	w2, w21
	mov	w3, w22
	mov	x4, x23
	mov	x5, x24
	mov	x6, x25
	str	w13, [sp, #40]
	str	w12, [sp, #32]
	str	w11, [sp, #24]
	str	w10, [sp, #16]
	str	w9, [sp, #8]
	str	w8, [sp]
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB221_2:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.Lfunc_end221:
	.size	trace_raw_output_f2fs_get_victim, .Lfunc_end221-trace_raw_output_f2fs_get_victim
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_lookup_start
	.type	trace_raw_output_f2fs_lookup_start,@function
trace_raw_output_f2fs_lookup_start:     // @trace_raw_output_f2fs_lookup_start
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB222_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldrh	w10, [x20, #24]
	ldr	x4, [x20, #16]
	ldr	w6, [x20, #28]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.170
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x5, x20, x10
	add	x1, x1, :lo12:.L.str.170
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB222_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end222:
	.size	trace_raw_output_f2fs_lookup_start, .Lfunc_end222-trace_raw_output_f2fs_lookup_start
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_lookup_end
	.type	trace_raw_output_f2fs_lookup_end,@function
trace_raw_output_f2fs_lookup_end:       // @trace_raw_output_f2fs_lookup_end
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB223_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldrh	w10, [x20, #24]
	ldr	x4, [x20, #16]
	ldp	w6, w7, [x20, #28]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.172
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x5, x20, x10
	add	x1, x1, :lo12:.L.str.172
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB223_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end223:
	.size	trace_raw_output_f2fs_lookup_end, .Lfunc_end223-trace_raw_output_f2fs_lookup_end
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_readdir
	.type	trace_raw_output_f2fs_readdir,@function
trace_raw_output_f2fs_readdir:          // @trace_raw_output_f2fs_readdir
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB224_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldp	x4, x5, [x20, #16]
	ldr	x6, [x20, #32]
	ldr	w7, [x20, #40]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.175
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.175
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB224_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end224:
	.size	trace_raw_output_f2fs_readdir, .Lfunc_end224-trace_raw_output_f2fs_readdir
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_fallocate
	.type	trace_raw_output_f2fs_fallocate,@function
trace_raw_output_f2fs_fallocate:        // @trace_raw_output_f2fs_fallocate
// %bb.0:
	sub	sp, sp, #64             // =64
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	add	x29, sp, #32            // =32
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB225_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldr	x4, [x20, #16]
	ldr	w5, [x20, #24]
	ldp	x6, x7, [x20, #32]
	ldp	x10, x11, [x20, #48]
	ldr	w12, [x20, #64]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.177
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.177
	mov	x0, x19
	str	w12, [sp, #16]
	stp	x10, x11, [sp]
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB225_2:
	ldp	x20, x19, [sp, #48]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #64             // =64
	ret
.Lfunc_end225:
	.size	trace_raw_output_f2fs_fallocate, .Lfunc_end225-trace_raw_output_f2fs_fallocate
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_direct_IO_enter
	.type	trace_raw_output_f2fs_direct_IO_enter,@function
trace_raw_output_f2fs_direct_IO_enter:  // @trace_raw_output_f2fs_direct_IO_enter
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB226_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldp	x4, x5, [x20, #16]
	ldr	x6, [x20, #32]
	ldr	w7, [x20, #40]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.180
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.180
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB226_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end226:
	.size	trace_raw_output_f2fs_direct_IO_enter, .Lfunc_end226-trace_raw_output_f2fs_direct_IO_enter
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_direct_IO_exit
	.type	trace_raw_output_f2fs_direct_IO_exit,@function
trace_raw_output_f2fs_direct_IO_exit:   // @trace_raw_output_f2fs_direct_IO_exit
// %bb.0:
	sub	sp, sp, #48             // =48
	stp	x29, x30, [sp, #16]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	add	x29, sp, #16            // =16
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB227_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldp	x4, x5, [x20, #16]
	ldr	x6, [x20, #32]
	ldp	w7, w10, [x20, #40]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.181
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.181
	mov	x0, x19
	str	w10, [sp]
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB227_2:
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]     // 16-byte Folded Reload
	add	sp, sp, #48             // =48
	ret
.Lfunc_end227:
	.size	trace_raw_output_f2fs_direct_IO_exit, .Lfunc_end227-trace_raw_output_f2fs_direct_IO_exit
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_reserve_new_blocks
	.type	trace_raw_output_f2fs_reserve_new_blocks,@function
trace_raw_output_f2fs_reserve_new_blocks: // @trace_raw_output_f2fs_reserve_new_blocks
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB228_2
// %bb.1:
	ldp	w9, w4, [x20, #8]
	ldr	w5, [x20, #16]
	ldr	x6, [x20, #24]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.184
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.184
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB228_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end228:
	.size	trace_raw_output_f2fs_reserve_new_blocks, .Lfunc_end228-trace_raw_output_f2fs_reserve_new_blocks
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs__submit_page_bio
	.type	trace_raw_output_f2fs__submit_page_bio,@function
trace_raw_output_f2fs__submit_page_bio: // @trace_raw_output_f2fs__submit_page_bio
// %bb.0:
	sub	sp, sp, #144            // =144
	stp	x29, x30, [sp, #48]     // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]     // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]    // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]    // 16-byte Folded Spill
	ldr	x21, [x0, #8376]
	mov	x1, x2
	add	x29, sp, #48            // =48
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB229_2
// %bb.1:
	ldp	x10, x22, [x21, #16]
	ldr	w9, [x21, #8]
	ldr	w0, [x21, #40]
	mov	w8, #4240
	stur	x10, [x29, #-8]         // 8-byte Folded Spill
	ldp	w23, w24, [x21, #32]
	add	x20, x19, #88           // =88
	add	x19, x19, x8
	lsr	w25, w9, #20
	and	w26, w9, #0xfffff
	bl	blk_op_str
	ldr	w8, [x21, #44]
	mov	w9, #14336
	movk	w9, #28, lsl #16
	adrp	x1, .L.str.198
	adrp	x3, trace_raw_output_f2fs__submit_page_bio.__flags
	mov	x27, x0
	and	x2, x8, x9
	add	x1, x1, :lo12:.L.str.198
	add	x3, x3, :lo12:trace_raw_output_f2fs__submit_page_bio.__flags
	mov	x0, x20
	bl	trace_print_flags_seq
	ldrsw	x1, [x21, #48]
	adrp	x2, trace_raw_output_f2fs__submit_page_bio.symbols
	mov	x28, x0
	add	x2, x2, :lo12:trace_raw_output_f2fs__submit_page_bio.symbols
	mov	x0, x20
	bl	trace_print_symbols_seq
	ldrsw	x1, [x21, #52]
	adrp	x2, trace_raw_output_f2fs__submit_page_bio.symbols.199
	mov	x21, x0
	add	x2, x2, :lo12:trace_raw_output_f2fs__submit_page_bio.symbols.199
	mov	x0, x20
	bl	trace_print_symbols_seq
	ldur	x4, [x29, #-8]          // 8-byte Folded Reload
	adrp	x1, .L.str.191
	stp	x21, x0, [sp, #16]
	add	x1, x1, :lo12:.L.str.191
	mov	x0, x19
	mov	w2, w25
	mov	w3, w26
	mov	x5, x22
	mov	x6, x23
	mov	x7, x24
	stp	x27, x28, [sp]
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB229_2:
	ldp	x20, x19, [sp, #128]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]    // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]     // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]     // 16-byte Folded Reload
	add	sp, sp, #144            // =144
	ret
.Lfunc_end229:
	.size	trace_raw_output_f2fs__submit_page_bio, .Lfunc_end229-trace_raw_output_f2fs__submit_page_bio
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs__bio
	.type	trace_raw_output_f2fs__bio,@function
trace_raw_output_f2fs__bio:             // @trace_raw_output_f2fs__bio
// %bb.0:
	sub	sp, sp, #128            // =128
	stp	x29, x30, [sp, #32]     // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]    // 16-byte Folded Spill
	str	x27, [sp, #48]          // 8-byte Folded Spill
	ldr	x27, [x0, #8376]
	mov	x1, x2
	add	x29, sp, #32            // =32
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB230_2
// %bb.1:
	ldp	w10, w9, [x27, #8]
	ldr	w0, [x27, #16]
	mov	w8, #4240
	add	x20, x19, #88           // =88
	add	x19, x19, x8
	lsr	w21, w9, #20
	and	w22, w9, #0xfffff
	lsr	w23, w10, #20
	and	w24, w10, #0xfffff
	bl	blk_op_str
	ldr	w8, [x27, #20]
	mov	w9, #14336
	movk	w9, #28, lsl #16
	adrp	x1, .L.str.198
	adrp	x3, trace_raw_output_f2fs__bio.__flags
	mov	x25, x0
	and	x2, x8, x9
	add	x1, x1, :lo12:.L.str.198
	add	x3, x3, :lo12:trace_raw_output_f2fs__bio.__flags
	mov	x0, x20
	bl	trace_print_flags_seq
	ldrsw	x1, [x27, #24]
	adrp	x2, trace_raw_output_f2fs__bio.symbols
	mov	x26, x0
	add	x2, x2, :lo12:trace_raw_output_f2fs__bio.symbols
	mov	x0, x20
	bl	trace_print_symbols_seq
	ldr	x8, [x27, #32]
	ldr	w9, [x27, #40]
	adrp	x1, .L.str.205
	add	x1, x1, :lo12:.L.str.205
	stp	x0, x8, [sp]
	mov	x0, x19
	mov	w2, w21
	mov	w3, w22
	mov	w4, w23
	mov	w5, w24
	mov	x6, x25
	mov	x7, x26
	str	w9, [sp, #16]
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB230_2:
	ldp	x20, x19, [sp, #112]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]     // 16-byte Folded Reload
	ldr	x27, [sp, #48]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]     // 16-byte Folded Reload
	add	sp, sp, #128            // =128
	ret
.Lfunc_end230:
	.size	trace_raw_output_f2fs__bio, .Lfunc_end230-trace_raw_output_f2fs__bio
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_write_begin
	.type	trace_raw_output_f2fs_write_begin,@function
trace_raw_output_f2fs_write_begin:      // @trace_raw_output_f2fs_write_begin
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB231_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldp	x4, x5, [x20, #16]
	ldp	w6, w7, [x20, #32]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.206
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.206
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB231_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end231:
	.size	trace_raw_output_f2fs_write_begin, .Lfunc_end231-trace_raw_output_f2fs_write_begin
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_write_end
	.type	trace_raw_output_f2fs_write_end,@function
trace_raw_output_f2fs_write_end:        // @trace_raw_output_f2fs_write_end
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB232_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldp	x4, x5, [x20, #16]
	ldp	w6, w7, [x20, #32]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.208
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.208
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB232_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end232:
	.size	trace_raw_output_f2fs_write_end, .Lfunc_end232-trace_raw_output_f2fs_write_end
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs__page
	.type	trace_raw_output_f2fs__page,@function
trace_raw_output_f2fs__page:            // @trace_raw_output_f2fs__page
// %bb.0:
	sub	sp, sp, #96             // =96
	stp	x29, x30, [sp, #16]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	str	x25, [sp, #32]          // 8-byte Folded Spill
	ldr	x25, [x0, #8376]
	mov	x1, x2
	add	x29, sp, #16            // =16
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB233_2
// %bb.1:
	ldr	w9, [x25, #8]
	ldrsw	x1, [x25, #24]
	ldr	x21, [x25, #16]
	add	x20, x19, #88           // =88
	adrp	x2, trace_raw_output_f2fs__page.symbols
	mov	w8, #4240
	add	x2, x2, :lo12:trace_raw_output_f2fs__page.symbols
	mov	x0, x20
	add	x19, x19, x8
	lsr	w22, w9, #20
	and	w23, w9, #0xfffff
	bl	trace_print_symbols_seq
	ldrsw	x1, [x25, #28]
	adrp	x2, trace_raw_output_f2fs__page.symbols.212
	mov	x24, x0
	add	x2, x2, :lo12:trace_raw_output_f2fs__page.symbols.212
	mov	x0, x20
	bl	trace_print_symbols_seq
	ldr	x7, [x25, #32]
	ldp	w8, w9, [x25, #40]
	adrp	x1, .L.str.211
	mov	x6, x0
	add	x1, x1, :lo12:.L.str.211
	mov	x0, x19
	mov	w2, w22
	mov	w3, w23
	mov	x4, x21
	mov	x5, x24
	str	w9, [sp, #8]
	str	w8, [sp]
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB233_2:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldr	x25, [sp, #32]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #16]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.Lfunc_end233:
	.size	trace_raw_output_f2fs__page, .Lfunc_end233-trace_raw_output_f2fs__page
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_filemap_fault
	.type	trace_raw_output_f2fs_filemap_fault,@function
trace_raw_output_f2fs_filemap_fault:    // @trace_raw_output_f2fs_filemap_fault
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB234_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldp	x4, x5, [x20, #16]
	ldr	x6, [x20, #32]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.215
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.215
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB234_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end234:
	.size	trace_raw_output_f2fs_filemap_fault, .Lfunc_end234-trace_raw_output_f2fs_filemap_fault
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_writepages
	.type	trace_raw_output_f2fs_writepages,@function
trace_raw_output_f2fs_writepages:       // @trace_raw_output_f2fs_writepages
// %bb.0:
	sub	sp, sp, #176            // =176
	stp	x29, x30, [sp, #96]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]    // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]    // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]    // 16-byte Folded Spill
	str	x25, [sp, #112]         // 8-byte Folded Spill
	ldr	x25, [x0, #8376]
	mov	x1, x2
	add	x29, sp, #96            // =96
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB235_2
// %bb.1:
	ldr	w9, [x25, #8]
	ldrsw	x1, [x25, #24]
	ldr	x21, [x25, #16]
	add	x20, x19, #88           // =88
	adrp	x2, trace_raw_output_f2fs_writepages.symbols
	mov	w8, #4240
	add	x2, x2, :lo12:trace_raw_output_f2fs_writepages.symbols
	mov	x0, x20
	add	x19, x19, x8
	lsr	w22, w9, #20
	and	w23, w9, #0xfffff
	bl	trace_print_symbols_seq
	ldrsw	x1, [x25, #28]
	adrp	x2, trace_raw_output_f2fs_writepages.symbols.231
	mov	x24, x0
	add	x2, x2, :lo12:trace_raw_output_f2fs_writepages.symbols.231
	mov	x0, x20
	bl	trace_print_symbols_seq
	ldrb	w1, [x25, #81]
	ldp	x7, x8, [x25, #32]
	ldp	x9, x10, [x25, #48]
	ldr	x11, [x25, #64]
	ldr	w12, [x25, #72]
	ldrb	w13, [x25, #76]
	ldrb	w14, [x25, #77]
	ldrb	w15, [x25, #78]
	ldrb	w16, [x25, #79]
	ldrb	w17, [x25, #80]
	str	w1, [sp, #80]
	adrp	x1, .L.str.230
	mov	x6, x0
	add	x1, x1, :lo12:.L.str.230
	mov	x0, x19
	mov	w2, w22
	mov	w3, w23
	mov	x4, x21
	mov	x5, x24
	str	w17, [sp, #72]
	str	w16, [sp, #64]
	str	w15, [sp, #56]
	str	w14, [sp, #48]
	str	w13, [sp, #40]
	str	w12, [sp, #32]
	stp	x10, x11, [sp, #16]
	stp	x8, x9, [sp]
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB235_2:
	ldp	x20, x19, [sp, #160]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]    // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]    // 16-byte Folded Reload
	ldr	x25, [sp, #112]         // 8-byte Folded Reload
	ldp	x29, x30, [sp, #96]     // 16-byte Folded Reload
	add	sp, sp, #176            // =176
	ret
.Lfunc_end235:
	.size	trace_raw_output_f2fs_writepages, .Lfunc_end235-trace_raw_output_f2fs_writepages
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_readpages
	.type	trace_raw_output_f2fs_readpages,@function
trace_raw_output_f2fs_readpages:        // @trace_raw_output_f2fs_readpages
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB236_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldp	x4, x5, [x20, #16]
	ldr	w6, [x20, #32]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.233
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.233
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB236_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end236:
	.size	trace_raw_output_f2fs_readpages, .Lfunc_end236-trace_raw_output_f2fs_readpages
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_write_checkpoint
	.type	trace_raw_output_f2fs_write_checkpoint,@function
trace_raw_output_f2fs_write_checkpoint: // @trace_raw_output_f2fs_write_checkpoint
// %bb.0:
	stp	x29, x30, [sp, #-48]!   // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	ldr	x22, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB237_2
// %bb.1:
	ldp	w9, w2, [x22, #8]
                                        // kill: def $w2 killed $w2 def $x2
	adrp	x1, .L.str.198
	adrp	x3, trace_raw_output_f2fs_write_checkpoint.__flags
	mov	w8, #4240
	sxtw	x2, w2
	add	x0, x19, #88            // =88
	add	x1, x1, :lo12:.L.str.198
	add	x3, x3, :lo12:trace_raw_output_f2fs_write_checkpoint.__flags
	add	x19, x19, x8
	lsr	w20, w9, #20
	and	w21, w9, #0xfffff
	bl	trace_print_flags_seq
	ldr	x5, [x22, #16]
	adrp	x1, .L.str.237
	mov	x4, x0
	add	x1, x1, :lo12:.L.str.237
	mov	x0, x19
	mov	w2, w20
	mov	w3, w21
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB237_2:
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48     // 16-byte Folded Reload
	ret
.Lfunc_end237:
	.size	trace_raw_output_f2fs_write_checkpoint, .Lfunc_end237-trace_raw_output_f2fs_write_checkpoint
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_discard
	.type	trace_raw_output_f2fs_discard,@function
trace_raw_output_f2fs_discard:          // @trace_raw_output_f2fs_discard
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB238_2
// %bb.1:
	ldp	w9, w4, [x20, #8]
	ldr	w5, [x20, #16]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.248
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.248
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB238_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end238:
	.size	trace_raw_output_f2fs_discard, .Lfunc_end238-trace_raw_output_f2fs_discard
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_issue_reset_zone
	.type	trace_raw_output_f2fs_issue_reset_zone,@function
trace_raw_output_f2fs_issue_reset_zone: // @trace_raw_output_f2fs_issue_reset_zone
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB239_2
// %bb.1:
	ldp	w8, w4, [x20, #8]
	mov	w9, #4240
	add	x19, x19, x9
	adrp	x1, .L.str.249
	lsr	w2, w8, #20
	and	w3, w8, #0xfffff
	add	x1, x1, :lo12:.L.str.249
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB239_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end239:
	.size	trace_raw_output_f2fs_issue_reset_zone, .Lfunc_end239-trace_raw_output_f2fs_issue_reset_zone
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_issue_flush
	.type	trace_raw_output_f2fs_issue_flush,@function
trace_raw_output_f2fs_issue_flush:      // @trace_raw_output_f2fs_issue_flush
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB240_2
// %bb.1:
	ldp	w9, w10, [x20, #8]
	mov	w8, #4240
	adrp	x11, .L.str.253
	adrp	x12, .L.str.254
	cmp	w10, #0                 // =0
	ldp	w10, w6, [x20, #16]
	add	x11, x11, :lo12:.L.str.253
	add	x12, x12, :lo12:.L.str.254
	adrp	x13, .L.str.255
	add	x19, x19, x8
	adrp	x8, .L.str.256
	add	x13, x13, :lo12:.L.str.255
	add	x8, x8, :lo12:.L.str.256
	csel	x4, x12, x11, eq
	cmp	w10, #0                 // =0
	adrp	x1, .L.str.252
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	csel	x5, x8, x13, eq
	add	x1, x1, :lo12:.L.str.252
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB240_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end240:
	.size	trace_raw_output_f2fs_issue_flush, .Lfunc_end240-trace_raw_output_f2fs_issue_flush
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_lookup_extent_tree_start
	.type	trace_raw_output_f2fs_lookup_extent_tree_start,@function
trace_raw_output_f2fs_lookup_extent_tree_start: // @trace_raw_output_f2fs_lookup_extent_tree_start
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB241_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldr	x4, [x20, #16]
	ldr	w5, [x20, #24]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.258
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.258
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB241_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end241:
	.size	trace_raw_output_f2fs_lookup_extent_tree_start, .Lfunc_end241-trace_raw_output_f2fs_lookup_extent_tree_start
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_lookup_extent_tree_end
	.type	trace_raw_output_f2fs_lookup_extent_tree_end,@function
trace_raw_output_f2fs_lookup_extent_tree_end: // @trace_raw_output_f2fs_lookup_extent_tree_end
// %bb.0:
	sub	sp, sp, #48             // =48
	stp	x29, x30, [sp, #16]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	add	x29, sp, #16            // =16
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB242_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldr	x4, [x20, #16]
	ldp	w5, w6, [x20, #24]
	ldp	w7, w10, [x20, #32]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.262
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.262
	mov	x0, x19
	str	w10, [sp]
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB242_2:
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]     // 16-byte Folded Reload
	add	sp, sp, #48             // =48
	ret
.Lfunc_end242:
	.size	trace_raw_output_f2fs_lookup_extent_tree_end, .Lfunc_end242-trace_raw_output_f2fs_lookup_extent_tree_end
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_update_extent_tree_range
	.type	trace_raw_output_f2fs_update_extent_tree_range,@function
trace_raw_output_f2fs_update_extent_tree_range: // @trace_raw_output_f2fs_update_extent_tree_range
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB243_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldr	x4, [x20, #16]
	ldp	w5, w6, [x20, #24]
	ldr	w7, [x20, #32]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.263
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.263
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB243_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end243:
	.size	trace_raw_output_f2fs_update_extent_tree_range, .Lfunc_end243-trace_raw_output_f2fs_update_extent_tree_range
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_shrink_extent_tree
	.type	trace_raw_output_f2fs_shrink_extent_tree,@function
trace_raw_output_f2fs_shrink_extent_tree: // @trace_raw_output_f2fs_shrink_extent_tree
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB244_2
// %bb.1:
	ldp	w9, w4, [x20, #8]
	ldr	w5, [x20, #16]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.266
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.266
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB244_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end244:
	.size	trace_raw_output_f2fs_shrink_extent_tree, .Lfunc_end244-trace_raw_output_f2fs_shrink_extent_tree
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_destroy_extent_tree
	.type	trace_raw_output_f2fs_destroy_extent_tree,@function
trace_raw_output_f2fs_destroy_extent_tree: // @trace_raw_output_f2fs_destroy_extent_tree
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB245_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldr	x4, [x20, #16]
	ldr	w5, [x20, #24]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.267
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.267
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB245_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end245:
	.size	trace_raw_output_f2fs_destroy_extent_tree, .Lfunc_end245-trace_raw_output_f2fs_destroy_extent_tree
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_sync_dirty_inodes
	.type	trace_raw_output_f2fs_sync_dirty_inodes,@function
trace_raw_output_f2fs_sync_dirty_inodes: // @trace_raw_output_f2fs_sync_dirty_inodes
// %bb.0:
	stp	x29, x30, [sp, #-48]!   // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	ldr	x22, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB246_2
// %bb.1:
	ldp	w9, w1, [x22, #8]
                                        // kill: def $w1 killed $w1 def $x1
	adrp	x2, trace_raw_output_f2fs_sync_dirty_inodes.symbols
	mov	w8, #4240
	sxtw	x1, w1
	add	x0, x19, #88            // =88
	add	x2, x2, :lo12:trace_raw_output_f2fs_sync_dirty_inodes.symbols
	add	x19, x19, x8
	lsr	w20, w9, #20
	and	w21, w9, #0xfffff
	bl	trace_print_symbols_seq
	ldr	x5, [x22, #16]
	adrp	x1, .L.str.269
	mov	x4, x0
	add	x1, x1, :lo12:.L.str.269
	mov	x0, x19
	mov	w2, w20
	mov	w3, w21
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB246_2:
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48     // 16-byte Folded Reload
	ret
.Lfunc_end246:
	.size	trace_raw_output_f2fs_sync_dirty_inodes, .Lfunc_end246-trace_raw_output_f2fs_sync_dirty_inodes
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_shutdown
	.type	trace_raw_output_f2fs_shutdown,@function
trace_raw_output_f2fs_shutdown:         // @trace_raw_output_f2fs_shutdown
// %bb.0:
	stp	x29, x30, [sp, #-48]!   // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	ldr	x22, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB247_2
// %bb.1:
	ldp	w9, w1, [x22, #8]
	adrp	x2, trace_raw_output_f2fs_shutdown.symbols
	mov	w8, #4240
	add	x0, x19, #88            // =88
	add	x2, x2, :lo12:trace_raw_output_f2fs_shutdown.symbols
	add	x19, x19, x8
	lsr	w20, w9, #20
	and	w21, w9, #0xfffff
	bl	trace_print_symbols_seq
	ldr	w5, [x22, #16]
	adrp	x1, .L.str.270
	mov	x4, x0
	add	x1, x1, :lo12:.L.str.270
	mov	x0, x19
	mov	w2, w20
	mov	w3, w21
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB247_2:
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48     // 16-byte Folded Reload
	ret
.Lfunc_end247:
	.size	trace_raw_output_f2fs_shutdown, .Lfunc_end247-trace_raw_output_f2fs_shutdown
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_zip_start
	.type	trace_raw_output_f2fs_zip_start,@function
trace_raw_output_f2fs_zip_start:        // @trace_raw_output_f2fs_zip_start
// %bb.0:
	stp	x29, x30, [sp, #-64]!   // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]     // 16-byte Folded Spill
	ldr	x23, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB248_2
// %bb.1:
	ldr	w9, [x23, #8]
	ldp	w22, w1, [x23, #32]
	ldp	x20, x21, [x23, #16]
	adrp	x2, trace_raw_output_f2fs_zip_start.symbols
	mov	w8, #4240
	add	x0, x19, #88            // =88
	add	x2, x2, :lo12:trace_raw_output_f2fs_zip_start.symbols
	add	x19, x19, x8
	lsr	w23, w9, #20
	and	w24, w9, #0xfffff
	bl	trace_print_symbols_seq
	adrp	x1, .L.str.278
	mov	x7, x0
	add	x1, x1, :lo12:.L.str.278
	mov	x0, x19
	mov	w2, w23
	mov	w3, w24
	mov	x4, x20
	mov	x5, x21
	mov	w6, w22
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB248_2:
	ldp	x20, x19, [sp, #48]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64     // 16-byte Folded Reload
	ret
.Lfunc_end248:
	.size	trace_raw_output_f2fs_zip_start, .Lfunc_end248-trace_raw_output_f2fs_zip_start
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_zip_end
	.type	trace_raw_output_f2fs_zip_end,@function
trace_raw_output_f2fs_zip_end:          // @trace_raw_output_f2fs_zip_end
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB249_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldp	x4, x5, [x20, #16]
	ldp	w6, w7, [x20, #32]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.283
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.283
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB249_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end249:
	.size	trace_raw_output_f2fs_zip_end, .Lfunc_end249-trace_raw_output_f2fs_zip_end
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_iostat
	.type	trace_raw_output_f2fs_iostat,@function
trace_raw_output_f2fs_iostat:           // @trace_raw_output_f2fs_iostat
// %bb.0:
	sub	sp, sp, #240            // =240
	stp	x29, x30, [sp, #144]    // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]    // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]    // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]    // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]    // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	str	x27, [sp, #160]         // 8-byte Folded Spill
	add	x29, sp, #144           // =144
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB250_2
// %bb.1:
	ldp	x0, x1, [x20, #112]
	ldr	w9, [x20, #8]
	ldp	x5, x6, [x20, #16]
	ldp	x4, x7, [x20, #32]
	ldp	x10, x11, [x20, #48]
	ldp	x12, x13, [x20, #64]
	ldp	x14, x15, [x20, #80]
	ldp	x16, x17, [x20, #96]
	ldp	x21, x22, [x20, #128]
	ldp	x23, x24, [x20, #144]
	ldp	x25, x26, [x20, #160]
	ldp	x20, x27, [x20, #176]
	mov	w8, #4240
	add	x19, x19, x8
	stp	x0, x1, [sp, #80]
	adrp	x1, .L.str.307
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.307
	mov	x0, x19
	stp	x26, x20, [sp, #128]
	stp	x24, x25, [sp, #112]
	stp	x22, x23, [sp, #96]
	stp	x17, x21, [sp, #64]
	stp	x15, x16, [sp, #48]
	stp	x13, x14, [sp, #32]
	stp	x12, x27, [sp, #16]
	stp	x10, x11, [sp]
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB250_2:
	ldp	x20, x19, [sp, #224]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #208]    // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]    // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]    // 16-byte Folded Reload
	ldr	x27, [sp, #160]         // 8-byte Folded Reload
	ldp	x29, x30, [sp, #144]    // 16-byte Folded Reload
	add	sp, sp, #240            // =240
	ret
.Lfunc_end250:
	.size	trace_raw_output_f2fs_iostat, .Lfunc_end250-trace_raw_output_f2fs_iostat
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs_grading_ssr
	.type	trace_raw_output_f2fs_grading_ssr,@function
trace_raw_output_f2fs_grading_ssr:      // @trace_raw_output_f2fs_grading_ssr
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB251_2
// %bb.1:
	ldp	w2, w3, [x20, #8]
	ldr	w4, [x20, #16]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.310
	add	x1, x1, :lo12:.L.str.310
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB251_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end251:
	.size	trace_raw_output_f2fs_grading_ssr, .Lfunc_end251-trace_raw_output_f2fs_grading_ssr
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs__dedup_inode
	.type	trace_raw_output_f2fs__dedup_inode,@function
trace_raw_output_f2fs__dedup_inode:     // @trace_raw_output_f2fs__dedup_inode
// %bb.0:
	sub	sp, sp, #48             // =48
	stp	x29, x30, [sp, #16]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	add	x29, sp, #16            // =16
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB252_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldp	x4, x5, [x20, #16]
	ldr	x6, [x20, #32]
	ldr	w7, [x20, #40]
	ldr	x10, [x20, #48]
	ldr	w11, [x20, #56]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.313
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.313
	mov	x0, x19
	str	w11, [sp, #8]
	str	x10, [sp]
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB252_2:
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]     // 16-byte Folded Reload
	add	sp, sp, #48             // =48
	ret
.Lfunc_end252:
	.size	trace_raw_output_f2fs__dedup_inode, .Lfunc_end252-trace_raw_output_f2fs__dedup_inode
                                        // -- End function
	.p2align	2               // -- Begin function trace_raw_output_f2fs__dedup_map
	.type	trace_raw_output_f2fs__dedup_map,@function
trace_raw_output_f2fs__dedup_map:       // @trace_raw_output_f2fs__dedup_map
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	ldr	x20, [x0, #8376]
	mov	x1, x2
	mov	x29, sp
	mov	x19, x0
	bl	trace_raw_output_prep
	cmp	w0, #1                  // =1
	b.ne	.LBB253_2
// %bb.1:
	ldr	w9, [x20, #8]
	ldp	x4, x5, [x20, #16]
	ldr	x6, [x20, #32]
	ldr	w7, [x20, #40]
	mov	w8, #4240
	add	x19, x19, x8
	adrp	x1, .L.str.314
	lsr	w2, w9, #20
	and	w3, w9, #0xfffff
	add	x1, x1, :lo12:.L.str.314
	mov	x0, x19
	bl	trace_seq_printf
	mov	x0, x19
	bl	trace_handle_return
.LBB253_2:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end253:
	.size	trace_raw_output_f2fs__dedup_map, .Lfunc_end253-trace_raw_output_f2fs__dedup_map
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_mount
	.type	f2fs_mount,@function
f2fs_mount:                             // @f2fs_mount
// %bb.0:
	stp	x29, x30, [sp, #-16]!   // 16-byte Folded Spill
	adrp	x4, f2fs_fill_super
	add	x4, x4, :lo12:f2fs_fill_super
	mov	x29, sp
	bl	mount_bdev
	ldp	x29, x30, [sp], #16     // 16-byte Folded Reload
	ret
.Lfunc_end254:
	.size	f2fs_mount, .Lfunc_end254-f2fs_mount
                                        // -- End function
	.p2align	2               // -- Begin function kill_f2fs_super
	.type	kill_f2fs_super,@function
kill_f2fs_super:                        // @kill_f2fs_super
// %bb.0:
	sub	sp, sp, #80             // =80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #48]     // 16-byte Folded Spill
	add	x29, sp, #48            // =48
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	ldr	x8, [x0, #104]
	mov	x19, x0
	cbz	x8, .LBB255_11
// %bb.1:
	ldr	x20, [x19, #1008]
	cbz	x20, .LBB255_3
// %bb.2:
	add	x8, x20, #80            // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 2
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB255_3:
	mov	x0, x20
	bl	f2fs_stop_gc_thread
	mov	x0, x20
	bl	f2fs_stop_discard_thread
	ldrb	w8, [x20, #1427]
	tbz	w8, #6, .LBB255_5
// %bb.4:
	mov	x0, x20
	bl	COMPRESS_MAPPING
	bl	truncate_inode_pages_final
.LBB255_5:
	ldr	x8, [x20, #80]
	tbnz	w8, #0, .LBB255_7
// %bb.6:
	ldr	x8, [x20, #224]
	ldrb	w8, [x8, #132]
	tbnz	w8, #0, .LBB255_8
.LBB255_7:
	adrp	x8, .L__const.kill_f2fs_super.cpc
	add	x8, x8, :lo12:.L__const.kill_f2fs_super.cpc
	ldp	x9, x10, [x8]
	ldp	x11, x8, [x8, #16]
	add	x1, sp, #8              // =8
	mov	x0, x20
	stp	x9, x10, [sp, #8]
	stp	x11, x8, [sp, #24]
	bl	f2fs_write_checkpoint
.LBB255_8:
	ldr	x8, [x20, #80]
	tbz	w8, #7, .LBB255_11
// %bb.9:
	ldr	x8, [x19, #80]
	tbz	w8, #0, .LBB255_11
// %bb.10:
	and	x8, x8, #0xfffffffffffffffe
	str	x8, [x19, #80]
.LBB255_11:
	mov	x0, x19
	bl	kill_block_super
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB255_13
// %bb.12:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]     // 16-byte Folded Reload
	add	sp, sp, #80             // =80
	ret
.LBB255_13:
	bl	__stack_chk_fail
.Lfunc_end255:
	.size	kill_f2fs_super, .Lfunc_end255-kill_f2fs_super
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_fill_super
	.type	f2fs_fill_super,@function
f2fs_fill_super:                        // @f2fs_fill_super
// %bb.0:
	stp	x29, x30, [sp, #-96]!   // 16-byte Folded Spill
	sub	x9, sp, #416            // =416
	stp	x28, x27, [sp, #16]     // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	mov	x29, sp
	and	sp, x9, #0xffffffffffffff80
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	str	x1, [sp, #96]           // 8-byte Folded Spill
	adrp	x27, kmalloc_caches+96
	mov	x21, x0
	str	x8, [sp, #408]
	ldr	x8, [x27, :lo12:kmalloc_caches+96]
	mov	w1, #3520
	mov	w2, #3464
	mov	x0, x8
	bl	kmem_cache_alloc_trace
	cbz	x0, .LBB256_303
// %bb.1:
	mov	x19, x0
	mov	w28, wzr
	add	x8, x21, #1088          // =1088
	adrp	x23, kmalloc_caches+80
	adrp	x26, jiffies
	mov	w22, #1
	str	wzr, [sp, #76]          // 4-byte Folded Spill
	str	x8, [sp, #80]           // 8-byte Folded Spill
.LBB256_2:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB256_9 Depth 2
                                        //     Child Loop BB256_177 Depth 2
                                        //     Child Loop BB256_258 Depth 2
                                        //     Child Loop BB256_234 Depth 2
	ldr	x0, [x23, :lo12:kmalloc_caches+80]
	mov	w1, #3520
	mov	w2, #560
	bl	kmem_cache_alloc_trace
	str	x0, [x19, #2328]
	cbz	x0, .LBB256_5
// %bb.3:                               //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x26, :lo12:jiffies]
	add	x24, x19, #2296         // =2296
	adrp	x1, .L.str.321
	adrp	x2, f2fs_fill_super.__key
	str	x8, [x0, #208]
	mov	x0, x24
	add	x1, x1, :lo12:.L.str.321
	add	x2, x2, :lo12:f2fs_fill_super.__key
	bl	__mutex_init
	adrp	x0, .L.str.322
	add	x0, x0, :lo12:.L.str.322
	mov	w1, wzr
	mov	w2, wzr
	str	x21, [x19]
	bl	crypto_alloc_shash
	cmn	x0, #4095               // =4095
	str	x0, [x19, #3208]
	b.lo	.LBB256_6
// %bb.4:                               //   in Loop: Header=BB256_2 Depth=1
	adrp	x1, .L.str.323
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.323
	bl	f2fs_printk
	ldr	w25, [x19, #3208]
	str	xzr, [x19, #3208]
	b	.LBB256_139
.LBB256_5:                              //   in Loop: Header=BB256_2 Depth=1
	mov	w25, #-12
	b	.LBB256_139
.LBB256_6:                              //   in Loop: Header=BB256_2 Depth=1
	mov	w1, #4096
	mov	x0, x21
	bl	sb_set_blocksize
	cbz	w0, .LBB256_159
// %bb.7:                               //   in Loop: Header=BB256_2 Depth=1
	ldr	x0, [x27, :lo12:kmalloc_caches+96]
	ldr	x23, [x19]
	mov	w1, #3520
	mov	w2, #3072
	bl	kmem_cache_alloc_trace
	cbz	x0, .LBB256_110
// %bb.8:                               //   in Loop: Header=BB256_2 Depth=1
	str	w28, [sp, #116]         // 4-byte Folded Spill
	mov	w28, wzr
	mov	x20, xzr
	mov	w8, #-1
	str	x0, [sp, #104]          // 8-byte Folded Spill
	str	xzr, [sp, #120]         // 8-byte Folded Spill
	str	w8, [sp, #88]           // 4-byte Folded Spill
.LBB256_9:                              //   Parent Loop BB256_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x0, [x23, #248]
	ldr	w2, [x23, #24]
	mov	w3, #8
	mov	x1, x20
	mov	x27, x20
	bl	__bread_gfp
	cbz	x0, .LBB256_16
// %bb.10:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	x25, [x0, #40]
	mov	w8, #8208
	movk	w8, #62197, lsl #16
	mov	x26, x0
	ldr	w3, [x25, #1024]
	cmp	w3, w8
	b.ne	.LBB256_17
// %bb.11:                              //   in Loop: Header=BB256_9 Depth=2
	ldrb	w8, [x25, #3205]
	tbnz	w8, #3, .LBB256_18
.LBB256_12:                             //   in Loop: Header=BB256_9 Depth=2
	ldr	w2, [x25, #1040]
	cmp	w2, #12                 // =12
	b.ne	.LBB256_23
// %bb.13:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	w2, [x25, #1044]
	cmp	w2, #9                  // =9
	b.ne	.LBB256_26
// %bb.14:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	w3, [x25, #1032]
	sub	w8, w3, #9              // =9
	cmp	w8, #4                  // =4
	b.lo	.LBB256_30
// %bb.15:                              //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.369
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.369
	mov	w2, w3
	b	.LBB256_27
.LBB256_16:                             //   in Loop: Header=BB256_9 Depth=2
	add	x20, x27, #1            // =1
	adrp	x1, .L.str.362
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.362
	mov	w2, w20
	bl	f2fs_printk
	mov	w25, #-5
	mov	w28, #1
	cbz	x27, .LBB256_9
	b	.LBB256_102
.LBB256_17:                             //   in Loop: Header=BB256_9 Depth=2
	mov	w2, #8208
	adrp	x1, .L.str.364
	movk	w2, #62197, lsl #16
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.364
	bl	f2fs_printk
	mov	w25, #-22
	b	.LBB256_29
.LBB256_18:                             //   in Loop: Header=BB256_9 Depth=2
	ldr	w2, [x25, #1056]
	cmp	w2, #3068               // =3068
	b.ne	.LBB256_25
// %bb.19:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	x8, [x19, #3208]
	ldr	w20, [x25, #4092]
	stp	xzr, xzr, [sp, #368]
	stp	xzr, xzr, [sp, #352]
	stp	xzr, xzr, [sp, #336]
	stp	xzr, xzr, [sp, #320]
	stp	xzr, xzr, [sp, #304]
	stp	xzr, xzr, [sp, #288]
	stp	xzr, xzr, [sp, #272]
	stp	xzr, xzr, [sp, #256]
	stp	xzr, xzr, [sp, #240]
	stp	xzr, xzr, [sp, #224]
	stp	xzr, xzr, [sp, #208]
	stp	xzr, xzr, [sp, #192]
	stp	xzr, xzr, [sp, #176]
	stp	xzr, xzr, [sp, #160]
	stp	xzr, xzr, [sp, #144]
	stp	xzr, xzr, [sp, #128]
	ldr	w9, [x8]
	cmp	w9, #4                  // =4
	b.ne	.LBB256_307
// %bb.20:                              //   in Loop: Header=BB256_9 Depth=2
	str	x8, [sp, #128]
	mov	w8, #8208
	add	x1, x25, #1024          // =1024
	movk	w8, #62197, lsl #16
	add	x0, sp, #128            // =128
	mov	w2, #3068
	str	w8, [sp, #256]
	bl	crypto_shash_update
	cbnz	w0, .LBB256_308
// %bb.21:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	w8, [sp, #256]
	cmp	w8, w20
	b.eq	.LBB256_12
// %bb.22:                              //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.366
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.366
	mov	w2, w20
	b	.LBB256_27
.LBB256_23:                             //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.367
	mov	w3, #12
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.367
.LBB256_24:                             //   in Loop: Header=BB256_9 Depth=2
	bl	f2fs_printk
	b	.LBB256_28
.LBB256_25:                             //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.365
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.365
	bl	f2fs_printk
	b	.LBB256_28
.LBB256_26:                             //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.368
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.368
.LBB256_27:                             //   in Loop: Header=BB256_9 Depth=2
	bl	f2fs_printk
.LBB256_28:                             //   in Loop: Header=BB256_9 Depth=2
	mov	w25, #-117
.LBB256_29:                             //   in Loop: Header=BB256_9 Depth=2
	add	x20, x27, #1            // =1
	adrp	x1, .L.str.363
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.363
	mov	w2, w20
	bl	f2fs_printk
	mov	x0, x26
	bl	__brelse
	mov	w28, #1
	cbz	x27, .LBB256_9
	b	.LBB256_102
.LBB256_30:                             //   in Loop: Header=BB256_9 Depth=2
	ldr	w2, [x25, #1036]
	add	w8, w2, w3
	cmp	w8, #12                 // =12
	b.ne	.LBB256_33
// %bb.31:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	w2, [x25, #1072]
	mov	w9, #8388600
	sub	w8, w2, #9              // =9
	cmp	w8, w9
	b.lo	.LBB256_34
// %bb.32:                              //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.371
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.371
                                        // kill: def $w2 killed $w2 killed $x2
	b	.LBB256_27
.LBB256_33:                             //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.370
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.370
	b	.LBB256_24
.LBB256_34:                             //   in Loop: Header=BB256_9 Depth=2
	ldr	w9, [x25, #1068]
	ldr	w8, [x25, #1092]
	ldr	w4, [x25, #1048]
	sub	w10, w9, #1             // =1
	cmp	w10, w8
	b.hs	.LBB256_40
// %bb.35:                              //   in Loop: Header=BB256_9 Depth=2
	cmp	w4, w2
	b.hi	.LBB256_40
// %bb.36:                              //   in Loop: Header=BB256_9 Depth=2
	cbz	w4, .LBB256_40
// %bb.37:                              //   in Loop: Header=BB256_9 Depth=2
	mul	w10, w9, w4
	cmp	w8, w10
	b.ne	.LBB256_43
// %bb.38:                              //   in Loop: Header=BB256_9 Depth=2
	udiv	w8, w2, w4
	cmp	w8, w9
	b.hs	.LBB256_44
// %bb.39:                              //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.374
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.374
                                        // kill: def $w2 killed $w2 killed $x2
	mov	w3, w4
	mov	w4, w9
	b	.LBB256_42
.LBB256_40:                             //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.372
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.372
                                        // kill: def $w2 killed $w2 killed $x2
.LBB256_41:                             //   in Loop: Header=BB256_9 Depth=2
	mov	w3, w9
.LBB256_42:                             //   in Loop: Header=BB256_9 Depth=2
	bl	f2fs_printk
	b	.LBB256_28
.LBB256_43:                             //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.373
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.373
	mov	w2, w8
	b	.LBB256_41
.LBB256_44:                             //   in Loop: Header=BB256_9 Depth=2
	add	x10, x25, #1060         // =1060
	ldr	x3, [x10]
	cmp	x2, x3, lsr #9
	b.ls	.LBB256_46
// %bb.45:                              //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.375
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.375
                                        // kill: def $w2 killed $w2 killed $x2
	bl	f2fs_printk
	b	.LBB256_28
.LBB256_46:                             //   in Loop: Header=BB256_9 Depth=2
	ldrb	w11, [x25, #3225]
	ldr	w8, [x25, #1052]
	cbz	w11, .LBB256_58
// %bb.47:                              //   in Loop: Header=BB256_9 Depth=2
	add	x11, x10, #2229         // =2229
	ldrb	w12, [x25, #3293]
	ldr	w3, [x11]
	cbz	w12, .LBB256_55
// %bb.48:                              //   in Loop: Header=BB256_9 Depth=2
	add	x11, x10, #2297         // =2297
	ldr	w11, [x11]
	ldrb	w12, [x25, #3361]
	add	w3, w11, w3
	cbz	w12, .LBB256_55
// %bb.49:                              //   in Loop: Header=BB256_9 Depth=2
	add	x11, x10, #2365         // =2365
	ldr	w11, [x11]
	ldrb	w12, [x25, #3429]
	add	w3, w11, w3
	cbz	w12, .LBB256_55
// %bb.50:                              //   in Loop: Header=BB256_9 Depth=2
	add	x11, x10, #2433         // =2433
	ldr	w11, [x11]
	ldrb	w12, [x25, #3497]
	add	w3, w11, w3
	cbz	w12, .LBB256_55
// %bb.51:                              //   in Loop: Header=BB256_9 Depth=2
	add	x11, x10, #2501         // =2501
	ldr	w11, [x11]
	ldrb	w12, [x25, #3565]
	add	w3, w11, w3
	cbz	w12, .LBB256_55
// %bb.52:                              //   in Loop: Header=BB256_9 Depth=2
	add	x11, x10, #2569         // =2569
	ldr	w11, [x11]
	ldrb	w12, [x25, #3633]
	add	w3, w11, w3
	cbz	w12, .LBB256_55
// %bb.53:                              //   in Loop: Header=BB256_9 Depth=2
	add	x11, x10, #2637         // =2637
	ldr	w11, [x11]
	ldrb	w12, [x25, #3701]
	add	w3, w11, w3
	cbz	w12, .LBB256_55
// %bb.54:                              //   in Loop: Header=BB256_9 Depth=2
	add	x10, x10, #2705         // =2705
	ldr	w10, [x10]
	add	w3, w10, w3
.LBB256_55:                             //   in Loop: Header=BB256_9 Depth=2
	cmp	w2, w3
	b.eq	.LBB256_61
// %bb.56:                              //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.376
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.376
.LBB256_57:                             //   in Loop: Header=BB256_9 Depth=2
                                        // kill: def $w2 killed $w2 killed $x2
	b	.LBB256_24
.LBB256_58:                             //   in Loop: Header=BB256_9 Depth=2
	ldrb	w10, [x25, #3204]
	tbz	w10, #1, .LBB256_61
// %bb.59:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	x10, [x19]
	ldr	x10, [x10, #248]
	ldr	x10, [x10, #128]
	ldr	x10, [x10, #1264]
	cbz	x10, .LBB256_70
// %bb.60:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	w10, [x10, #2980]
	sub	w10, w10, #1            // =1
	cmp	w10, #2                 // =2
	b.hs	.LBB256_70
.LBB256_61:                             //   in Loop: Header=BB256_9 Depth=2
	cbz	w8, .LBB256_68
// %bb.62:                              //   in Loop: Header=BB256_9 Depth=2
	cmp	w8, w9
	b.hi	.LBB256_68
// %bb.63:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	w2, [x25, #2172]
	ldrb	w3, [x25, #3781]
	cmp	w2, #64                 // =64
	b.hi	.LBB256_69
// %bb.64:                              //   in Loop: Header=BB256_9 Depth=2
	cmp	w3, #64                 // =64
	b.hi	.LBB256_69
// %bb.65:                              //   in Loop: Header=BB256_9 Depth=2
	add	w8, w2, w3
	cmp	w8, #65                 // =65
	b.hs	.LBB256_69
// %bb.66:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	w2, [x25, #2688]
	cmp	w2, #511                // =511
	b.lo	.LBB256_71
// %bb.67:                              //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.380
	mov	w3, #510
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.380
	b	.LBB256_24
.LBB256_68:                             //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.378
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.378
	mov	w2, w8
	mov	w3, w9
	b	.LBB256_24
.LBB256_69:                             //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.379
	mov	w4, #64
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.379
	b	.LBB256_42
.LBB256_70:                             //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.377
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.377
	bl	f2fs_printk
	b	.LBB256_28
.LBB256_71:                             //   in Loop: Header=BB256_9 Depth=2
	ldr	w2, [x25, #1124]
	ldr	w3, [x25, #1128]
	ldr	w4, [x25, #1120]
	cmp	w2, #1                  // =1
	b.ne	.LBB256_81
// %bb.72:                              //   in Loop: Header=BB256_9 Depth=2
	cmp	w3, #2                  // =2
	b.ne	.LBB256_81
// %bb.73:                              //   in Loop: Header=BB256_9 Depth=2
	cmp	w4, #3                  // =3
	b.ne	.LBB256_81
// %bb.74:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	x9, [x26, #40]
	ldr	w2, [x9, #1096]
	ldr	w3, [x9, #1100]
	cmp	w2, w3
	b.ne	.LBB256_82
// %bb.75:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	w10, [x9, #1044]
	ldr	w8, [x9, #1076]
	ldr	w3, [x9, #1104]
	lsl	w4, w8, w10
	add	w8, w4, w2
	cmp	w8, w3
	b.ne	.LBB256_83
// %bb.76:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	w11, [x9, #1080]
	ldr	w8, [x9, #1108]
	lsl	w4, w11, w10
	add	w11, w4, w3
	cmp	w11, w8
	b.ne	.LBB256_84
// %bb.77:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	w11, [x9, #1084]
	ldr	w3, [x9, #1112]
	lsl	w4, w11, w10
	add	w11, w4, w8
	cmp	w11, w3
	b.ne	.LBB256_85
// %bb.78:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	w8, [x9, #1088]
	ldr	w25, [x9, #1116]
	lsl	w4, w8, w10
	add	w8, w4, w3
	cmp	w8, w25
	b.ne	.LBB256_86
// %bb.79:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	w8, [x9, #1092]
	ldr	w11, [x9, #1072]
	lsl	w8, w8, w10
	lsl	w11, w11, w10
	str	w8, [sp, #64]           // 4-byte Folded Spill
	add	w8, w8, w25
	add	w11, w11, w2
	mov	x20, x11
	cmp	w8, w11
	b.ls	.LBB256_87
// %bb.80:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	w4, [sp, #64]           // 4-byte Folded Reload
	adrp	x1, .L.str.387
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.387
	mov	w2, w25
	mov	x3, x20
	bl	f2fs_printk
	b	.LBB256_28
.LBB256_81:                             //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.381
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.381
	b	.LBB256_42
.LBB256_82:                             //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.382
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.382
	b	.LBB256_57
.LBB256_83:                             //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.383
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.383
                                        // kill: def $w2 killed $w2 killed $x2
	b	.LBB256_42
.LBB256_84:                             //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.384
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.384
	mov	w2, w3
	mov	w3, w8
	b	.LBB256_42
.LBB256_85:                             //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.385
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.385
	mov	w2, w8
	b	.LBB256_42
.LBB256_86:                             //   in Loop: Header=BB256_9 Depth=2
	adrp	x1, .L.str.386
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.386
	mov	w2, w3
	mov	w3, w25
	b	.LBB256_42
.LBB256_87:                             //   in Loop: Header=BB256_9 Depth=2
	cmp	w8, w20
	b.hs	.LBB256_91
// %bb.88:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	x11, [x19]
	sub	x8, x8, x2
	lsr	x8, x8, x10
	str	w8, [x9, #1072]
	ldrb	w8, [x11, #80]
	tbnz	w8, #0, .LBB256_90
// %bb.89:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	x0, [x11, #248]
	bl	bdev_read_only
	cbz	w0, .LBB256_94
.LBB256_90:                             //   in Loop: Header=BB256_9 Depth=2
	add	x8, x19, #80            // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 16
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
	ldr	w5, [sp, #64]           // 4-byte Folded Reload
	adrp	x1, .L.str.391
	adrp	x2, .L.str.388
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.391
	add	x2, x2, :lo12:.L.str.388
	mov	w3, w25
	mov	x4, x20
	bl	f2fs_printk
.LBB256_91:                             //   in Loop: Header=BB256_9 Depth=2
	ldr	x8, [sp, #120]          // 8-byte Folded Reload
	cbnz	x8, .LBB256_93
// %bb.92:                              //   in Loop: Header=BB256_9 Depth=2
	ldr	x8, [x26, #40]
	ldr	x20, [sp, #104]         // 8-byte Folded Reload
	mov	w2, #3072
	add	x1, x8, #1024           // =1024
	mov	x0, x20
	bl	memcpy
	str	x20, [sp, #120]         // 8-byte Folded Spill
	mov	w8, w27
	str	w27, [sp, #88]          // 4-byte Folded Spill
.LBB256_93:                             //   in Loop: Header=BB256_9 Depth=2
	mov	x0, x26
	bl	__brelse
	mov	w25, wzr
	add	x20, x27, #1            // =1
	cbz	x27, .LBB256_9
	b	.LBB256_102
.LBB256_94:                             //   in Loop: Header=BB256_9 Depth=2
	ldr	x8, [x26]
	str	x8, [sp, #128]
	ldr	x8, [sp, #128]
	tbnz	w8, #2, .LBB256_96
// %bb.95:                              //   in Loop: Header=BB256_9 Depth=2
	//APP
	// atomic64_fetch_or_acquire
	prfm	pstl1strm, [x26]
1:	ldaxr	x8, [x26]
	orr	x9, x8, 4
	stxr	w10, x9, [x26]
	cbnz	w10, 1b
	
	//NO_APP
	tbz	w8, #2, .LBB256_97
.LBB256_96:                             //   in Loop: Header=BB256_9 Depth=2
	mov	x0, x26
	bl	__lock_buffer
.LBB256_97:                             //   in Loop: Header=BB256_9 Depth=2
	ldr	x8, [x26]
	tbnz	w8, #1, .LBB256_99
// %bb.98:                              //   in Loop: Header=BB256_9 Depth=2
	//APP
	// atomic64_or
	prfm	pstl1strm, [x26]
1:	ldxr	x8, [x26]
	orr	x8, x8, 2
	stxr	w9, x8, [x26]
	cbnz	w9, 1b
	//NO_APP
.LBB256_99:                             //   in Loop: Header=BB256_9 Depth=2
	mov	x0, x26
	bl	unlock_buffer
	mov	w1, #2048
	movk	w1, #12, lsl #16
	mov	x0, x26
	bl	__sync_dirty_buffer
	adrp	x8, .L.str.389
	adrp	x9, .L.str.390
	cmp	w0, #0                  // =0
	add	x8, x8, :lo12:.L.str.389
	add	x9, x9, :lo12:.L.str.390
	str	w0, [sp, #56]           // 4-byte Folded Spill
	csel	x8, x9, x8, eq
	mov	x0, x24
	str	x8, [sp, #48]           // 8-byte Folded Spill
	bl	mutex_lock
	ldr	x8, [x19, #2328]
	cbz	x8, .LBB256_101
// %bb.100:                             //   in Loop: Header=BB256_9 Depth=2
	ldr	x9, [x8, #368]
	add	x9, x9, #1              // =1
	str	x9, [x8, #368]
.LBB256_101:                            //   in Loop: Header=BB256_9 Depth=2
	mov	x0, x24
	bl	mutex_unlock
	ldr	x2, [sp, #48]           // 8-byte Folded Reload
	ldr	w5, [sp, #64]           // 4-byte Folded Reload
	adrp	x1, .L.str.391
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.391
	mov	w3, w25
	mov	x4, x20
	bl	f2fs_printk
	ldr	w8, [sp, #56]           // 4-byte Folded Reload
	cbnz	w8, .LBB256_28
	b	.LBB256_91
.LBB256_102:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x20, [sp, #120]         // 8-byte Folded Reload
	adrp	x23, kmalloc_caches+80
	cbz	x20, .LBB256_114
.LBB256_103:                            //   in Loop: Header=BB256_2 Depth=1
	str	x19, [x21, #1008]
	str	x20, [x19, #16]
	ldr	w8, [x20, #2180]
	adrp	x26, .L.str.336
	adrp	x27, .L.str.525
	add	x26, x26, :lo12:.L.str.336
	add	x27, x27, :lo12:.L.str.525
	tbz	w8, #5, .LBB256_107
// %bb.104:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x19, #3208]
	stp	xzr, xzr, [sp, #368]
	stp	xzr, xzr, [sp, #352]
	stp	xzr, xzr, [sp, #336]
	stp	xzr, xzr, [sp, #320]
	stp	xzr, xzr, [sp, #304]
	stp	xzr, xzr, [sp, #288]
	stp	xzr, xzr, [sp, #272]
	stp	xzr, xzr, [sp, #256]
	stp	xzr, xzr, [sp, #240]
	stp	xzr, xzr, [sp, #224]
	stp	xzr, xzr, [sp, #208]
	stp	xzr, xzr, [sp, #192]
	stp	xzr, xzr, [sp, #176]
	stp	xzr, xzr, [sp, #160]
	stp	xzr, xzr, [sp, #144]
	stp	xzr, xzr, [sp, #128]
	ldr	w9, [x8]
	cmp	w9, #4                  // =4
	b.ne	.LBB256_309
// %bb.105:                             //   in Loop: Header=BB256_2 Depth=1
	add	x1, x20, #108           // =108
	str	x8, [sp, #128]
	mov	w8, #-1
	add	x0, sp, #128            // =128
	mov	w2, #16
	str	w8, [sp, #256]
	bl	crypto_shash_update
	cbnz	w0, .LBB256_310
// %bb.106:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	w8, [sp, #256]
	ldr	x9, [x19, #16]
	str	w8, [x19, #3216]
	ldr	w8, [x9, #2180]
.LBB256_107:                            //   in Loop: Header=BB256_2 Depth=1
	adrp	x20, init_user_ns
	tst	w8, #0x4000
	mov	w8, #50
	mov	w9, #2
	mov	w10, #6
	add	x20, x20, :lo12:init_user_ns
	str	w8, [x19, #1452]
	add	x8, x19, #1484          // =1484
	csel	w9, w10, w9, eq
	mov	x0, x20
	mov	w1, wzr
	str	w9, [x19, #1448]
	str	xzr, [x8]
	str	wzr, [x19, #1492]
	strb	wzr, [x19, #1512]
	bl	make_kuid
	str	w0, [x19, #1440]
	mov	x0, x20
	mov	w1, wzr
	bl	make_kgid
	mov	w8, #769
	strh	w8, [x19, #1524]
	mov	w8, #1
	str	w8, [x19, #1532]
	ldr	w8, [x19, #1424]
	mov	w10, #56439
	ldr	x9, [x19, #16]
	movk	w10, #65023, lsl #16
	mov	w11, #9100
	and	w8, w8, w10
	movk	w11, #4096, lsl #16
	orr	w10, w8, w11
	str	w0, [x19, #1444]
	strb	wzr, [x19, #1528]
	str	wzr, [x19, #1508]
	str	wzr, [x19, #1520]
	str	w10, [x19, #1424]
	ldr	w9, [x9, #2180]
	ldr	x20, [sp, #96]          // 8-byte Folded Reload
	add	w10, w11, #48           // =48
	orr	w8, w8, w10
	ubfx	w9, w9, #1, #1
	mov	w1, #3264
	mov	x0, x20
	str	w9, [x19, #1504]
	str	w8, [x19, #1424]
	bl	kstrdup
	mov	x24, x0
	cbz	x20, .LBB256_111
// %bb.108:                             //   in Loop: Header=BB256_2 Depth=1
	cbnz	x24, .LBB256_111
// %bb.109:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	w28, [sp, #116]         // 4-byte Folded Reload
	ldr	x20, [sp, #120]         // 8-byte Folded Reload
	mov	w25, #-12
	adrp	x26, jiffies
	adrp	x27, kmalloc_caches+96
	b	.LBB256_138
.LBB256_110:                            //   in Loop: Header=BB256_2 Depth=1
	mov	w25, #-12
	adrp	x23, kmalloc_caches+80
	b	.LBB256_139
.LBB256_111:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x21
	mov	x1, x24
	mov	w2, wzr
	bl	parse_options
	cbz	w0, .LBB256_116
// %bb.112:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	w28, [sp, #116]         // 4-byte Folded Reload
	ldr	x20, [sp, #120]         // 8-byte Folded Reload
	mov	w25, w0
.LBB256_113:                            //   in Loop: Header=BB256_2 Depth=1
	adrp	x26, jiffies
	adrp	x27, kmalloc_caches+96
	b	.LBB256_137
.LBB256_114:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x0, [sp, #104]          // 8-byte Folded Reload
	bl	kfree
	cbz	w25, .LBB256_103
// %bb.115:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	w28, [sp, #116]         // 4-byte Folded Reload
	adrp	x26, jiffies
	adrp	x27, kmalloc_caches+96
	b	.LBB256_139
.LBB256_116:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x20, [sp, #120]         // 8-byte Folded Reload
	mov	w9, #-1
	ldr	w8, [x20, #16]
	str	w9, [x21, #1104]
	mov	w9, #22372
	movk	w9, #16129, lsl #16
	lsl	x8, x9, x8
	str	x8, [x21, #32]
	ldr	x8, [x19, #16]
	ldrb	w9, [x8, #2181]
	tbz	w9, #4, .LBB256_118
// %bb.117:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	x9, [x19]
	ldr	x9, [x9, #208]
	cbz	x9, .LBB256_144
.LBB256_118:                            //   in Loop: Header=BB256_2 Depth=1
	adrp	x8, f2fs_quota_operations
	add	x8, x8, :lo12:f2fs_quota_operations
	str	x8, [x21, #56]
	adrp	x8, f2fs_quotactl_ops
	add	x8, x8, :lo12:f2fs_quotactl_ops
	str	x8, [x21, #64]
	mov	w8, #7
	str	w8, [x21, #288]
	ldr	x8, [x19, #16]
	ldrb	w8, [x8, #2180]
	tbz	w8, #7, .LBB256_125
// %bb.119:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x19]
	ldr	x9, [x8, #1008]
	ldr	x9, [x9, #16]
	add	x10, x9, #2745          // =2745
	ldr	w10, [x10]
	cbz	w10, .LBB256_121
// %bb.120:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	w9, [x19, #1268]
	add	w9, w9, #1              // =1
	str	w9, [x19, #1268]
	ldr	x9, [x8, #1008]
	ldr	x9, [x9, #16]
.LBB256_121:                            //   in Loop: Header=BB256_2 Depth=1
	add	x10, x9, #2749          // =2749
	ldr	w10, [x10]
	cbz	w10, .LBB256_123
// %bb.122:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	w9, [x19, #1268]
	add	w9, w9, #1              // =1
	str	w9, [x19, #1268]
	ldr	x8, [x8, #1008]
	ldr	x9, [x8, #16]
.LBB256_123:                            //   in Loop: Header=BB256_2 Depth=1
	add	x8, x9, #2753           // =2753
	ldr	w8, [x8]
	cbz	w8, .LBB256_125
// %bb.124:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	w8, [x19, #1268]
	add	w8, w8, #1              // =1
	str	w8, [x19, #1268]
.LBB256_125:                            //   in Loop: Header=BB256_2 Depth=1
	adrp	x8, f2fs_sops
	add	x8, x8, :lo12:f2fs_sops
	str	x8, [x21, #48]
	adrp	x8, f2fs_verityops
	add	x8, x8, :lo12:f2fs_verityops
	str	x8, [x21, #200]
	adrp	x8, f2fs_cryptops
	add	x8, x8, :lo12:f2fs_cryptops
	str	x8, [x21, #184]
	adrp	x8, f2fs_xattr_handlers
	add	x8, x8, :lo12:f2fs_xattr_handlers
	str	x8, [x21, #176]
	adrp	x8, f2fs_export_ops
	add	x8, x8, :lo12:f2fs_export_ops
	str	x8, [x21, #72]
	mov	w8, #8208
	movk	w8, #62197, lsl #16
	str	x8, [x21, #96]
	mov	w8, #1
	str	w8, [x21, #1016]
	ldr	w8, [x19, #1424]
	ldr	x9, [x21, #80]
	ldr	x0, [sp, #80]           // 8-byte Folded Reload
	add	x1, x20, #108           // =108
	lsl	w8, w8, #11
	lsr	x8, x8, #16
	bfi	x9, x8, #16, #1
	mov	w2, #16
	str	x9, [x21, #80]
	bl	memcpy
	ldr	x8, [x21, #88]
	add	x25, x19, #1664         // =1664
	adrp	x1, .L.str.326
	adrp	x2, f2fs_fill_super.__key.325
	orr	x8, x8, #0x1
	str	x8, [x21, #88]
	ldr	w8, [sp, #88]           // 4-byte Folded Reload
	mov	x0, x25
	add	x1, x1, :lo12:.L.str.326
	add	x2, x2, :lo12:f2fs_fill_super.__key.325
	str	w8, [x19, #72]
	bl	__init_rwsem
	adrp	x1, .L.str.328
	adrp	x2, f2fs_fill_super.__key.327
	add	x0, x19, #88            // =88
	add	x1, x1, :lo12:.L.str.328
	add	x2, x2, :lo12:f2fs_fill_super.__key.327
	bl	__mutex_init
	adrp	x1, .L.str.330
	adrp	x2, f2fs_fill_super.__key.329
	add	x0, x19, #256           // =256
	add	x1, x1, :lo12:.L.str.330
	add	x2, x2, :lo12:f2fs_fill_super.__key.329
	bl	__init_rwsem
	adrp	x1, .L.str.332
	adrp	x2, f2fs_fill_super.__key.331
	add	x0, x19, #376           // =376
	add	x1, x1, :lo12:.L.str.332
	add	x2, x2, :lo12:f2fs_fill_super.__key.331
	bl	__init_rwsem
	adrp	x1, .L.str.334
	adrp	x2, f2fs_fill_super.__key.333
	add	x0, x19, #424           // =424
	add	x1, x1, :lo12:.L.str.334
	add	x2, x2, :lo12:f2fs_fill_super.__key.333
	bl	__init_rwsem
	add	x8, x19, #80            // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 8
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
	add	x8, x19, #2340          // =2340
	str	xzr, [x8]
	mov	w8, #3000
	mov	w0, #888
	mov	w1, #3264
	strb	wzr, [x19, #2704]
	str	w8, [x19, #2720]
	bl	f2fs_kmalloc
	str	x0, [x19, #144]
	cbz	x0, .LBB256_132
// %bb.126:                             //   in Loop: Header=BB256_2 Depth=1
	adrp	x20, f2fs_fill_super.__key.335
	add	x20, x20, :lo12:f2fs_fill_super.__key.335
	add	x0, x0, #160            // =160
	mov	x1, x26
	mov	x2, x20
	str	x25, [sp, #104]         // 8-byte Folded Spill
	bl	__init_rwsem
	ldr	x8, [x19, #144]
	adrp	x25, .L.str.338
	adrp	x27, f2fs_fill_super.__key.337
	add	x25, x25, :lo12:.L.str.338
	str	x19, [x8]
	ldr	x8, [x19, #144]
	add	x27, x27, :lo12:f2fs_fill_super.__key.337
	mov	x1, x25
	mov	x2, x27
	str	xzr, [x8, #8]
	ldr	x8, [x19, #144]
	str	wzr, [x8, #208]
	ldr	x8, [x19, #144]
	add	x9, x8, #216            // =216
	str	x9, [x8, #216]
	str	x9, [x8, #224]
	ldr	x8, [x19, #144]
	add	x9, x8, #232            // =232
	str	x9, [x8, #232]
	str	x9, [x8, #240]
	ldr	x8, [x19, #144]
	add	x0, x8, #248            // =248
	bl	__init_rwsem
	ldr	x8, [x19, #144]
	mov	x1, x26
	mov	x2, x20
	add	x0, x8, #456            // =456
	bl	__init_rwsem
	ldr	x8, [x19, #144]
	mov	x1, x25
	mov	x2, x27
	str	x19, [x8, #296]
	ldr	x8, [x19, #144]
	str	xzr, [x8, #304]
	ldr	x8, [x19, #144]
	str	wzr, [x8, #504]
	ldr	x8, [x19, #144]
	add	x9, x8, #512            // =512
	str	x9, [x8, #512]
	str	x9, [x8, #520]
	ldr	x8, [x19, #144]
	add	x9, x8, #528            // =528
	str	x9, [x8, #528]
	str	x9, [x8, #536]
	ldr	x8, [x19, #144]
	add	x0, x8, #544            // =544
	bl	__init_rwsem
	ldr	x8, [x19, #144]
	mov	x1, x26
	mov	x2, x20
	add	x0, x8, #752            // =752
	bl	__init_rwsem
	ldr	x8, [x19, #144]
	mov	x1, x25
	mov	x2, x27
	str	x19, [x8, #592]
	ldr	x8, [x19, #144]
	str	xzr, [x8, #600]
	ldr	x8, [x19, #144]
	str	wzr, [x8, #800]
	ldr	x8, [x19, #144]
	add	x9, x8, #808            // =808
	str	x9, [x8, #808]
	str	x9, [x8, #816]
	ldr	x8, [x19, #144]
	add	x9, x8, #824            // =824
	str	x9, [x8, #824]
	str	x9, [x8, #832]
	ldr	x8, [x19, #144]
	add	x0, x8, #840            // =840
	bl	__init_rwsem
	mov	w0, #888
	mov	w1, #3264
	bl	f2fs_kmalloc
	str	x0, [x19, #152]
	cbz	x0, .LBB256_130
// %bb.127:                             //   in Loop: Header=BB256_2 Depth=1
	add	x0, x0, #160            // =160
	mov	x1, x26
	mov	x2, x20
	bl	__init_rwsem
	ldr	x8, [x19, #152]
	mov	x1, x25
	mov	x2, x27
	str	x19, [x8]
	ldr	x8, [x19, #152]
	str	xzr, [x8, #8]
	ldr	x8, [x19, #152]
	str	wzr, [x8, #208]
	ldr	x8, [x19, #152]
	add	x9, x8, #216            // =216
	str	x9, [x8, #216]
	str	x9, [x8, #224]
	ldr	x8, [x19, #152]
	add	x9, x8, #232            // =232
	str	x9, [x8, #232]
	str	x9, [x8, #240]
	ldr	x8, [x19, #152]
	add	x0, x8, #248            // =248
	bl	__init_rwsem
	ldr	x8, [x19, #152]
	mov	x1, x26
	mov	x2, x20
	add	x0, x8, #456            // =456
	bl	__init_rwsem
	ldr	x8, [x19, #152]
	mov	x1, x25
	mov	x2, x27
	str	x19, [x8, #296]
	ldr	x8, [x19, #152]
	str	xzr, [x8, #304]
	ldr	x8, [x19, #152]
	str	wzr, [x8, #504]
	ldr	x8, [x19, #152]
	add	x9, x8, #512            // =512
	str	x9, [x8, #512]
	str	x9, [x8, #520]
	ldr	x8, [x19, #152]
	add	x9, x8, #528            // =528
	str	x9, [x8, #528]
	str	x9, [x8, #536]
	ldr	x8, [x19, #152]
	add	x0, x8, #544            // =544
	bl	__init_rwsem
	ldr	x8, [x19, #152]
	mov	x1, x26
	mov	x2, x20
	add	x0, x8, #752            // =752
	bl	__init_rwsem
	ldr	x8, [x19, #152]
	mov	x1, x25
	mov	x2, x27
	str	x19, [x8, #592]
	ldr	x8, [x19, #152]
	str	xzr, [x8, #600]
	ldr	x8, [x19, #152]
	str	wzr, [x8, #800]
	ldr	x8, [x19, #152]
	add	x9, x8, #808            // =808
	str	x9, [x8, #808]
	str	x9, [x8, #816]
	ldr	x8, [x19, #152]
	add	x9, x8, #824            // =824
	str	x9, [x8, #824]
	str	x9, [x8, #832]
	ldr	x8, [x19, #152]
	add	x0, x8, #840            // =840
	bl	__init_rwsem
	mov	w0, #296
	mov	w1, #3264
	bl	f2fs_kmalloc
	str	x0, [x19, #160]
	cbz	x0, .LBB256_130
// %bb.128:                             //   in Loop: Header=BB256_2 Depth=1
	add	x0, x0, #160            // =160
	mov	x1, x26
	mov	x2, x20
	bl	__init_rwsem
	ldr	x8, [x19, #160]
	mov	x1, x25
	mov	x2, x27
	str	x19, [x8]
	ldr	x8, [x19, #160]
	str	xzr, [x8, #8]
	ldr	x8, [x19, #160]
	str	wzr, [x8, #208]
	ldr	x8, [x19, #160]
	add	x9, x8, #216            // =216
	str	x9, [x8, #216]
	str	x9, [x8, #224]
	ldr	x8, [x19, #160]
	add	x9, x8, #232            // =232
	str	x9, [x8, #232]
	str	x9, [x8, #240]
	ldr	x8, [x19, #160]
	add	x0, x8, #248            // =248
	bl	__init_rwsem
	adrp	x1, .L.str.340
	adrp	x2, f2fs_fill_super.__key.339
	add	x0, x19, #304           // =304
	add	x1, x1, :lo12:.L.str.340
	add	x2, x2, :lo12:f2fs_fill_super.__key.339
	str	wzr, [x19, #368]
	bl	__init_rwsem
	adrp	x1, .L.str.342
	adrp	x2, f2fs_fill_super.__key.341
	add	x0, x19, #472           // =472
	add	x1, x1, :lo12:.L.str.342
	add	x2, x2, :lo12:f2fs_fill_super.__key.341
	bl	__init_waitqueue_head
	ldr	x8, [x19, #16]
	mov	w10, #1
	adrp	x1, .L.str.618
	adrp	x2, init_sb_info.__key
	ldr	w9, [x8, #12]
	add	x0, x19, #3152          // =3152
	add	x1, x1, :lo12:.L.str.618
	add	x2, x2, :lo12:init_sb_info.__key
	str	w9, [x19, #1160]
	ldr	w9, [x8, #16]
	str	w9, [x19, #1164]
	lsl	w9, w10, w9
	str	w9, [x19, #1168]
	ldr	w9, [x8, #20]
	lsl	w10, w10, w9
	str	w9, [x19, #1184]
	str	w10, [x19, #1188]
	ldr	w10, [x8, #24]
	str	w10, [x19, #1192]
	ldr	w11, [x8, #28]
	str	w11, [x19, #1196]
	ldr	w11, [x8, #44]
	str	w11, [x19, #1200]
	ldr	w11, [x8, #60]
	lsr	w11, w11, #1
	lsl	w9, w11, w9
	mov	w11, #455
	mul	w9, w9, w11
	str	w9, [x19, #1204]
	ldr	w9, [x8, #96]
	add	x11, x19, #80           // =80
	str	w9, [x19, #1172]
	ldr	w9, [x8, #100]
	str	w9, [x19, #1176]
	mov	w9, #-1
	ldr	w8, [x8, #104]
	str	w9, [x19, #1984]
	mov	x9, #-1
	str	x9, [x19, #1992]
	mov	w9, #4096
	str	w9, [x19, #2112]
	mov	w9, #60
	str	x9, [x19, #544]
	mov	w9, #5
	str	w10, [x19, #2116]
	str	wzr, [x19, #1212]
	str	xzr, [x19, #552]
	str	xzr, [x19, #560]
	str	xzr, [x19, #568]
	str	x9, [x19, #576]
	str	x9, [x19, #584]
	str	w8, [x19, #1180]
	mov	w10, #4
	//APP
	// atomic64_andnot
	prfm	pstl1strm, [x11]
1:	ldxr	x8, [x11]
	bic	x8, x8, x10
	stxr	w9, x8, [x11]
	cbnz	w9, 1b
	//NO_APP
	add	x8, x19, #3112          // =3112
	str	wzr, [x19, #1272]
	str	wzr, [x19, #1276]
	str	wzr, [x19, #1280]
	str	wzr, [x19, #1284]
	str	wzr, [x19, #1288]
	str	wzr, [x19, #1292]
	str	wzr, [x19, #1296]
	str	wzr, [x19, #1300]
	str	wzr, [x19, #1304]
	str	wzr, [x19, #1308]
	str	wzr, [x19, #1312]
	str	wzr, [x19, #1316]
	str	wzr, [x19, #1320]
	str	wzr, [x19, #1324]
	str	wzr, [x19, #1328]
	str	wzr, [x19, #1376]
	str	wzr, [x19, #1380]
	str	x8, [x19, #3112]
	str	x8, [x19, #3120]
	bl	__mutex_init
	adrp	x1, .L.str.620
	adrp	x2, init_sb_info.__key.619
	add	x0, x19, #168           // =168
	add	x1, x1, :lo12:.L.str.620
	add	x2, x2, :lo12:init_sb_info.__key.619
	bl	__init_rwsem
	adrp	x1, .L.str.622
	adrp	x2, init_sb_info.__key.621
	add	x0, x19, #24            // =24
	add	x1, x1, :lo12:.L.str.622
	add	x2, x2, :lo12:init_sb_info.__key.621
	str	wzr, [x19, #236]
	str	xzr, [x19, #3144]
	bl	__init_rwsem
	adrp	x1, .L.str.624
	adrp	x2, init_sb_info.__key.623
	add	x0, x19, #2040          // =2040
	add	x1, x1, :lo12:.L.str.624
	add	x2, x2, :lo12:init_sb_info.__key.623
	bl	__init_rwsem
	add	x26, x19, #1336         // =1336
	adrp	x3, init_percpu_info.__key
	mov	w2, #3264
	mov	x0, x26
	mov	x1, xzr
	add	x3, x3, :lo12:init_percpu_info.__key
	bl	__percpu_counter_init
	cbz	w0, .LBB256_149
// %bb.129:                             //   in Loop: Header=BB256_2 Depth=1
	mov	w25, w0
	b	.LBB256_131
.LBB256_130:                            //   in Loop: Header=BB256_2 Depth=1
	mov	w25, #-12
.LBB256_131:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	w28, [sp, #116]         // 4-byte Folded Reload
	ldr	x20, [sp, #120]         // 8-byte Folded Reload
	b	.LBB256_134
.LBB256_132:                            //   in Loop: Header=BB256_2 Depth=1
	mov	w25, #-12
.LBB256_133:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	w28, [sp, #116]         // 4-byte Folded Reload
.LBB256_134:                            //   in Loop: Header=BB256_2 Depth=1
	adrp	x26, jiffies
	adrp	x27, kmalloc_caches+96
.LBB256_135:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x0, [x19, #144]
	bl	kvfree
	ldr	x0, [x19, #152]
	bl	kvfree
	ldr	x0, [x19, #160]
	bl	kvfree
	ldr	x0, [x21, #208]
	cbz	x0, .LBB256_137
// %bb.136:                             //   in Loop: Header=BB256_2 Depth=1
	bl	utf8_unload
	str	xzr, [x21, #208]
.LBB256_137:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x0, [x19, #1456]
	bl	kfree
	ldr	x0, [x19, #1464]
	bl	kfree
	ldr	x0, [x19, #1472]
	bl	kfree
	ldr	x0, [x19, #1496]
	bl	kfree
	mov	x0, x24
	str	xzr, [x19, #1496]
	bl	kvfree
.LBB256_138:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x20
	bl	kfree
.LBB256_139:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_destroy_bd_info
	ldr	x0, [x19, #3208]
	cbz	x0, .LBB256_141
// %bb.140:                             //   in Loop: Header=BB256_2 Depth=1
	add	x1, x0, #128            // =128
	bl	crypto_destroy_tfm
.LBB256_141:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	kfree
	subs	w22, w22, #1            // =1
	b.lt	.LBB256_304
// %bb.142:                             //   in Loop: Header=BB256_2 Depth=1
	eor	w8, w28, #0x1
	tbnz	w8, #0, .LBB256_304
// %bb.143:                             //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x21
	bl	shrink_dcache_sb
	ldr	x0, [x27, :lo12:kmalloc_caches+96]
	mov	w1, #3520
	mov	w2, #3464
	bl	kmem_cache_alloc_trace
	mov	x19, x0
	cbnz	x0, .LBB256_2
	b	.LBB256_303
.LBB256_144:                            //   in Loop: Header=BB256_2 Depth=1
	ldrh	w9, [x8, #2758]
	cmp	w9, #1                  // =1
	b.ne	.LBB256_147
// %bb.145:                             //   in Loop: Header=BB256_2 Depth=1
	ldrh	w20, [x8, #2760]
	mov	x0, x27
	bl	utf8_load
	mov	x25, x0
	cmn	x0, #1, lsl #12         // =4096
	b.ls	.LBB256_151
// %bb.146:                             //   in Loop: Header=BB256_2 Depth=1
	adrp	x1, .L.str.521
	adrp	x2, .L.str.524
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.521
	add	x2, x2, :lo12:.L.str.524
	mov	x3, x27
	mov	w4, w20
	bl	f2fs_printk
	ldr	x20, [sp, #120]         // 8-byte Folded Reload
	cbnz	w25, .LBB256_148
	b	.LBB256_118
.LBB256_147:                            //   in Loop: Header=BB256_2 Depth=1
	adrp	x1, .L.str.520
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.520
	bl	f2fs_printk
	mov	w25, #-22
.LBB256_148:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	w28, [sp, #116]         // 4-byte Folded Reload
	b	.LBB256_113
.LBB256_149:                            //   in Loop: Header=BB256_2 Depth=1
	add	x27, x19, #1384         // =1384
	adrp	x3, init_percpu_info.__key.625
	mov	w2, #3264
	mov	x0, x27
	mov	x1, xzr
	add	x3, x3, :lo12:init_percpu_info.__key.625
	bl	__percpu_counter_init
	ldr	x20, [sp, #120]         // 8-byte Folded Reload
	cbz	w0, .LBB256_152
// %bb.150:                             //   in Loop: Header=BB256_2 Depth=1
	mov	w25, w0
	mov	x0, x26
	bl	percpu_counter_destroy
	b	.LBB256_133
.LBB256_151:                            //   in Loop: Header=BB256_2 Depth=1
	adrp	x1, .L.str.522
	adrp	x2, .L.str.524
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.522
	add	x2, x2, :lo12:.L.str.524
	mov	x3, x27
	mov	w4, w20
	bl	f2fs_printk
	ldr	x8, [x19]
	str	x25, [x8, #208]
	ldr	x8, [x19]
	strh	w20, [x8, #216]
	ldr	x20, [sp, #120]         // 8-byte Folded Reload
	b	.LBB256_118
.LBB256_152:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	w8, [x19, #1432]
	mov	w9, #1
	str	x26, [sp, #64]          // 8-byte Folded Spill
	str	x27, [sp, #88]          // 8-byte Folded Spill
	lsl	w8, w9, w8
	cmp	w8, #2                  // =2
	b.lt	.LBB256_154
// %bb.153:                             //   in Loop: Header=BB256_2 Depth=1
	lsl	w8, w8, #1
	adrp	x1, mempool_alloc_pages
	adrp	x2, mempool_free_pages
	sub	w0, w8, #2              // =2
	add	x1, x1, :lo12:mempool_alloc_pages
	add	x2, x2, :lo12:mempool_free_pages
	mov	x3, xzr
	bl	mempool_create
	str	x0, [x19, #216]
	cbz	x0, .LBB256_158
.LBB256_154:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_init_xattr_caches
	cbz	w0, .LBB256_156
// %bb.155:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	w28, [sp, #116]         // 4-byte Folded Reload
	mov	w25, w0
	adrp	x26, jiffies
	adrp	x27, kmalloc_caches+96
	b	.LBB256_240
.LBB256_156:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_init_page_array_cache
	cbz	w0, .LBB256_160
// %bb.157:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	w28, [sp, #116]         // 4-byte Folded Reload
	mov	w25, w0
	adrp	x26, jiffies
	adrp	x27, kmalloc_caches+96
	b	.LBB256_239
.LBB256_158:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	w28, [sp, #116]         // 4-byte Folded Reload
	mov	w25, #-12
	adrp	x26, jiffies
	adrp	x27, kmalloc_caches+96
	b	.LBB256_241
.LBB256_159:                            //   in Loop: Header=BB256_2 Depth=1
	adrp	x1, .L.str.324
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.324
	bl	f2fs_printk
	mov	w25, #-22
	b	.LBB256_139
.LBB256_160:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	w1, [x19, #1180]
	mov	x0, x21
	bl	f2fs_iget
	cmn	x0, #4095               // =4095
	str	x0, [x19, #248]
	mov	x0, x19
	b.lo	.LBB256_162
// %bb.161:                             //   in Loop: Header=BB256_2 Depth=1
	adrp	x1, .L.str.343
	add	x1, x1, :lo12:.L.str.343
	bl	f2fs_printk
	ldr	w25, [x19, #248]
	ldr	w28, [sp, #116]         // 4-byte Folded Reload
	adrp	x26, jiffies
	adrp	x27, kmalloc_caches+96
	b	.LBB256_238
.LBB256_162:                            //   in Loop: Header=BB256_2 Depth=1
	bl	f2fs_get_valid_checkpoint
	cbz	w0, .LBB256_164
// %bb.163:                             //   in Loop: Header=BB256_2 Depth=1
	adrp	x1, .L.str.344
	mov	w25, w0
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.344
	bl	f2fs_printk
	ldr	w28, [sp, #116]         // 4-byte Folded Reload
	adrp	x26, jiffies
	adrp	x27, kmalloc_caches+96
	b	.LBB256_237
.LBB256_164:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x19, #224]
	ldr	w8, [x8, #132]
	tbnz	w8, #12, .LBB256_167
// %bb.165:                             //   in Loop: Header=BB256_2 Depth=1
	tbnz	w8, #16, .LBB256_168
.LBB256_166:                            //   in Loop: Header=BB256_2 Depth=1
	tbnz	w8, #4, .LBB256_169
	b	.LBB256_173
.LBB256_167:                            //   in Loop: Header=BB256_2 Depth=1
	add	x8, x19, #80            // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4096
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
	ldr	x8, [x19, #224]
	ldr	w8, [x8, #132]
	tbz	w8, #16, .LBB256_166
.LBB256_168:                            //   in Loop: Header=BB256_2 Depth=1
	add	x8, x19, #80            // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 512
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
	ldr	x8, [x19, #224]
	mov	w9, #1
	str	x9, [x19, #576]
	ldr	w8, [x8, #132]
	tbz	w8, #4, .LBB256_173
.LBB256_169:                            //   in Loop: Header=BB256_2 Depth=1
	add	x8, x19, #80            // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
	ldrb	w8, [x19, #3376]
	cbnz	w8, .LBB256_173
// %bb.170:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	x1, [x19, #3392]
	cbz	x1, .LBB256_173
// %bb.171:                             //   in Loop: Header=BB256_2 Depth=1
	adrp	x8, system_state
	ldr	w8, [x8, :lo12:system_state]
	cmp	w8, #2                  // =2
	b.hi	.LBB256_173
// %bb.172:                             //   in Loop: Header=BB256_2 Depth=1
	add	x2, x19, #3408          // =3408
	mov	w0, #8
	bl	queue_work_on
.LBB256_173:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x19, #16]
	str	x8, [sp, #56]           // 8-byte Folded Spill
	ldrb	w8, [x8, #2201]
	cbz	w8, .LBB256_190
// %bb.174:                             //   in Loop: Header=BB256_2 Depth=1
	mov	w27, #8
.LBB256_175:                            //   in Loop: Header=BB256_2 Depth=1
	mov	w8, #88
	mul	w0, w27, w8
	mov	w1, #3520
	bl	f2fs_kmalloc
	str	x0, [x19, #3136]
	cbz	x0, .LBB256_193
// %bb.176:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [sp, #56]           // 8-byte Folded Reload
	mov	x23, xzr
	mov	w26, #72
	add	x20, x8, #2201          // =2201
.LBB256_177:                            //   Parent Loop BB256_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	cmp	x26, #72                // =72
	b.eq	.LBB256_179
// %bb.178:                             //   in Loop: Header=BB256_177 Depth=2
	ldrb	w8, [x20]
	cbz	w8, .LBB256_189
.LBB256_179:                            //   in Loop: Header=BB256_177 Depth=2
	cmp	w27, #1                 // =1
	b.ne	.LBB256_181
// %bb.180:                             //   in Loop: Header=BB256_177 Depth=2
	ldr	x8, [x19]
	ldr	x9, [x8, #248]
	ldr	w1, [x8, #1108]
	ldr	x2, [x8, #40]
	ldr	w0, [x9]
	bl	blkdev_get_by_dev
	ldr	x8, [x19, #3136]
	str	x0, [x8]
	b	.LBB256_187
.LBB256_181:                            //   in Loop: Header=BB256_177 Depth=2
	ldr	x8, [x19, #3136]
	mov	w2, #64
	mov	x1, x20
	add	x8, x8, x26
	sub	x0, x8, #64             // =64
	bl	memcpy
	ldr	w8, [x20, #64]
	ldr	x9, [x19, #3136]
	cmp	x26, #72                // =72
	str	w8, [x9, x26]
	ldr	x8, [x19, #3136]
	b.ne	.LBB256_183
// %bb.182:                             //   in Loop: Header=BB256_177 Depth=2
	str	wzr, [x8, #76]
	ldr	x9, [x19, #3136]
	ldr	x12, [sp, #56]          // 8-byte Folded Reload
	ldr	w8, [x19, #1184]
	ldp	w10, w11, [x9, #72]
	ldr	w12, [x12, #72]
	add	x9, x9, #80             // =80
	lsl	w8, w10, w8
	add	w8, w11, w8
	add	w8, w8, w12
	sub	w8, w8, #1              // =1
	b	.LBB256_184
.LBB256_183:                            //   in Loop: Header=BB256_177 Depth=2
	add	x8, x8, x26
	ldur	w9, [x8, #-80]
	add	w9, w9, #1              // =1
	str	w9, [x8, #4]
	ldr	x8, [x19, #3136]
	ldr	w9, [x19, #1184]
	add	x10, x8, x26
	ldp	w8, w11, [x10]
	lsl	w8, w8, w9
	add	w8, w11, w8
	sub	w8, w8, #1              // =1
	add	x9, x10, #8             // =8
.LBB256_184:                            //   in Loop: Header=BB256_177 Depth=2
	str	w8, [x9]
	ldr	x8, [x19, #3136]
	adrp	x1, .L.str.626
	add	x1, x1, :lo12:.L.str.626
	add	x8, x8, x26
	sub	x0, x8, #64             // =64
	bl	strcmp
	ldr	x8, [x19, #3136]
	cbz	w0, .LBB256_186
// %bb.185:                             //   in Loop: Header=BB256_177 Depth=2
	ldr	x9, [x19]
	add	x8, x8, x26
	sub	x0, x8, #64             // =64
	ldr	w1, [x9, #1108]
	ldr	x2, [x9, #40]
	bl	blkdev_get_by_path
	ldr	x8, [x19, #3136]
	add	x8, x8, x26
	stur	x0, [x8, #-72]
	b	.LBB256_187
.LBB256_186:                            //   in Loop: Header=BB256_177 Depth=2
	add	x8, x8, x26
	stur	xzr, [x8, #-72]
	ldr	x8, [x19, #3136]
	ldr	w9, [x19, #1184]
	ldr	w10, [x19, #1260]
	ldr	w8, [x8, x26]
	lsl	w8, w8, w9
	add	w8, w10, w8
	str	w8, [x19, #1260]
.LBB256_187:                            //   in Loop: Header=BB256_177 Depth=2
	ldr	x8, [x19, #3136]
	add	x8, x8, x26
	ldur	x25, [x8, #-72]
	cmn	x25, #1, lsl #12        // =4096
	b.hi	.LBB256_194
// %bb.188:                             //   in Loop: Header=BB256_177 Depth=2
	add	x25, x23, #1            // =1
	str	w25, [x19, #3128]
	ldp	w4, w5, [x8]
	ldr	w6, [x8, #8]
	adrp	x1, .L.str.627
	sub	x3, x8, #64             // =64
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.627
	mov	w2, w23
	bl	f2fs_printk
	add	x26, x26, #88           // =88
	cmp	x25, x27
	add	x20, x20, #68           // =68
	mov	x23, x25
	b.ne	.LBB256_177
.LBB256_189:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	w8, [x19, #1432]
	mov	w9, #1
	adrp	x1, .L.str.628
	mov	x0, x19
	add	w8, w8, #2              // =2
	lsl	w2, w9, w8
	add	x1, x1, :lo12:.L.str.628
	bl	f2fs_printk
	b	.LBB256_196
.LBB256_190:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x19]
	ldr	x8, [x8, #248]
	ldr	x8, [x8, #128]
	ldr	x8, [x8, #1264]
	cbz	x8, .LBB256_196
// %bb.191:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	w8, [x8, #2980]
	sub	w8, w8, #1              // =1
	cmp	w8, #1                  // =1
	b.hi	.LBB256_196
// %bb.192:                             //   in Loop: Header=BB256_2 Depth=1
	mov	w27, #1
	b	.LBB256_175
.LBB256_193:                            //   in Loop: Header=BB256_2 Depth=1
	mov	w25, #-12
	b	.LBB256_195
.LBB256_194:                            //   in Loop: Header=BB256_2 Depth=1
	cbz	w25, .LBB256_196
.LBB256_195:                            //   in Loop: Header=BB256_2 Depth=1
	adrp	x1, .L.str.345
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.345
	bl	f2fs_printk
	b	.LBB256_231
.LBB256_196:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_init_post_read_wq
	cbz	w0, .LBB256_198
// %bb.197:                             //   in Loop: Header=BB256_2 Depth=1
	adrp	x1, .L.str.346
	mov	w25, w0
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.346
	bl	f2fs_printk
	b	.LBB256_231
.LBB256_198:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x19, #224]
	ldr	x0, [sp, #88]           // 8-byte Folded Reload
	ldr	w9, [x8, #144]
	str	w9, [x19, #1208]
	ldr	w1, [x8, #148]
	bl	percpu_counter_set
	ldr	x8, [x19, #224]
	mov	x0, x19
	ldr	x9, [x8, #8]
	str	w9, [x19, #1236]
	ldr	w8, [x8, #16]
	add	x9, x19, #1252          // =1252
	str	w8, [x19, #1240]
	str	w8, [x19, #1248]
	str	xzr, [x9]
	bl	limit_reserve_root
	ldr	w3, [x19, #1516]
	cbz	w3, .LBB256_202
// %bb.199:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	w2, [x19, #1236]
	cmp	w3, #100                // =100
	b.eq	.LBB256_201
// %bb.200:                             //   in Loop: Header=BB256_2 Depth=1
	mov	w8, #34079
	movk	w8, #20971, lsl #16
	umull	x8, w2, w8
	lsr	x8, x8, #37
	mul	w2, w8, w3
.LBB256_201:                            //   in Loop: Header=BB256_2 Depth=1
	adrp	x1, .L.str.631
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.631
	str	w2, [x19, #1520]
	bl	f2fs_printk
.LBB256_202:                            //   in Loop: Header=BB256_2 Depth=1
	mov	w8, #-1
	str	w8, [x19, #2096]
	add	x8, x19, #952           // =952
	strb	wzr, [x19, #2100]
	str	xzr, [x19, #2088]
	str	x8, [x19, #952]
	str	x8, [x19, #960]
	add	x8, x19, #968           // =968
	str	xzr, [x19, #1016]
	str	x8, [x19, #968]
	str	x8, [x19, #976]
	add	x8, x19, #984           // =984
	adrp	x1, .L.str.348
	adrp	x2, f2fs_fill_super.__key.347
	str	x8, [x19, #984]
	str	x8, [x19, #992]
	add	x8, x19, #1000          // =1000
	add	x0, x19, #1032          // =1032
	add	x1, x1, :lo12:.L.str.348
	add	x2, x2, :lo12:f2fs_fill_super.__key.347
	str	xzr, [x19, #1024]
	str	x8, [x19, #1000]
	str	x8, [x19, #1008]
	bl	__mutex_init
	mov	x0, x19
	bl	f2fs_init_extent_cache_info
	mov	x0, x19
	bl	f2fs_init_fsync_node_info
	mov	x0, x19
	bl	f2fs_init_ckpt_req_control
	ldrb	w8, [x21, #80]
	tbnz	w8, #0, .LBB256_206
// %bb.203:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	w8, [x19, #1424]
	mov	w9, #301989888
	and	w8, w8, w9
	mov	w9, #268435456
	cmp	w8, w9
	b.ne	.LBB256_206
// %bb.204:                             //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_start_ckpt_thread
	cbz	w0, .LBB256_206
// %bb.205:                             //   in Loop: Header=BB256_2 Depth=1
	mov	w25, w0
	adrp	x1, .L.str.349
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.349
	mov	w2, w25
	bl	f2fs_printk
	b	.LBB256_230
.LBB256_206:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_build_segment_manager
	cbz	w0, .LBB256_208
// %bb.207:                             //   in Loop: Header=BB256_2 Depth=1
	mov	w25, w0
	adrp	x1, .L.str.350
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.350
	mov	w2, w25
	bl	f2fs_printk
	b	.LBB256_229
.LBB256_208:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_build_node_manager
	cbz	w0, .LBB256_210
// %bb.209:                             //   in Loop: Header=BB256_2 Depth=1
	mov	w25, w0
	adrp	x1, .L.str.351
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.351
	mov	w2, w25
	bl	f2fs_printk
	b	.LBB256_228
.LBB256_210:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_init_ino_entry_info
	mov	x0, x19
	bl	f2fs_get_sectors_written
	ldr	x8, [x19, #224]
	str	x0, [x19, #3192]
	mov	w9, #33
	ldrb	w8, [x8, #132]
	tst	w8, w9
	b.eq	.LBB256_212
// %bb.211:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x19, #136]
	ldr	x8, [x8, #24]
	ldr	x8, [x8, #448]
	ldur	x8, [x8, #2]
	str	x8, [x19, #3200]
.LBB256_212:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_build_gc_manager
	mov	x0, x19
	str	wzr, [x19, #2336]
	bl	f2fs_build_stats
	cbz	w0, .LBB256_214
// %bb.213:                             //   in Loop: Header=BB256_2 Depth=1
	mov	w25, w0
	b	.LBB256_228
.LBB256_214:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	w1, [x19, #1176]
	mov	x0, x21
	bl	f2fs_iget
	cmn	x0, #4095               // =4095
	str	x0, [x19, #128]
	b.lo	.LBB256_216
// %bb.215:                             //   in Loop: Header=BB256_2 Depth=1
	adrp	x1, .L.str.352
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.352
	bl	f2fs_printk
	ldr	w25, [x19, #128]
	b	.LBB256_227
.LBB256_216:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	w1, [x19, #1172]
	mov	x0, x21
	bl	f2fs_iget
	mov	x25, x0
	cmn	x0, #4095               // =4095
	b.lo	.LBB256_218
// %bb.217:                             //   in Loop: Header=BB256_2 Depth=1
	adrp	x1, .L.str.353
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.353
	bl	f2fs_printk
	b	.LBB256_226
.LBB256_218:                            //   in Loop: Header=BB256_2 Depth=1
	ldrh	w8, [x25]
	and	w8, w8, #0xf000
	cmp	w8, #4, lsl #12         // =16384
	b.ne	.LBB256_225
// %bb.219:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x25, #144]
	cbz	x8, .LBB256_225
// %bb.220:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x25, #80]
	cbz	x8, .LBB256_225
// %bb.221:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	w8, [x25, #72]
	cbz	w8, .LBB256_225
// %bb.222:                             //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x25
	bl	d_make_root
	str	x0, [x21, #104]
	cbz	x0, .LBB256_242
// %bb.223:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x19, #16]
	mov	w10, #5242880
	mov	w12, #80
	mov	w11, #60
	ldur	x8, [x8, #36]
	str	w10, [x19, #3352]
	add	x9, x19, #3364          // =3364
	mov	x0, x19
	lsr	x8, x8, #18
	cmp	w8, #64                 // =64
	mov	w8, #8388608
	csel	w8, w8, w10, hi
	mov	w10, #65
	csel	w10, w10, w12, hi
	str	w10, [x19, #3348]
	mov	w10, #70
	str	w8, [x19, #3344]
	str	w8, [x19, #3360]
	mov	x8, #80
	csel	w11, w11, w12, hi
	csel	w10, w10, w12, hi
	movk	x8, #80, lsl #48
	str	w11, [x19, #3356]
	str	x8, [x9]
	str	w10, [x19, #3372]
	str	wzr, [x19, #3340]
	bl	f2fs_init_compress_inode
	cbz	w0, .LBB256_243
// %bb.224:                             //   in Loop: Header=BB256_2 Depth=1
	mov	w25, w0
	b	.LBB256_301
.LBB256_225:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x25
	bl	iput
	mov	w25, #-22
.LBB256_226:                            //   in Loop: Header=BB256_2 Depth=1
	mov	w1, #1
	mov	x0, x19
	bl	f2fs_release_ino_entry
	ldr	x8, [x19, #128]
	ldr	x0, [x8, #48]
	bl	truncate_inode_pages_final
	ldr	x0, [x19, #128]
	bl	iput
	str	xzr, [x19, #128]
.LBB256_227:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_destroy_stats
.LBB256_228:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_destroy_node_manager
.LBB256_229:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_destroy_segment_manager
	mov	x0, x19
	bl	f2fs_destroy_post_read_wq
.LBB256_230:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_stop_ckpt_thread
.LBB256_231:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	w9, [x19, #3128]
	ldr	w28, [sp, #116]         // 4-byte Folded Reload
	ldr	x0, [x19, #3136]
	adrp	x26, jiffies
	adrp	x27, kmalloc_caches+96
	cmp	w9, #1                  // =1
	b.lt	.LBB256_236
// %bb.232:                             //   in Loop: Header=BB256_2 Depth=1
	mov	x20, xzr
	mov	x23, xzr
	b	.LBB256_234
.LBB256_233:                            //   in Loop: Header=BB256_234 Depth=2
	add	x23, x23, #1            // =1
	cmp	x23, w9, sxtw
	add	x20, x20, #88           // =88
	b.ge	.LBB256_236
.LBB256_234:                            //   Parent Loop BB256_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x0, x20]
	cbz	x8, .LBB256_233
// %bb.235:                             //   in Loop: Header=BB256_234 Depth=2
	mov	w1, #128
	mov	x0, x8
	bl	blkdev_put
	ldr	w9, [x19, #3128]
	ldr	x0, [x19, #3136]
	b	.LBB256_233
.LBB256_236:                            //   in Loop: Header=BB256_2 Depth=1
	bl	kvfree
	ldr	x0, [x19, #224]
	bl	kvfree
	ldr	x20, [sp, #120]         // 8-byte Folded Reload
	adrp	x23, kmalloc_caches+80
.LBB256_237:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x0, [x19, #248]
	bl	make_bad_inode
	ldr	x0, [x19, #248]
	bl	iput
	str	xzr, [x19, #248]
.LBB256_238:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_destroy_page_array_cache
.LBB256_239:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_destroy_xattr_caches
.LBB256_240:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x0, [x19, #216]
	bl	mempool_destroy
.LBB256_241:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x0, [sp, #64]           // 8-byte Folded Reload
	bl	percpu_counter_destroy
	ldr	x0, [sp, #88]           // 8-byte Folded Reload
	bl	percpu_counter_destroy
	b	.LBB256_135
.LBB256_242:                            //   in Loop: Header=BB256_2 Depth=1
	mov	w25, #-12
	b	.LBB256_226
.LBB256_243:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_register_sysfs
	cbz	w0, .LBB256_245
// %bb.244:                             //   in Loop: Header=BB256_2 Depth=1
	mov	w25, w0
	b	.LBB256_300
.LBB256_245:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x19, #16]
	ldrb	w8, [x8, #2180]
	tbz	w8, #7, .LBB256_249
// %bb.246:                             //   in Loop: Header=BB256_2 Depth=1
	ldrb	w8, [x21, #80]
	tbnz	w8, #0, .LBB256_249
// %bb.247:                             //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x21
	bl	f2fs_enable_quotas
	cbz	w0, .LBB256_249
// %bb.248:                             //   in Loop: Header=BB256_2 Depth=1
	adrp	x1, .L.str.354
	mov	w2, w0
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.354
	bl	f2fs_printk
.LBB256_249:                            //   in Loop: Header=BB256_2 Depth=1
	strb	wzr, [x19, #3377]
	adrp	x8, jiffies
	ldr	x8, [x8, :lo12:jiffies]
	mov	x0, x19
	str	x8, [x19, #3384]
	bl	f2fs_recover_orphan_inodes
	cbz	w0, .LBB256_251
.LBB256_250:                            //   in Loop: Header=BB256_2 Depth=1
	mov	w25, w0
	ldr	x0, [x21, #352]
	cbnz	x0, .LBB256_291
	b	.LBB256_292
.LBB256_251:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x19, #224]
	ldrb	w8, [x8, #133]
	tbnz	w8, #6, .LBB256_280
// %bb.252:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	w8, [x19, #1424]
	mov	w9, #2
	movk	w9, #1024, lsl #16
	tst	w8, w9
	b.eq	.LBB256_256
// %bb.253:                             //   in Loop: Header=BB256_2 Depth=1
	mov	w1, #1
	mov	x0, x19
	bl	f2fs_recover_fsync_data
	mov	w25, w0
	cmp	w0, #1                  // =1
	b.lt	.LBB256_274
// %bb.254:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x21, #80]
	tbnz	w8, #0, .LBB256_274
// %bb.255:                             //   in Loop: Header=BB256_2 Depth=1
	adrp	x1, .L.str.359
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.359
	bl	f2fs_printk
	mov	w25, #-22
	ldr	x0, [x21, #352]
	cbnz	x0, .LBB256_291
	b	.LBB256_292
.LBB256_256:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	w8, [x19, #3128]
	cmp	w8, #2                  // =2
	b.lt	.LBB256_260
// %bb.257:                             //   in Loop: Header=BB256_2 Depth=1
	mov	x20, xzr
	mov	x23, xzr
.LBB256_258:                            //   Parent Loop BB256_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x19, #3136]
	ldr	x0, [x8, x20]
	bl	bdev_read_only
	cbnz	w0, .LBB256_261
// %bb.259:                             //   in Loop: Header=BB256_258 Depth=2
	ldrsw	x8, [x19, #3128]
	add	x23, x23, #1            // =1
	add	x20, x20, #88           // =88
	cmp	x23, x8
	b.lt	.LBB256_258
	b	.LBB256_264
.LBB256_260:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x19]
	ldr	x0, [x8, #248]
	bl	bdev_read_only
	cbz	w0, .LBB256_264
.LBB256_261:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x19, #224]
	ldrb	w8, [x8, #132]
	tbnz	w8, #0, .LBB256_279
// %bb.262:                             //   in Loop: Header=BB256_2 Depth=1
	mov	w1, #1
	mov	x0, x19
	bl	f2fs_recover_fsync_data
	cmp	w0, #1                  // =1
	b.lt	.LBB256_278
// %bb.263:                             //   in Loop: Header=BB256_2 Depth=1
	adrp	x1, .L.str.355
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.355
	bl	f2fs_printk
	mov	w25, #-30
	ldr	x0, [x21, #352]
	cbnz	x0, .LBB256_291
	b	.LBB256_292
.LBB256_264:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	w8, [sp, #76]           // 4-byte Folded Reload
	tbz	w8, #0, .LBB256_272
// %bb.265:                             //   in Loop: Header=BB256_2 Depth=1
	add	x8, x19, #80            // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
	ldrb	w8, [x19, #3376]
	cbnz	w8, .LBB256_269
// %bb.266:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	x1, [x19, #3392]
	cbz	x1, .LBB256_269
// %bb.267:                             //   in Loop: Header=BB256_2 Depth=1
	adrp	x8, system_state
	ldr	w8, [x8, :lo12:system_state]
	cmp	w8, #2                  // =2
	b.hi	.LBB256_269
// %bb.268:                             //   in Loop: Header=BB256_2 Depth=1
	add	x2, x19, #3408          // =3408
	mov	w0, #8
	bl	queue_work_on
.LBB256_269:                            //   in Loop: Header=BB256_2 Depth=1
	adrp	x8, f2fs_dclient
	ldr	x0, [x8, :lo12:f2fs_dclient]
	cbz	x0, .LBB256_272
// %bb.270:                             //   in Loop: Header=BB256_2 Depth=1
	bl	dsm_client_ocuppy
	cbnz	w0, .LBB256_272
// %bb.271:                             //   in Loop: Header=BB256_2 Depth=1
	adrp	x20, f2fs_dclient
	ldr	x0, [x20, :lo12:f2fs_dclient]
	adrp	x1, .L.str.357
	adrp	x2, .L__func__.f2fs_fill_super
	mov	w3, #5346
	add	x1, x1, :lo12:.L.str.357
	add	x2, x2, :lo12:.L__func__.f2fs_fill_super
	bl	dsm_client_record
	ldr	x0, [x20, :lo12:f2fs_dclient]
	mov	w1, #15244
	movk	w1, #14160, lsl #16
	bl	dsm_client_notify
.LBB256_272:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	w8, [sp, #116]          // 4-byte Folded Reload
	tbnz	w8, #0, .LBB256_280
// %bb.273:                             //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	mov	w1, wzr
	bl	f2fs_recover_fsync_data
	mov	w25, w0
	tbnz	w0, #31, .LBB256_302
.LBB256_274:                            //   in Loop: Header=BB256_2 Depth=1
	cbnz	w25, .LBB256_280
// %bb.275:                             //   in Loop: Header=BB256_2 Depth=1
	ldrb	w8, [x21, #80]
	tbnz	w8, #0, .LBB256_280
// %bb.276:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x19, #16]
	ldrb	w8, [x8, #2180]
	tbz	w8, #1, .LBB256_280
// %bb.277:                             //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_check_write_pointer
	cbnz	w0, .LBB256_250
	b	.LBB256_280
.LBB256_278:                            //   in Loop: Header=BB256_2 Depth=1
	mov	w25, w0
	tbnz	w0, #31, .LBB256_290
.LBB256_279:                            //   in Loop: Header=BB256_2 Depth=1
	adrp	x1, .L.str.356
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.356
	bl	f2fs_printk
.LBB256_280:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_init_inmem_curseg
	add	x8, x19, #80            // =80
	mov	w11, #8
	//APP
	// atomic64_andnot
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	bic	x9, x9, x11
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
	ldrb	w8, [x19, #1427]
	tbnz	w8, #1, .LBB256_283
// %bb.281:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x19, #224]
	ldrb	w8, [x8, #133]
	tbz	w8, #6, .LBB256_284
// %bb.282:                             //   in Loop: Header=BB256_2 Depth=1
	mov	x20, x19
	ldr	x0, [x20], #80
	bl	sync_inodes_sb
	ldr	x22, [sp, #104]         // 8-byte Folded Reload
	mov	x0, x22
	bl	down_write
	mov	x0, x19
	bl	f2fs_dirty_to_prefree
	mov	w10, #256
	//APP
	// atomic64_andnot
	prfm	pstl1strm, [x20]
1:	ldxr	x8, [x20]
	bic	x8, x8, x10
	stxr	w9, x8, [x20]
	cbnz	w9, 1b
	//NO_APP
	//APP
	// atomic64_or
	prfm	pstl1strm, [x20]
1:	ldxr	x8, [x20]
	orr	x8, x8, 1
	stxr	w9, x8, [x20]
	cbnz	w9, 1b
	//NO_APP
	mov	x0, x22
	bl	up_write
	ldr	x0, [x19]
	mov	w1, #1
	bl	f2fs_sync_fs
	b	.LBB256_284
.LBB256_283:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_disable_checkpoint
	mov	w25, w0
	cbnz	w0, .LBB256_289
.LBB256_284:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	init_virtual_curseg
	mov	x0, x19
	bl	f2fs_init_gc_thread
	ldr	w8, [x19, #1508]
	cmp	w8, #1                  // =1
	b.eq	.LBB256_287
// %bb.285:                             //   in Loop: Header=BB256_2 Depth=1
	ldrb	w8, [x21, #80]
	tbnz	w8, #0, .LBB256_287
// %bb.286:                             //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_start_gc_thread
	mov	w25, w0
	cbnz	w0, .LBB256_289
.LBB256_287:                            //   in Loop: Header=BB256_2 Depth=1
	adrp	x0, .L.str.320
	mov	w1, #4
	add	x0, x0, :lo12:.L.str.320
	mov	w2, wzr
	bl	alloc_workqueue
	str	x0, [x19, #3392]
	cbnz	x0, .LBB256_311
// %bb.288:                             //   in Loop: Header=BB256_2 Depth=1
	mov	w25, #-12
.LBB256_289:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x0, [x19]
	bl	sync_filesystem
	mov	w22, wzr
.LBB256_290:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x0, [x21, #352]
	cbz	x0, .LBB256_292
.LBB256_291:                            //   in Loop: Header=BB256_2 Depth=1
	bl	f2fs_inode_synced
.LBB256_292:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x0, [x21, #360]
	cbz	x0, .LBB256_294
// %bb.293:                             //   in Loop: Header=BB256_2 Depth=1
	bl	f2fs_inode_synced
.LBB256_294:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x0, [x21, #368]
	cbz	x0, .LBB256_296
// %bb.295:                             //   in Loop: Header=BB256_2 Depth=1
	bl	f2fs_inode_synced
.LBB256_296:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x19, #16]
	ldrb	w8, [x8, #2180]
	tbz	w8, #7, .LBB256_299
// %bb.297:                             //   in Loop: Header=BB256_2 Depth=1
	ldrb	w8, [x21, #80]
	tbnz	w8, #0, .LBB256_299
// %bb.298:                             //   in Loop: Header=BB256_2 Depth=1
	ldr	x0, [x19]
	bl	f2fs_quota_off_umount
.LBB256_299:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x8, [x19, #248]
	ldr	x0, [x8, #48]
	bl	truncate_inode_pages_final
	mov	x0, x21
	bl	evict_inodes
	mov	x0, x19
	bl	f2fs_unregister_sysfs
.LBB256_300:                            //   in Loop: Header=BB256_2 Depth=1
	mov	x0, x19
	bl	f2fs_destroy_compress_inode
.LBB256_301:                            //   in Loop: Header=BB256_2 Depth=1
	ldr	x0, [x21, #104]
	bl	dput
	str	xzr, [x21, #104]
	b	.LBB256_226
.LBB256_302:                            //   in Loop: Header=BB256_2 Depth=1
	cmn	w25, #12                // =12
	adrp	x1, .L.str.358
	cset	w8, ne
	mov	x0, x19
	add	x1, x1, :lo12:.L.str.358
	mov	w2, w25
	str	w8, [sp, #116]          // 4-byte Folded Spill
	bl	f2fs_printk
	mov	w8, #1
	str	w8, [sp, #76]           // 4-byte Folded Spill
	ldr	x0, [x21, #352]
	cbnz	x0, .LBB256_291
	b	.LBB256_292
.LBB256_303:
	mov	w25, #-12
.LBB256_304:
	adrp	x9, __stack_chk_guard
	ldr	x8, [sp, #408]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB256_306
// %bb.305:
	mov	w0, w25
	mov	sp, x29
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]     // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96     // 16-byte Folded Reload
	ret
.LBB256_306:
	bl	__stack_chk_fail
.LBB256_307:
	//APP
	.pushsection __bug_table,"aw"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,"aMS",@progbits,1; 14472: .string "fs/hw_f2fs/f2fs.h"; .popsection; .long 14472b - 14470b; .short 2937; .short 0; .popsection; 14471: brk 0x800
	//NO_APP
.LBB256_308:
	//APP
	.pushsection __bug_table,"aw"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,"aMS",@progbits,1; 14472: .string "fs/hw_f2fs/f2fs.h"; .popsection; .long 14472b - 14470b; .short 2943; .short 0; .popsection; 14471: brk 0x800
	//NO_APP
.LBB256_309:
	//APP
	.pushsection __bug_table,"aw"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,"aMS",@progbits,1; 14472: .string "fs/hw_f2fs/f2fs.h"; .popsection; .long 14472b - 14470b; .short 2937; .short 0; .popsection; 14471: brk 0x800
	//NO_APP
.LBB256_310:
	//APP
	.pushsection __bug_table,"aw"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,"aMS",@progbits,1; 14472: .string "fs/hw_f2fs/f2fs.h"; .popsection; .long 14472b - 14470b; .short 2943; .short 0; .popsection; 14471: brk 0x800
	//NO_APP
.LBB256_311:
	adrp	x10, need_fsck_fn
	mov	x8, #68719476704
	add	x9, x19, #3416          // =3416
	add	x10, x10, :lo12:need_fsck_fn
	mov	x0, x24
	str	x19, [x19, #3400]
	str	x8, [x19, #3408]
	str	x9, [x19, #3416]
	str	x9, [x19, #3424]
	str	x10, [x19, #3432]
	bl	kvfree
	cbz	w28, .LBB256_313
// %bb.312:
	mov	w1, #1
	mov	x0, x19
	mov	w20, #1
	bl	f2fs_commit_super
	ldr	w8, [x19, #72]
	adrp	x1, .L.str.360
	mov	w3, w0
	add	x1, x1, :lo12:.L.str.360
	cmp	w8, #0                  // =0
	cinc	w2, w20, eq
	mov	x0, x19
	bl	f2fs_printk
.LBB256_313:
	mov	x0, x19
	bl	f2fs_join_shrinker
	ldr	x8, [x19, #136]
	ldr	w9, [x8, #96]
	cmp	w9, #2, lsl #12         // =8192
	b.hi	.LBB256_315
// %bb.314:
	mov	w9, #1
	str	w9, [x19, #1488]
	ldr	x10, [x8, #168]
	str	w9, [x10, #8320]
	str	w9, [x8, #136]
.LBB256_315:
	ldr	x8, [x19, #224]
	mov	w20, #1
	str	w20, [x19, #1216]
	adrp	x1, .L.str.361
	ldr	x2, [x8]
	add	x1, x1, :lo12:.L.str.361
	mov	x0, x19
	bl	f2fs_printk
	adrp	x9, jiffies
	ldr	x8, [x9, :lo12:jiffies]
	mov	w25, wzr
	str	x8, [x19, #496]
	ldr	x8, [x9, :lo12:jiffies]
	add	x9, x19, #80            // =80
	stp	x8, x8, [x19, #504]
	str	x8, [x19, #520]
	mov	w8, #512
	//APP
	// atomic64_andnot
	prfm	pstl1strm, [x9]
1:	ldxr	x10, [x9]
	bic	x10, x10, x8
	stxr	w11, x10, [x9]
	cbnz	w11, 1b
	//NO_APP
	adrp	x8, f2fs_fill_super_done
	str	w20, [x8, :lo12:f2fs_fill_super_done]
	b	.LBB256_304
.Lfunc_end256:
	.size	f2fs_fill_super, .Lfunc_end256-f2fs_fill_super
                                        // -- End function
	.p2align	2               // -- Begin function parse_options
	.type	parse_options,@function
parse_options:                          // @parse_options
// %bb.0:
	sub	sp, sp, #176            // =176
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #80]     // 16-byte Folded Spill
	add	x29, sp, #80            // =80
	str	x27, [sp, #96]          // 8-byte Folded Spill
	stp	x26, x25, [sp, #112]    // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]    // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]    // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]    // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	str	x1, [sp, #8]
	ldr	x19, [x0, #1008]
	stp	xzr, xzr, [sp, #56]
	stp	xzr, xzr, [sp, #40]
	stp	xzr, xzr, [sp, #24]
	str	wzr, [sp, #4]
	cbz	x1, .LBB257_178
// %bb.1:
	adrp	x1, .L.str.392
	mov	x21, x0
	add	x1, x1, :lo12:.L.str.392
	add	x0, sp, #8              // =8
	mov	w20, w2
	bl	strsep
	cbz	x0, .LBB257_178
// %bb.2:
	adrp	x22, .L.str.392
	adrp	x23, f2fs_tokens
	adrp	x27, .LJTI257_0
	mov	x24, x0
	add	x26, x19, #1424         // =1424
	add	x22, x22, :lo12:.L.str.392
	add	x23, x23, :lo12:f2fs_tokens
	add	x27, x27, :lo12:.LJTI257_0
	b	.LBB257_6
.LBB257_3:                              //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x2
.LBB257_4:                              //   in Loop: Header=BB257_6 Depth=1
	str	w8, [x26]
.LBB257_5:                              //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #8              // =8
	mov	x1, x22
	bl	strsep
	mov	x24, x0
	cbz	x0, .LBB257_178
.LBB257_6:                              // =>This Inner Loop Header: Depth=1
	ldrb	w8, [x24]
	cbz	w8, .LBB257_5
// %bb.7:                               //   in Loop: Header=BB257_6 Depth=1
	add	x2, sp, #24             // =24
	mov	x0, x24
	mov	x1, x23
	stp	xzr, xzr, [sp, #24]
	bl	match_token
	cmp	w0, #70                 // =70
	b.hi	.LBB257_210
// %bb.8:                               //   in Loop: Header=BB257_6 Depth=1
	mov	w8, w0
	adr	x9, .LBB257_3
	ldrh	w10, [x27, x8, lsl #1]
	add	x9, x9, x10, lsl #2
	br	x9
.LBB257_9:                              //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x80000
	b	.LBB257_4
.LBB257_10:                             //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	bl	match_strdup
	cbz	x0, .LBB257_226
// %bb.11:                              //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.393
	add	x1, x1, :lo12:.L.str.393
	mov	x24, x0
	bl	strcmp
	cbz	w0, .LBB257_152
// %bb.12:                              //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.394
	add	x1, x1, :lo12:.L.str.394
	mov	x0, x24
	bl	strcmp
	cbz	w0, .LBB257_159
// %bb.13:                              //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.130
	add	x1, x1, :lo12:.L.str.130
	mov	x0, x24
	bl	strcmp
	cbnz	w0, .LBB257_248
// %bb.14:                              //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #2
	b	.LBB257_160
.LBB257_15:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x4000000
	str	w8, [x26]
	ldrb	w8, [x21, #80]
	tbnz	w8, #0, .LBB257_5
	b	.LBB257_196
.LBB257_16:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x4
	b	.LBB257_4
.LBB257_17:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [x19, #16]
	ldrb	w8, [x8, #2180]
	tbnz	w8, #1, .LBB257_230
// %bb.18:                              //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	and	w8, w8, #0xfffffffb
	b	.LBB257_4
.LBB257_19:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x8
	b	.LBB257_4
.LBB257_20:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	and	w8, w8, #0xfffffff7
	b	.LBB257_4
.LBB257_21:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x10
	b	.LBB257_4
.LBB257_22:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	and	w8, w8, #0xffffffef
	b	.LBB257_4
.LBB257_23:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x20
	b	.LBB257_4
.LBB257_24:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	and	w8, w8, #0xffffffdf
	b	.LBB257_4
.LBB257_25:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [sp, #24]
	cbz	x8, .LBB257_27
// %bb.26:                              //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	add	x1, sp, #4              // =4
	bl	match_int
	cbnz	w0, .LBB257_196
.LBB257_27:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [sp, #4]
	mov	w0, #-22
	cmp	w8, #6                  // =6
	b.hi	.LBB257_197
// %bb.28:                              //   in Loop: Header=BB257_6 Depth=1
	mov	w9, #1
	lsl	w9, w9, w8
	mov	w10, #84
	tst	w9, w10
	b.eq	.LBB257_197
// %bb.29:                              //   in Loop: Header=BB257_6 Depth=1
	str	w8, [x19, #1448]
	b	.LBB257_5
.LBB257_30:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x40
	b	.LBB257_4
.LBB257_31:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x80
	b	.LBB257_4
.LBB257_32:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	and	w8, w8, #0xffffff7f
	b	.LBB257_4
.LBB257_33:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [sp, #24]
	cbz	x8, .LBB257_35
// %bb.34:                              //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	add	x1, sp, #4              // =4
	bl	match_int
	cbnz	w0, .LBB257_196
.LBB257_35:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x19, #1424]
	orr	w8, w8, #0x800000
	str	w8, [x19, #1424]
	ldr	w8, [sp, #4]
	str	w8, [x19, #1452]
	b	.LBB257_5
.LBB257_36:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x100
	b	.LBB257_4
.LBB257_37:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x200
	b	.LBB257_4
.LBB257_38:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	and	w8, w8, #0xfffffdff
	b	.LBB257_4
.LBB257_39:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x400
	b	.LBB257_4
.LBB257_40:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	and	w8, w8, #0xfffffbff
	b	.LBB257_4
.LBB257_41:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x800
	b	.LBB257_4
.LBB257_42:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x1000
	b	.LBB257_4
.LBB257_43:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x2000
	b	.LBB257_4
.LBB257_44:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	and	w8, w8, #0xffffdfff
	b	.LBB257_4
.LBB257_45:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	and	w8, w8, #0xfffffeff
	b	.LBB257_4
.LBB257_46:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x8000
	b	.LBB257_4
.LBB257_47:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [sp, #24]
	cbz	x8, .LBB257_49
// %bb.48:                              //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	add	x1, sp, #4              // =4
	bl	match_int
	cbnz	w0, .LBB257_196
.LBB257_49:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	tbnz	w8, #24, .LBB257_151
// %bb.50:                              //   in Loop: Header=BB257_6 Depth=1
	ldr	w9, [sp, #4]
	orr	w8, w8, #0x1000000
	str	w8, [x19, #1424]
	str	w9, [x19, #1436]
	b	.LBB257_5
.LBB257_51:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [sp, #24]
	cbz	x8, .LBB257_53
// %bb.52:                              //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	add	x1, sp, #4              // =4
	bl	match_int
	cbnz	w0, .LBB257_196
.LBB257_53:                             //   in Loop: Header=BB257_6 Depth=1
	//APP
	mrs x8, sp_el0
	//NO_APP
	ldr	x8, [x8, #1984]
	ldr	w1, [sp, #4]
	ldr	x0, [x8, #136]
	bl	make_kgid
	cmn	w0, #1                  // =1
	b.eq	.LBB257_232
// %bb.54:                              //   in Loop: Header=BB257_6 Depth=1
	str	w0, [x19, #1444]
	b	.LBB257_5
.LBB257_55:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [sp, #24]
	cbz	x8, .LBB257_57
// %bb.56:                              //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	add	x1, sp, #4              // =4
	bl	match_int
	cbnz	w0, .LBB257_196
.LBB257_57:                             //   in Loop: Header=BB257_6 Depth=1
	//APP
	mrs x8, sp_el0
	//NO_APP
	ldr	x8, [x8, #1984]
	ldr	w1, [sp, #4]
	ldr	x0, [x8, #136]
	bl	make_kuid
	cmn	w0, #1                  // =1
	b.eq	.LBB257_233
// %bb.58:                              //   in Loop: Header=BB257_6 Depth=1
	str	w0, [x19, #1440]
	b	.LBB257_5
.LBB257_59:                             //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	bl	match_strdup
	cbz	x0, .LBB257_226
// %bb.60:                              //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.399
	add	x1, x1, :lo12:.L.str.399
	mov	x24, x0
	bl	strcmp
	cbz	w0, .LBB257_153
// %bb.61:                              //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.401
	add	x1, x1, :lo12:.L.str.401
	mov	x0, x24
	bl	strcmp
	cbnz	w0, .LBB257_248
// %bb.62:                              //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #1
	str	w8, [x19, #1504]
	b	.LBB257_161
.LBB257_63:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [sp, #24]
	cbz	x8, .LBB257_65
// %bb.64:                              //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	add	x1, sp, #4              // =4
	bl	match_int
	cbnz	w0, .LBB257_196
.LBB257_65:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [sp, #4]
	sub	w9, w8, #1              // =1
	cmp	w9, #8                  // =8
	b.hs	.LBB257_234
// %bb.66:                              //   in Loop: Header=BB257_6 Depth=1
	str	w8, [x19, #1432]
	b	.LBB257_5
.LBB257_67:                             //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.403
	add	x1, x1, :lo12:.L.str.403
	b	.LBB257_145
.LBB257_68:                             //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.404
	add	x1, x1, :lo12:.L.str.404
	b	.LBB257_145
.LBB257_69:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [x21, #80]
	orr	x8, x8, #0x2000000
	str	x8, [x21, #80]
	b	.LBB257_5
.LBB257_70:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [x21, #80]
	and	x8, x8, #0xfffffffffdffffff
	str	x8, [x21, #80]
	b	.LBB257_5
.LBB257_71:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	and	w8, w8, #0xff87ffff
	b	.LBB257_4
.LBB257_72:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x100000
	b	.LBB257_4
.LBB257_73:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x200000
	b	.LBB257_4
.LBB257_74:                             //   in Loop: Header=BB257_6 Depth=1
	add	x2, sp, #24             // =24
	mov	x0, x21
	mov	w1, wzr
	b	.LBB257_78
.LBB257_75:                             //   in Loop: Header=BB257_6 Depth=1
	add	x2, sp, #24             // =24
	mov	w1, #1
	b	.LBB257_77
.LBB257_76:                             //   in Loop: Header=BB257_6 Depth=1
	add	x2, sp, #24             // =24
	mov	w1, #2
.LBB257_77:                             //   in Loop: Header=BB257_6 Depth=1
	mov	x0, x21
.LBB257_78:                             //   in Loop: Header=BB257_6 Depth=1
	bl	f2fs_set_qf_name
	cbz	w0, .LBB257_5
	b	.LBB257_197
.LBB257_79:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	x24, [x21, #1008]
	ldrb	w8, [x21, #296]
	ldr	x0, [x24, #1456]
	tst	w8, #0x7
	b.eq	.LBB257_81
// %bb.80:                              //   in Loop: Header=BB257_6 Depth=1
	cbnz	x0, .LBB257_229
.LBB257_81:                             //   in Loop: Header=BB257_6 Depth=1
	bl	kfree
	str	xzr, [x24, #1456]
	b	.LBB257_5
.LBB257_82:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	x24, [x21, #1008]
	ldrb	w8, [x21, #296]
	ldr	x0, [x24, #1464]
	tst	w8, #0x7
	b.eq	.LBB257_84
// %bb.83:                              //   in Loop: Header=BB257_6 Depth=1
	cbnz	x0, .LBB257_229
.LBB257_84:                             //   in Loop: Header=BB257_6 Depth=1
	bl	kfree
	str	xzr, [x24, #1464]
	b	.LBB257_5
.LBB257_85:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	x24, [x21, #1008]
	ldrb	w8, [x21, #296]
	ldr	x0, [x24, #1472]
	tst	w8, #0x7
	b.eq	.LBB257_87
// %bb.86:                              //   in Loop: Header=BB257_6 Depth=1
	cbnz	x0, .LBB257_229
.LBB257_87:                             //   in Loop: Header=BB257_6 Depth=1
	bl	kfree
	str	xzr, [x24, #1472]
	b	.LBB257_5
.LBB257_88:                             //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #1
	str	w8, [x19, #1480]
	b	.LBB257_5
.LBB257_89:                             //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #2
	str	w8, [x19, #1480]
	b	.LBB257_5
.LBB257_90:                             //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #4
	str	w8, [x19, #1480]
	b	.LBB257_5
.LBB257_91:                             //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	bl	match_strdup
	cbz	x0, .LBB257_226
// %bb.92:                              //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.405
	add	x1, x1, :lo12:.L.str.405
	mov	x24, x0
	bl	strcmp
	cbz	w0, .LBB257_155
// %bb.93:                              //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.394
	add	x1, x1, :lo12:.L.str.394
	mov	x0, x24
	bl	strcmp
	cbz	w0, .LBB257_162
// %bb.94:                              //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.406
	add	x1, x1, :lo12:.L.str.406
	mov	x0, x24
	bl	strcmp
	cbnz	w0, .LBB257_248
// %bb.95:                              //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #2
	str	w8, [x19, #1484]
	b	.LBB257_161
.LBB257_96:                             //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	bl	match_strdup
	cbz	x0, .LBB257_226
// %bb.97:                              //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.407
	add	x1, x1, :lo12:.L.str.407
	mov	x24, x0
	bl	strcmp
	cbz	w0, .LBB257_156
// %bb.98:                              //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.408
	add	x1, x1, :lo12:.L.str.408
	mov	x0, x24
	bl	strcmp
	cbnz	w0, .LBB257_248
// %bb.99:                              //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #1
	str	w8, [x19, #1488]
	b	.LBB257_161
.LBB257_100:                            //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	bl	match_strdup
	cbz	x0, .LBB257_226
// %bb.101:                             //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.409
	add	x1, x1, :lo12:.L.str.409
	mov	x24, x0
	bl	strcmp
	cbz	w0, .LBB257_157
// %bb.102:                             //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.410
	add	x1, x1, :lo12:.L.str.410
	mov	x0, x24
	bl	strcmp
	cbz	w0, .LBB257_163
// %bb.103:                             //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.250
	add	x1, x1, :lo12:.L.str.250
	mov	x0, x24
	bl	strcmp
	cbnz	w0, .LBB257_242
// %bb.104:                             //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #2
	b	.LBB257_164
.LBB257_105:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	x25, [x21, #1008]
	ldr	x8, [x25, #16]
	ldrb	w8, [x8, #2180]
	tbz	w8, #0, .LBB257_231
// %bb.106:                             //   in Loop: Header=BB257_6 Depth=1
	tbz	w20, #0, .LBB257_108
// %bb.107:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [x25, #1496]
	cbz	x8, .LBB257_240
.LBB257_108:                            //   in Loop: Header=BB257_6 Depth=1
	add	x2, x25, #1496          // =1496
	add	x1, sp, #24             // =24
	mov	x0, x21
	bl	fscrypt_set_test_dummy_encryption
	cbnz	w0, .LBB257_236
// %bb.109:                             //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.512
	add	x1, x1, :lo12:.L.str.512
	mov	x0, x25
	bl	f2fs_printk
	b	.LBB257_5
.LBB257_110:                            //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #1
	strb	w8, [x19, #1512]
	b	.LBB257_5
.LBB257_111:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x2000000
	b	.LBB257_4
.LBB257_112:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [sp, #24]
	cbz	x8, .LBB257_114
// %bb.113:                             //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	add	x1, sp, #4              // =4
	bl	match_int
	cbnz	w0, .LBB257_196
.LBB257_114:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [sp, #4]
	ldr	w9, [x19, #1424]
	str	w8, [x19, #1520]
	b	.LBB257_119
.LBB257_115:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [sp, #24]
	cbz	x8, .LBB257_117
// %bb.116:                             //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	add	x1, sp, #4              // =4
	bl	match_int
	cbnz	w0, .LBB257_196
.LBB257_117:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [sp, #4]
	cmp	w8, #100                // =100
	b.hi	.LBB257_196
// %bb.118:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w9, [x19, #1424]
	str	w8, [x19, #1516]
.LBB257_119:                            //   in Loop: Header=BB257_6 Depth=1
	orr	w8, w9, #0x2000000
	str	w8, [x19, #1424]
	b	.LBB257_5
.LBB257_120:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	and	w8, w8, #0xfdffffff
	b	.LBB257_4
.LBB257_121:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x10000000
	b	.LBB257_4
.LBB257_122:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	and	w8, w8, #0xefffffff
	b	.LBB257_4
.LBB257_123:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [x19, #16]
	ldrb	w8, [x8, #2181]
	tbz	w8, #5, .LBB257_136
// %bb.124:                             //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	bl	match_strdup
	cbz	x0, .LBB257_226
// %bb.125:                             //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.412
	add	x1, x1, :lo12:.L.str.412
	mov	x24, x0
	bl	strcmp
	cbz	w0, .LBB257_165
// %bb.126:                             //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.413
	add	x1, x1, :lo12:.L.str.413
	mov	w2, #3
	mov	x0, x24
	bl	strncmp
	cbz	w0, .LBB257_166
// %bb.127:                             //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.414
	add	x1, x1, :lo12:.L.str.414
	mov	w2, #4
	mov	x0, x24
	bl	strncmp
	cbz	w0, .LBB257_171
// %bb.128:                             //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.415
	add	x1, x1, :lo12:.L.str.415
	mov	x0, x24
	bl	strcmp
	cbnz	w0, .LBB257_248
// %bb.129:                             //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #3
	strb	wzr, [x19, #1526]
	strb	w8, [x19, #1524]
	b	.LBB257_161
.LBB257_130:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [x19, #16]
	ldrb	w8, [x8, #2181]
	tbz	w8, #5, .LBB257_136
// %bb.131:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [sp, #24]
	cbz	x8, .LBB257_133
// %bb.132:                             //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	add	x1, sp, #4              // =4
	bl	match_int
	cbnz	w0, .LBB257_196
.LBB257_133:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [sp, #4]
	sub	w9, w8, #3              // =3
	cmp	w9, #6                  // =6
	b.hs	.LBB257_239
// %bb.134:                             //   in Loop: Header=BB257_6 Depth=1
	strb	w8, [x19, #1525]
	b	.LBB257_5
.LBB257_135:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [x19, #16]
	ldrb	w8, [x8, #2181]
	tbnz	w8, #5, .LBB257_147
.LBB257_136:                            //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.411
	add	x1, x1, :lo12:.L.str.411
	b	.LBB257_145
.LBB257_137:                            //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #1
	strb	w8, [x19, #1527]
	b	.LBB257_5
.LBB257_138:                            //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	bl	match_strdup
	cbz	x0, .LBB257_226
// %bb.139:                             //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.418
	add	x1, x1, :lo12:.L.str.418
	mov	x24, x0
	bl	strcmp
	cbz	w0, .LBB257_158
// %bb.140:                             //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.419
	add	x1, x1, :lo12:.L.str.419
	mov	x0, x24
	bl	strcmp
	cbnz	w0, .LBB257_248
// %bb.141:                             //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #1
	str	w8, [x19, #1532]
	b	.LBB257_161
.LBB257_142:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x40000000
	b	.LBB257_4
.LBB257_143:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x26]
	orr	w8, w8, #0x8000000
	b	.LBB257_4
.LBB257_144:                            //   in Loop: Header=BB257_6 Depth=1
	adrp	x1, .L.str.420
	add	x1, x1, :lo12:.L.str.420
.LBB257_145:                            //   in Loop: Header=BB257_6 Depth=1
	mov	x0, x19
	bl	f2fs_printk
	b	.LBB257_5
.LBB257_146:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	w8, [x19, #1428]
	orr	w8, w8, #0x100
	str	w8, [x19, #1428]
	b	.LBB257_5
.LBB257_147:                            //   in Loop: Header=BB257_6 Depth=1
	add	x0, sp, #24             // =24
	bl	match_strdup
	cbz	x0, .LBB257_226
// %bb.148:                             //   in Loop: Header=BB257_6 Depth=1
	ldrb	w25, [x19, #1528]
	mov	x24, x0
	bl	strlen
	cmp	x25, #15                // =15
	b.hi	.LBB257_241
// %bb.149:                             //   in Loop: Header=BB257_6 Depth=1
	cmp	x0, #8                  // =8
	b.hs	.LBB257_241
// %bb.150:                             //   in Loop: Header=BB257_6 Depth=1
	add	x8, x19, x25, lsl #3
	add	x0, x8, #1536           // =1536
	mov	x1, x24
	bl	strcpy
	ldrb	w8, [x19, #1528]
	add	w8, w8, #1              // =1
	strb	w8, [x19, #1528]
	b	.LBB257_161
.LBB257_151:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	w2, [x19, #1436]
	adrp	x1, .L.str.396
	add	x1, x1, :lo12:.L.str.396
	mov	x0, x19
	bl	f2fs_printk
	b	.LBB257_5
.LBB257_152:                            //   in Loop: Header=BB257_6 Depth=1
	mov	w8, wzr
	b	.LBB257_160
.LBB257_153:                            //   in Loop: Header=BB257_6 Depth=1
	ldr	x8, [x19, #16]
	ldrb	w8, [x8, #2180]
	tbnz	w8, #1, .LBB257_243
// %bb.154:                             //   in Loop: Header=BB257_6 Depth=1
	mov	w8, wzr
	str	wzr, [x19, #1504]
	b	.LBB257_161
.LBB257_155:                            //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #1
	str	w8, [x19, #1484]
	b	.LBB257_161
.LBB257_156:                            //   in Loop: Header=BB257_6 Depth=1
	mov	w8, wzr
	str	wzr, [x19, #1488]
	b	.LBB257_161
.LBB257_157:                            //   in Loop: Header=BB257_6 Depth=1
	mov	w8, wzr
	b	.LBB257_164
.LBB257_158:                            //   in Loop: Header=BB257_6 Depth=1
	mov	w8, wzr
	str	wzr, [x19, #1532]
	b	.LBB257_161
.LBB257_159:                            //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #1
.LBB257_160:                            //   in Loop: Header=BB257_6 Depth=1
	str	w8, [x19, #1508]
.LBB257_161:                            //   in Loop: Header=BB257_6 Depth=1
	mov	x0, x24
	bl	kfree
	b	.LBB257_5
.LBB257_162:                            //   in Loop: Header=BB257_6 Depth=1
	mov	w8, wzr
	str	wzr, [x19, #1484]
	b	.LBB257_161
.LBB257_163:                            //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #1
.LBB257_164:                            //   in Loop: Header=BB257_6 Depth=1
	mov	x0, x24
	str	w8, [x19, #1492]
	bl	kvfree
	b	.LBB257_5
.LBB257_165:                            //   in Loop: Header=BB257_6 Depth=1
	mov	w8, wzr
	strb	wzr, [x19, #1526]
	strb	wzr, [x19, #1524]
	b	.LBB257_161
.LBB257_166:                            //   in Loop: Header=BB257_6 Depth=1
	mov	x0, x24
	str	wzr, [sp, #20]
	bl	strlen
	cmp	x0, #3                  // =3
	mov	w2, wzr
	b.eq	.LBB257_170
// %bb.167:                             //   in Loop: Header=BB257_6 Depth=1
	ldrb	w8, [x24, #3]
	cmp	w8, #58                 // =58
	b.ne	.LBB257_246
// %bb.168:                             //   in Loop: Header=BB257_6 Depth=1
	add	x0, x24, #4             // =4
	add	x2, sp, #20             // =20
	mov	w1, #10
	bl	kstrtouint
	cbnz	w0, .LBB257_248
// %bb.169:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w2, [sp, #20]
	sub	w8, w2, #3              // =3
	cmp	w8, #14                 // =14
	b.hs	.LBB257_249
.LBB257_170:                            //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #1
	b	.LBB257_177
.LBB257_171:                            //   in Loop: Header=BB257_6 Depth=1
	mov	x0, x24
	str	wzr, [sp, #20]
	bl	strlen
	cmp	x0, #4                  // =4
	mov	w2, wzr
	b.eq	.LBB257_176
// %bb.172:                             //   in Loop: Header=BB257_6 Depth=1
	ldrb	w8, [x24, #4]
	cmp	w8, #58                 // =58
	b.ne	.LBB257_246
// %bb.173:                             //   in Loop: Header=BB257_6 Depth=1
	add	x0, x24, #5             // =5
	add	x2, sp, #20             // =20
	mov	w1, #10
	bl	kstrtouint
	cbnz	w0, .LBB257_248
// %bb.174:                             //   in Loop: Header=BB257_6 Depth=1
	ldr	w25, [sp, #20]
	cbz	w25, .LBB257_250
// %bb.175:                             //   in Loop: Header=BB257_6 Depth=1
	bl	ZSTD_maxCLevel
	ldr	w2, [sp, #20]
	cmp	w25, w0
	b.hi	.LBB257_251
.LBB257_176:                            //   in Loop: Header=BB257_6 Depth=1
	mov	w8, #2
.LBB257_177:                            //   in Loop: Header=BB257_6 Depth=1
	strb	w2, [x19, #1526]
	strb	w8, [x19, #1524]
	b	.LBB257_161
.LBB257_178:
	ldr	w8, [x19, #1424]
	tbz	w8, #21, .LBB257_181
// %bb.179:
	ldr	x9, [x19, #16]
	ldrb	w9, [x9, #2180]
	tbnz	w9, #4, .LBB257_181
// %bb.180:
	adrp	x1, .L.str.516
	add	x1, x1, :lo12:.L.str.516
	b	.LBB257_194
.LBB257_181:
	ldr	x9, [x19, #1456]
	cbz	x9, .LBB257_184
// %bb.182:
	tbz	w8, #19, .LBB257_186
// %bb.183:
	and	w8, w8, #0xfff7ffff
	str	w8, [x19, #1424]
	b	.LBB257_186
.LBB257_184:
	ldr	x9, [x19, #1464]
	cbnz	x9, .LBB257_186
// %bb.185:
	ldr	x9, [x19, #1472]
	cbz	x9, .LBB257_200
.LBB257_186:
	tbz	w8, #20, .LBB257_189
// %bb.187:
	ldr	x9, [x19, #1464]
	cbz	x9, .LBB257_189
// %bb.188:
	and	w8, w8, #0xffefffff
	str	w8, [x19, #1424]
.LBB257_189:
	tbz	w8, #21, .LBB257_192
// %bb.190:
	ldr	x9, [x19, #1472]
	cbz	x9, .LBB257_192
// %bb.191:
	and	w8, w8, #0xffdfffff
	str	w8, [x19, #1424]
.LBB257_192:
	tst	w8, #0x380000
	b.eq	.LBB257_199
// %bb.193:
	adrp	x1, .L.str.517
	add	x1, x1, :lo12:.L.str.517
.LBB257_194:
	mov	x0, x19
.LBB257_195:
	bl	f2fs_printk
.LBB257_196:
	mov	w0, #-22
.LBB257_197:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB257_254
// %bb.198:
	ldp	x20, x19, [sp, #160]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]    // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]    // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]    // 16-byte Folded Reload
	ldr	x27, [sp, #96]          // 8-byte Folded Reload
	ldp	x29, x30, [sp, #80]     // 16-byte Folded Reload
	add	sp, sp, #176            // =176
	ret
.LBB257_199:
	ldr	w8, [x19, #1480]
	cbz	w8, .LBB257_213
.LBB257_200:
	ldr	x8, [x19, #16]
	ldr	w9, [x8, #2180]
	tbz	w9, #7, .LBB257_203
// %bb.201:
	ldr	w10, [x19, #1480]
	cbz	w10, .LBB257_203
// %bb.202:
	adrp	x1, .L.str.519
	add	x1, x1, :lo12:.L.str.519
	mov	x0, x19
	bl	f2fs_printk
	ldr	x8, [x19, #16]
	str	wzr, [x19, #1480]
	ldr	w9, [x8, #2180]
.LBB257_203:
	tbnz	w9, #1, .LBB257_212
// %bb.204:
	ldr	w10, [x19, #1432]
	cbz	w10, .LBB257_206
// %bb.205:
	ldr	w11, [x19, #1504]
	cmp	w11, #1                 // =1
	b.ne	.LBB257_217
.LBB257_206:
	ldr	w10, [x19, #1424]
	tbnz	w10, #23, .LBB257_214
.LBB257_207:
	tbz	w10, #25, .LBB257_219
// %bb.208:
	ldr	w10, [x19, #1504]
	cmp	w10, #1                 // =1
	b.ne	.LBB257_219
// %bb.209:
	adrp	x1, .L.str.427
	add	x1, x1, :lo12:.L.str.427
	b	.LBB257_194
.LBB257_210:
	adrp	x1, .L.str.421
	add	x1, x1, :lo12:.L.str.421
	mov	x0, x19
.LBB257_211:
	mov	x2, x24
	bl	f2fs_printk
	b	.LBB257_196
.LBB257_212:
	adrp	x1, .L.str.422
	add	x1, x1, :lo12:.L.str.422
	b	.LBB257_194
.LBB257_213:
	adrp	x1, .L.str.518
	add	x1, x1, :lo12:.L.str.518
	b	.LBB257_194
.LBB257_214:
	mov	w11, #72
	bics	wzr, w11, w9
	b.ne	.LBB257_225
// %bb.215:
	tbnz	w10, #7, .LBB257_227
// %bb.216:
	adrp	x1, .L.str.425
	add	x1, x1, :lo12:.L.str.425
	b	.LBB257_194
.LBB257_217:
	add	w8, w10, #2             // =2
	mov	w9, #1
	adrp	x1, .L.str.423
	lsl	w2, w9, w8
	add	x1, x1, :lo12:.L.str.423
.LBB257_218:
	mov	x0, x19
	bl	f2fs_printk
	b	.LBB257_196
.LBB257_219:
	ldr	w10, [x19, #1448]
	cmp	w10, #8                 // =8
	b.eq	.LBB257_221
// %bb.220:
	str	wzr, [x19, #1484]
	ldr	w9, [x8, #2180]
.LBB257_221:
	tbz	w9, #14, .LBB257_224
// %bb.222:
	ldr	x8, [x19]
	ldrb	w8, [x8, #80]
	tbnz	w8, #0, .LBB257_224
// %bb.223:
	adrp	x1, .L.str.428
	add	x1, x1, :lo12:.L.str.428
	mov	x0, x19
	bl	f2fs_printk
	mov	w0, #-30
	b	.LBB257_197
.LBB257_224:
	mov	w0, wzr
	b	.LBB257_197
.LBB257_225:
	adrp	x1, .L.str.424
	add	x1, x1, :lo12:.L.str.424
	b	.LBB257_194
.LBB257_226:
	mov	w0, #-12
	b	.LBB257_197
.LBB257_227:
	ldr	w11, [x19, #1452]
	sub	w11, w11, #6            // =6
	cmp	w11, #895               // =895
	b.lo	.LBB257_207
// %bb.228:
	adrp	x1, .L.str.426
	add	x1, x1, :lo12:.L.str.426
	mov	w2, #6
	mov	w3, #900
	b	.LBB257_235
.LBB257_229:
	adrp	x1, .L.str.499
	add	x1, x1, :lo12:.L.str.499
	mov	x0, x24
	b	.LBB257_195
.LBB257_230:
	adrp	x1, .L.str.395
	add	x1, x1, :lo12:.L.str.395
	b	.LBB257_194
.LBB257_231:
	adrp	x1, .L.str.507
	add	x1, x1, :lo12:.L.str.507
	mov	x0, x25
	b	.LBB257_195
.LBB257_232:
	ldr	w2, [sp, #4]
	adrp	x1, .L.str.398
	add	x1, x1, :lo12:.L.str.398
	b	.LBB257_218
.LBB257_233:
	ldr	w2, [sp, #4]
	adrp	x1, .L.str.397
	add	x1, x1, :lo12:.L.str.397
	b	.LBB257_218
.LBB257_234:
	mov	w9, #1
	adrp	x1, .L.str.402
	lsl	w2, w9, w8
	add	x1, x1, :lo12:.L.str.402
	mov	w3, #256
.LBB257_235:
	mov	x0, x19
	bl	f2fs_printk
	b	.LBB257_196
.LBB257_236:
	mov	w3, w0
	cmn	w0, #22                 // =22
	b.eq	.LBB257_244
// %bb.237:
	cmn	w3, #17                 // =17
	b.ne	.LBB257_245
// %bb.238:
	adrp	x1, .L.str.509
	add	x1, x1, :lo12:.L.str.509
	mov	x0, x25
	b	.LBB257_195
.LBB257_239:
	adrp	x1, .L.str.416
	add	x1, x1, :lo12:.L.str.416
	b	.LBB257_194
.LBB257_240:
	adrp	x1, .L.str.508
	add	x1, x1, :lo12:.L.str.508
	mov	x0, x25
	b	.LBB257_195
.LBB257_241:
	adrp	x1, .L.str.417
	add	x1, x1, :lo12:.L.str.417
	b	.LBB257_247
.LBB257_242:
	mov	x0, x24
	bl	kvfree
	b	.LBB257_196
.LBB257_243:
	adrp	x1, .L.str.400
	add	x1, x1, :lo12:.L.str.400
	b	.LBB257_247
.LBB257_244:
	adrp	x1, .L.str.510
	add	x1, x1, :lo12:.L.str.510
	mov	x0, x25
	b	.LBB257_211
.LBB257_245:
	adrp	x1, .L.str.511
	add	x1, x1, :lo12:.L.str.511
	mov	x0, x25
	mov	x2, x24
	bl	f2fs_printk
	b	.LBB257_196
.LBB257_246:
	adrp	x1, .L.str.513
	add	x1, x1, :lo12:.L.str.513
.LBB257_247:
	mov	x0, x19
	bl	f2fs_printk
.LBB257_248:
	mov	x0, x24
	bl	kfree
	b	.LBB257_196
.LBB257_249:
	adrp	x1, .L.str.514
	add	x1, x1, :lo12:.L.str.514
	b	.LBB257_253
.LBB257_250:
	adrp	x1, .L.str.515
	mov	w2, wzr
	b	.LBB257_252
.LBB257_251:
	adrp	x1, .L.str.515
.LBB257_252:
	add	x1, x1, :lo12:.L.str.515
.LBB257_253:
	mov	x0, x19
	bl	f2fs_printk
	b	.LBB257_248
.LBB257_254:
	bl	__stack_chk_fail
.Lfunc_end257:
	.size	parse_options, .Lfunc_end257-parse_options
	.section	.rodata,"a",@progbits
	.p2align	1
.LJTI257_0:
	.hword	(.LBB257_10-.LBB257_3)>>2
	.hword	(.LBB257_3-.LBB257_3)>>2
	.hword	(.LBB257_15-.LBB257_3)>>2
	.hword	(.LBB257_16-.LBB257_3)>>2
	.hword	(.LBB257_17-.LBB257_3)>>2
	.hword	(.LBB257_19-.LBB257_3)>>2
	.hword	(.LBB257_20-.LBB257_3)>>2
	.hword	(.LBB257_21-.LBB257_3)>>2
	.hword	(.LBB257_22-.LBB257_3)>>2
	.hword	(.LBB257_23-.LBB257_3)>>2
	.hword	(.LBB257_24-.LBB257_3)>>2
	.hword	(.LBB257_25-.LBB257_3)>>2
	.hword	(.LBB257_30-.LBB257_3)>>2
	.hword	(.LBB257_31-.LBB257_3)>>2
	.hword	(.LBB257_32-.LBB257_3)>>2
	.hword	(.LBB257_33-.LBB257_3)>>2
	.hword	(.LBB257_36-.LBB257_3)>>2
	.hword	(.LBB257_37-.LBB257_3)>>2
	.hword	(.LBB257_38-.LBB257_3)>>2
	.hword	(.LBB257_39-.LBB257_3)>>2
	.hword	(.LBB257_40-.LBB257_3)>>2
	.hword	(.LBB257_41-.LBB257_3)>>2
	.hword	(.LBB257_42-.LBB257_3)>>2
	.hword	(.LBB257_43-.LBB257_3)>>2
	.hword	(.LBB257_44-.LBB257_3)>>2
	.hword	(.LBB257_45-.LBB257_3)>>2
	.hword	(.LBB257_46-.LBB257_3)>>2
	.hword	(.LBB257_47-.LBB257_3)>>2
	.hword	(.LBB257_51-.LBB257_3)>>2
	.hword	(.LBB257_55-.LBB257_3)>>2
	.hword	(.LBB257_59-.LBB257_3)>>2
	.hword	(.LBB257_63-.LBB257_3)>>2
	.hword	(.LBB257_67-.LBB257_3)>>2
	.hword	(.LBB257_68-.LBB257_3)>>2
	.hword	(.LBB257_69-.LBB257_3)>>2
	.hword	(.LBB257_70-.LBB257_3)>>2
	.hword	(.LBB257_9-.LBB257_3)>>2
	.hword	(.LBB257_71-.LBB257_3)>>2
	.hword	(.LBB257_9-.LBB257_3)>>2
	.hword	(.LBB257_72-.LBB257_3)>>2
	.hword	(.LBB257_73-.LBB257_3)>>2
	.hword	(.LBB257_74-.LBB257_3)>>2
	.hword	(.LBB257_75-.LBB257_3)>>2
	.hword	(.LBB257_76-.LBB257_3)>>2
	.hword	(.LBB257_79-.LBB257_3)>>2
	.hword	(.LBB257_82-.LBB257_3)>>2
	.hword	(.LBB257_85-.LBB257_3)>>2
	.hword	(.LBB257_88-.LBB257_3)>>2
	.hword	(.LBB257_89-.LBB257_3)>>2
	.hword	(.LBB257_90-.LBB257_3)>>2
	.hword	(.LBB257_91-.LBB257_3)>>2
	.hword	(.LBB257_96-.LBB257_3)>>2
	.hword	(.LBB257_100-.LBB257_3)>>2
	.hword	(.LBB257_105-.LBB257_3)>>2
	.hword	(.LBB257_110-.LBB257_3)>>2
	.hword	(.LBB257_111-.LBB257_3)>>2
	.hword	(.LBB257_112-.LBB257_3)>>2
	.hword	(.LBB257_115-.LBB257_3)>>2
	.hword	(.LBB257_120-.LBB257_3)>>2
	.hword	(.LBB257_121-.LBB257_3)>>2
	.hword	(.LBB257_122-.LBB257_3)>>2
	.hword	(.LBB257_123-.LBB257_3)>>2
	.hword	(.LBB257_130-.LBB257_3)>>2
	.hword	(.LBB257_135-.LBB257_3)>>2
	.hword	(.LBB257_137-.LBB257_3)>>2
	.hword	(.LBB257_138-.LBB257_3)>>2
	.hword	(.LBB257_142-.LBB257_3)>>2
	.hword	(.LBB257_143-.LBB257_3)>>2
	.hword	(.LBB257_144-.LBB257_3)>>2
	.hword	(.LBB257_5-.LBB257_3)>>2
	.hword	(.LBB257_146-.LBB257_3)>>2
                                        // -- End function
	.text
	.p2align	2               // -- Begin function f2fs_kmalloc
	.type	f2fs_kmalloc,@function
f2fs_kmalloc:                           // @f2fs_kmalloc
// %bb.0:
	stp	x29, x30, [sp, #-16]!   // 16-byte Folded Spill
	mov	x29, sp
	bl	__kmalloc
	ldp	x29, x30, [sp], #16     // 16-byte Folded Reload
	ret
.Lfunc_end258:
	.size	f2fs_kmalloc, .Lfunc_end258-f2fs_kmalloc
                                        // -- End function
	.p2align	2               // -- Begin function limit_reserve_root
	.type	limit_reserve_root,@function
limit_reserve_root:                     // @limit_reserve_root
// %bb.0:
	stp	x29, x30, [sp, #-48]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	ldr	w9, [x0, #1236]
	ldr	w11, [x0, #1252]
	mov	w10, #19923
	movk	w10, #4194, lsl #16
	lsl	w12, w9, #1
	ldr	w8, [x0, #1424]
	umull	x10, w12, w10
	lsr	x10, x10, #38
	sub	w9, w9, w11
	cmp	w10, w9
	mov	x19, x0
	csel	w2, w10, w9, lo
	str	x21, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	tbz	w8, #24, .LBB259_3
// %bb.1:
	ldr	w9, [x19, #1436]
	cmp	w9, w2
	b.ls	.LBB259_3
// %bb.2:
	adrp	x1, .L.str.629
	add	x1, x1, :lo12:.L.str.629
	mov	x0, x19
	str	w2, [x19, #1436]
	bl	f2fs_printk
	ldr	w8, [x19, #1424]
.LBB259_3:
	tbnz	w8, #24, .LBB259_8
// %bb.4:
	adrp	x0, init_user_ns
	add	x0, x0, :lo12:init_user_ns
	mov	w1, wzr
	bl	make_kuid
	ldr	w8, [x19, #1440]
	cmp	w8, w0
	b.ne	.LBB259_7
// %bb.5:
	adrp	x0, init_user_ns
	add	x0, x0, :lo12:init_user_ns
	mov	w1, wzr
	bl	make_kgid
	ldr	w8, [x19, #1444]
	cmp	w8, w0
	b.eq	.LBB259_8
// %bb.6:
	ldr	w8, [x19, #1440]
.LBB259_7:
	adrp	x20, init_user_ns
	add	x20, x20, :lo12:init_user_ns
	mov	w1, w8
	mov	x0, x20
	bl	from_kuid_munged
	ldr	w1, [x19, #1444]
	mov	w21, w0
	mov	x0, x20
	bl	from_kgid_munged
	adrp	x1, .L.str.630
	mov	w3, w0
	add	x1, x1, :lo12:.L.str.630
	mov	x0, x19
	mov	w2, w21
	bl	f2fs_printk
.LBB259_8:
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldr	x21, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48     // 16-byte Folded Reload
	ret
.Lfunc_end259:
	.size	limit_reserve_root, .Lfunc_end259-limit_reserve_root
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_disable_checkpoint
	.type	f2fs_disable_checkpoint,@function
f2fs_disable_checkpoint:                // @f2fs_disable_checkpoint
// %bb.0:
	sub	sp, sp, #112            // =112
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #48]     // 16-byte Folded Spill
	add	x29, sp, #48            // =48
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	ldr	x8, [x0]
	mov	x19, x0
	ldr	x24, [x8, #80]
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	tbnz	w24, #0, .LBB260_8
// %bb.1:
	orr	x9, x24, #0x40000000
	adrp	x21, jiffies
	str	x9, [x8, #80]
	ldr	x8, [x21, :lo12:jiffies]
	ldr	x9, [x19, #576]
	mov	w11, #250
	str	x8, [x19, #528]
	ldr	x10, [x21, :lo12:jiffies]
	madd	x8, x9, x11, x8
	cmp	x8, x10
	b.mi	.LBB260_9
// %bb.2:
	add	x20, x19, #1664         // =1664
	mov	w22, #250
	b	.LBB260_4
.LBB260_3:                              //   in Loop: Header=BB260_4 Depth=1
	ldr	x8, [x19, #576]
	ldr	x9, [x19, #528]
	ldr	x10, [x21, :lo12:jiffies]
	mov	w23, w0
	madd	x8, x8, x22, x9
	cmp	x8, x10
	b.mi	.LBB260_10
.LBB260_4:                              // =>This Inner Loop Header: Depth=1
	mov	x0, x20
	bl	down_write
	mov	w1, #1
	mov	w4, #-1
	mov	x0, x19
	mov	w2, wzr
	mov	w3, wzr
	bl	f2fs_gc
	cmn	w0, #11                 // =11
	b.eq	.LBB260_3
// %bb.5:                               //   in Loop: Header=BB260_4 Depth=1
	cbz	w0, .LBB260_3
// %bb.6:
	cmn	w0, #61                 // =61
	mov	w23, wzr
	b.eq	.LBB260_10
// %bb.7:
	mov	w23, w0
	b	.LBB260_10
.LBB260_8:
	adrp	x1, .L.str.632
	add	x1, x1, :lo12:.L.str.632
	mov	x0, x19
	bl	f2fs_printk
	mov	w20, #-22
	b	.LBB260_20
.LBB260_9:
	mov	w23, wzr
.LBB260_10:
	ldr	x0, [x19]
	bl	sync_filesystem
	orr	w8, w0, w23
	cbz	w8, .LBB260_12
// %bb.11:
	cmp	w0, #0                  // =0
	csel	w20, w23, w0, eq
	b	.LBB260_19
.LBB260_12:
	mov	x0, x19
	bl	f2fs_get_unusable_blocks
	mov	w21, w0
	mov	x0, x19
	mov	w1, w21
	bl	f2fs_disable_cp_again
	cbz	w0, .LBB260_14
// %bb.13:
	mov	w20, #-11
	b	.LBB260_19
.LBB260_14:
	add	x22, x19, #1664         // =1664
	mov	x0, x22
	bl	down_write
	mov	w8, #64
	str	w8, [sp, #8]
	cbz	x19, .LBB260_16
// %bb.15:
	add	x8, x19, #80            // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 256
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB260_16:
	add	x1, sp, #8              // =8
	mov	x0, x19
	bl	f2fs_write_checkpoint
	mov	w20, w0
	cbnz	w0, .LBB260_18
// %bb.17:
	add	x23, x19, #2340         // =2340
	mov	x0, x23
	bl	_raw_spin_lock
	mov	x0, x23
	str	w21, [x19, #1264]
	bl	_raw_spin_unlock
.LBB260_18:
	mov	x0, x22
	bl	up_write
.LBB260_19:
	ldr	x8, [x19]
	and	x9, x24, #0xffffffff
	str	x9, [x8, #80]
.LBB260_20:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB260_22
// %bb.21:
	mov	w0, w20
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.LBB260_22:
	bl	__stack_chk_fail
.Lfunc_end260:
	.size	f2fs_disable_checkpoint, .Lfunc_end260-f2fs_disable_checkpoint
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_set_qf_name
	.type	f2fs_set_qf_name,@function
f2fs_set_qf_name:                       // @f2fs_set_qf_name
// %bb.0:
	stp	x29, x30, [sp, #-48]!   // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	ldrb	w8, [x0, #296]
	ldr	x19, [x0, #1008]
	mov	w21, w1
	mov	x29, sp
	tst	w8, #0x7
	b.eq	.LBB261_2
// %bb.1:
	add	x8, x19, w21, sxtw #3
	ldr	x8, [x8, #1456]
	cbz	x8, .LBB261_8
.LBB261_2:
	ldr	x8, [x19, #16]
	ldrb	w8, [x8, #2180]
	tbnz	w8, #7, .LBB261_7
// %bb.3:
	mov	x0, x2
	bl	match_strdup
	cbz	x0, .LBB261_9
// %bb.4:
	add	x22, x19, w21, sxtw #3
	mov	x20, x0
	ldr	x0, [x22, #1456]
	cbz	x0, .LBB261_10
// %bb.5:
	mov	x1, x20
	bl	strcmp
	cbz	w0, .LBB261_13
// %bb.6:
	adrp	x9, quotatypes
	sxtw	x8, w21
	add	x9, x9, :lo12:quotatypes
	ldr	x2, [x9, x8, lsl #3]
	adrp	x1, .L.str.502
	add	x1, x1, :lo12:.L.str.502
	mov	x0, x19
	bl	f2fs_printk
	b	.LBB261_12
.LBB261_7:
	adrp	x1, .L.str.500
	add	x1, x1, :lo12:.L.str.500
	mov	x0, x19
	bl	f2fs_printk
	mov	w21, wzr
	b	.LBB261_15
.LBB261_8:
	adrp	x1, .L.str.499
	add	x1, x1, :lo12:.L.str.499
	mov	x0, x19
	bl	f2fs_printk
	mov	w21, #-22
	b	.LBB261_15
.LBB261_9:
	adrp	x1, .L.str.501
	add	x1, x1, :lo12:.L.str.501
	mov	x0, x19
	bl	f2fs_printk
	mov	w21, #-12
	b	.LBB261_15
.LBB261_10:
	mov	w1, #47
	mov	x0, x20
	bl	strchr
	cbz	x0, .LBB261_16
// %bb.11:
	adrp	x1, .L.str.503
	add	x1, x1, :lo12:.L.str.503
	mov	x0, x19
	bl	f2fs_printk
.LBB261_12:
	mov	w21, #-22
	b	.LBB261_14
.LBB261_13:
	mov	w21, wzr
.LBB261_14:
	mov	x0, x20
	bl	kfree
.LBB261_15:
	mov	w0, w21
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48     // 16-byte Folded Reload
	ret
.LBB261_16:
	add	x8, x22, #1456          // =1456
	str	x20, [x8]
	ldr	w8, [x19, #1424]
	mov	w21, wzr
	orr	w8, w8, #0x400000
	str	w8, [x19, #1424]
	b	.LBB261_15
.Lfunc_end261:
	.size	f2fs_set_qf_name, .Lfunc_end261-f2fs_set_qf_name
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_dquot_commit
	.type	f2fs_dquot_commit,@function
f2fs_dquot_commit:                      // @f2fs_dquot_commit
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	dquot_commit
	tbz	w0, #31, .LBB262_3
// %bb.1:
	ldr	x8, [x19, #104]
	ldr	x8, [x8, #1008]
	cbz	x8, .LBB262_3
// %bb.2:
	add	x8, x8, #80             // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4096
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB262_3:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end262:
	.size	f2fs_dquot_commit, .Lfunc_end262-f2fs_dquot_commit
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_dquot_acquire
	.type	f2fs_dquot_acquire,@function
f2fs_dquot_acquire:                     // @f2fs_dquot_acquire
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	dquot_acquire
	tbz	w0, #31, .LBB263_3
// %bb.1:
	ldr	x8, [x19, #104]
	ldr	x8, [x8, #1008]
	cbz	x8, .LBB263_3
// %bb.2:
	add	x8, x8, #80             // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4096
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB263_3:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end263:
	.size	f2fs_dquot_acquire, .Lfunc_end263-f2fs_dquot_acquire
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_dquot_release
	.type	f2fs_dquot_release,@function
f2fs_dquot_release:                     // @f2fs_dquot_release
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	dquot_release
	tbz	w0, #31, .LBB264_3
// %bb.1:
	ldr	x8, [x19, #104]
	ldr	x8, [x8, #1008]
	cbz	x8, .LBB264_3
// %bb.2:
	add	x8, x8, #80             // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4096
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB264_3:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end264:
	.size	f2fs_dquot_release, .Lfunc_end264-f2fs_dquot_release
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_dquot_mark_dquot_dirty
	.type	f2fs_dquot_mark_dquot_dirty,@function
f2fs_dquot_mark_dquot_dirty:            // @f2fs_dquot_mark_dquot_dirty
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	ldr	x8, [x0, #104]
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	ldr	x19, [x8, #1008]
	bl	dquot_mark_dquot_dirty
	ldr	x8, [x19, #16]
	ldrb	w8, [x8, #2180]
	tbnz	w8, #7, .LBB265_3
// %bb.1:
	ldr	x8, [x19, #1456]
	cbnz	x8, .LBB265_3
// %bb.2:
	ldr	x8, [x19, #1464]
	cbz	x8, .LBB265_6
.LBB265_3:
	cbz	x19, .LBB265_5
.LBB265_4:
	add	x8, x19, #80            // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 1024
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB265_5:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.LBB265_6:
	cbz	x19, .LBB265_5
// %bb.7:
	ldr	x8, [x19, #1472]
	cbnz	x8, .LBB265_4
	b	.LBB265_5
.Lfunc_end265:
	.size	f2fs_dquot_mark_dquot_dirty, .Lfunc_end265-f2fs_dquot_mark_dquot_dirty
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_dquot_commit_info
	.type	f2fs_dquot_commit_info,@function
f2fs_dquot_commit_info:                 // @f2fs_dquot_commit_info
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	dquot_commit_info
	tbz	w0, #31, .LBB266_3
// %bb.1:
	ldr	x8, [x19, #1008]
	cbz	x8, .LBB266_3
// %bb.2:
	add	x8, x8, #80             // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4096
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB266_3:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end266:
	.size	f2fs_dquot_commit_info, .Lfunc_end266-f2fs_dquot_commit_info
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_get_reserved_space
	.type	f2fs_get_reserved_space,@function
f2fs_get_reserved_space:                // @f2fs_get_reserved_space
// %bb.0:
	add	x0, x0, #872            // =872
	ret
.Lfunc_end267:
	.size	f2fs_get_reserved_space, .Lfunc_end267-f2fs_get_reserved_space
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_get_projid
	.type	f2fs_get_projid,@function
f2fs_get_projid:                        // @f2fs_get_projid
// %bb.0:
	ldr	w8, [x0, #1188]
	mov	w0, wzr
	str	w8, [x1]
	ret
.Lfunc_end268:
	.size	f2fs_get_projid, .Lfunc_end268-f2fs_get_projid
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_quota_on
	.type	f2fs_quota_on,@function
f2fs_quota_on:                          // @f2fs_quota_on
// %bb.0:
	stp	x29, x30, [sp, #-48]!   // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	mov	x21, x0
	ldr	x0, [x0, #1008]
	mov	x29, sp
	ldr	x8, [x0, #16]
	ldrb	w8, [x8, #2180]
	tbnz	w8, #7, .LBB269_4
// %bb.1:
	mov	x0, x21
	mov	x19, x3
	mov	w20, w2
	mov	w22, w1
	bl	f2fs_quota_sync
	cbnz	w0, .LBB269_5
// %bb.2:
	mov	x0, x21
	mov	w1, w22
	mov	w2, w20
	mov	x3, x19
	bl	dquot_quota_on
	cbnz	w0, .LBB269_5
// %bb.3:
	ldr	x8, [x19, #8]
	ldr	x19, [x8, #48]
	add	x20, x19, #160          // =160
	mov	x0, x20
	bl	down_write
	ldr	x8, [x19, #704]
	mov	w9, #144
	mov	x0, x19
	orr	x8, x8, x9
	str	x8, [x19, #704]
	bl	f2fs_set_inode_flags
	mov	x0, x20
	bl	up_write
	mov	x0, x19
	mov	w1, wzr
	bl	f2fs_mark_inode_dirty_sync
	mov	w0, wzr
	b	.LBB269_5
.LBB269_4:
	adrp	x1, .L.str.526
	add	x1, x1, :lo12:.L.str.526
	bl	f2fs_printk
	mov	w0, #-16
.LBB269_5:
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48     // 16-byte Folded Reload
	ret
.Lfunc_end269:
	.size	f2fs_quota_on, .Lfunc_end269-f2fs_quota_on
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_quota_off
	.type	f2fs_quota_off,@function
f2fs_quota_off:                         // @f2fs_quota_off
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	str	x19, [sp, #16]          // 8-byte Folded Spill
	ldr	x19, [x0, #1008]
	mov	x29, sp
	bl	__f2fs_quota_off
	ldr	x8, [x19, #16]
	ldrb	w8, [x8, #2180]
	tbnz	w8, #7, .LBB270_3
// %bb.1:
	ldr	x8, [x19, #1456]
	cbnz	x8, .LBB270_3
// %bb.2:
	ldr	x8, [x19, #1464]
	cbz	x8, .LBB270_6
.LBB270_3:
	cbz	x19, .LBB270_5
.LBB270_4:
	add	x8, x19, #80            // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4096
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB270_5:
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.LBB270_6:
	cbz	x19, .LBB270_5
// %bb.7:
	ldr	x8, [x19, #1472]
	cbnz	x8, .LBB270_4
	b	.LBB270_5
.Lfunc_end270:
	.size	f2fs_quota_off, .Lfunc_end270-f2fs_quota_off
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_alloc_inode
	.type	f2fs_alloc_inode,@function
f2fs_alloc_inode:                       // @f2fs_alloc_inode
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	adrp	x8, f2fs_inode_cachep
	ldr	x8, [x8, :lo12:f2fs_inode_cachep]
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	mov	x20, x0
	mov	w1, #3392
	mov	x0, x8
	mov	x29, sp
	bl	kmem_cache_alloc
	mov	x19, x0
	cbz	x0, .LBB271_2
// %bb.1:
	mov	x0, x19
	bl	inode_init_once
	adrp	x1, .L.str.527
	adrp	x2, f2fs_alloc_inode.__key
	add	x0, x19, #744           // =744
	add	x1, x1, :lo12:.L.str.527
	add	x2, x2, :lo12:f2fs_alloc_inode.__key
	str	wzr, [x19, #792]
	str	wzr, [x19, #1280]
	bl	__init_rwsem
	adrp	x1, .L.str.529
	adrp	x2, f2fs_alloc_inode.__key.528
	add	x8, x19, #880           // =880
	add	x9, x19, #896           // =896
	add	x10, x19, #912          // =912
	add	x11, x19, #928          // =928
	add	x0, x19, #952           // =952
	add	x1, x1, :lo12:.L.str.529
	add	x2, x2, :lo12:f2fs_alloc_inode.__key.528
	str	wzr, [x19, #840]
	str	x8, [x19, #880]
	str	x8, [x19, #888]
	str	x9, [x19, #896]
	str	x9, [x19, #904]
	str	x10, [x19, #912]
	str	x10, [x19, #920]
	str	x11, [x19, #928]
	str	x11, [x19, #936]
	bl	__mutex_init
	adrp	x1, .L.str.531
	adrp	x2, f2fs_alloc_inode.__key.530
	add	x0, x19, #992           // =992
	add	x1, x1, :lo12:.L.str.531
	add	x2, x2, :lo12:f2fs_alloc_inode.__key.530
	bl	__init_rwsem
	adrp	x1, .L.str.533
	adrp	x2, f2fs_alloc_inode.__key.532
	add	x0, x19, #1040          // =1040
	add	x1, x1, :lo12:.L.str.533
	add	x2, x2, :lo12:f2fs_alloc_inode.__key.532
	bl	__init_rwsem
	adrp	x1, .L.str.535
	adrp	x2, f2fs_alloc_inode.__key.534
	add	x0, x19, #1088          // =1088
	add	x1, x1, :lo12:.L.str.535
	add	x2, x2, :lo12:f2fs_alloc_inode.__key.534
	bl	__init_rwsem
	adrp	x1, .L.str.537
	adrp	x2, f2fs_alloc_inode.__key.536
	add	x0, x19, #1136          // =1136
	add	x1, x1, :lo12:.L.str.537
	add	x2, x2, :lo12:f2fs_alloc_inode.__key.536
	bl	__init_rwsem
	ldr	x8, [x20, #1008]
	adrp	x1, .L.str.539
	adrp	x2, f2fs_alloc_inode.__key.538
	add	x0, x19, #1312          // =1312
	ldr	w8, [x8, #1212]
	add	x1, x1, :lo12:.L.str.539
	add	x2, x2, :lo12:f2fs_alloc_inode.__key.538
	strb	w8, [x19, #713]
	str	wzr, [x19, #1300]
	bl	__init_waitqueue_head
.LBB271_2:
	mov	x0, x19
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end271:
	.size	f2fs_alloc_inode, .Lfunc_end271-f2fs_alloc_inode
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_free_inode
	.type	f2fs_free_inode,@function
f2fs_free_inode:                        // @f2fs_free_inode
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	str	x19, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	x19, x0
	bl	fscrypt_free_inode
	adrp	x8, f2fs_inode_cachep
	ldr	x0, [x8, :lo12:f2fs_inode_cachep]
	mov	x1, x19
	bl	kmem_cache_free
	ldr	x19, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end272:
	.size	f2fs_free_inode, .Lfunc_end272-f2fs_free_inode
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_dirty_inode
	.type	f2fs_dirty_inode,@function
f2fs_dirty_inode:                       // @f2fs_dirty_inode
// %bb.0:
	stp	x29, x30, [sp, #-48]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	ldr	x8, [x0, #40]
	str	x21, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	ldr	x21, [x8, #1008]
	ldr	x8, [x0, #64]
	ldr	w9, [x21, #1176]
	cmp	x8, x9
	b.eq	.LBB273_8
// %bb.1:
	cmp	w1, #2048               // =2048
	b.eq	.LBB273_8
// %bb.2:
	ldr	w9, [x21, #1180]
	cmp	x8, x9
	b.eq	.LBB273_8
// %bb.3:
	ldr	x8, [x0, #736]
	mov	x19, x0
	tbz	w8, #2, .LBB273_5
// %bb.4:
	add	x8, x19, #736           // =736
	mov	w9, #4
	//APP
	// atomic64_andnot
	prfm	pstl1strm, [x8]
1:	ldxr	x10, [x8]
	bic	x10, x10, x9
	stxr	w11, x10, [x8]
	cbnz	w11, 1b
	//NO_APP
	ldr	x8, [x19, #40]
	ldr	x21, [x8, #1008]
.LBB273_5:
	add	x20, x21, #1024         // =1024
	mov	x0, x20
	bl	_raw_spin_lock
	ldr	x8, [x19, #736]
	tbnz	w8, #1, .LBB273_7
// %bb.6:
	add	x8, x19, #736           // =736
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 2
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
	ldr	w8, [x21, #2284]
	add	w8, w8, #1              // =1
	str	w8, [x21, #2284]
.LBB273_7:
	mov	x0, x20
	bl	_raw_spin_unlock
.LBB273_8:
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldr	x21, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48     // 16-byte Folded Reload
	ret
.Lfunc_end273:
	.size	f2fs_dirty_inode, .Lfunc_end273-f2fs_dirty_inode
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_drop_inode
	.type	f2fs_drop_inode,@function
f2fs_drop_inode:                        // @f2fs_drop_inode
// %bb.0:
	stp	x29, x30, [sp, #-48]!   // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	ldr	x8, [x0, #40]
	mov	x19, x0
	mov	x29, sp
	ldr	x8, [x8, #1008]
	ldr	x9, [x8, #80]
	tbnz	w9, #8, .LBB274_34
.LBB274_1:
	ldr	x8, [x19, #264]
	cbz	x8, .LBB274_5
// %bb.2:
	ldrb	w9, [x19, #152]
	ldr	w8, [x19, #72]
	tbnz	w9, #7, .LBB274_13
// %bb.3:
	cbz	w8, .LBB274_5
// %bb.4:
	mov	x0, x19
	bl	fscrypt_drop_inode
	mov	w20, w0
	b	.LBB274_6
.LBB274_5:
	mov	w20, #1
.LBB274_6:
	adrp	x8, __tracepoint_f2fs_drop_inode+8
	ldr	w8, [x8, :lo12:__tracepoint_f2fs_drop_inode+8]
	cmp	w8, #1                  // =1
	b.lt	.LBB274_33
// %bb.7:
	adrp	x9, cpu_number
	//APP
	.if 1 == 1
661:
	mrs x8, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x8, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	add	x9, x9, :lo12:cpu_number
	ldr	w8, [x8, x9]
	adrp	x10, __cpu_online_mask
	add	x10, x10, :lo12:__cpu_online_mask
	add	w9, w8, #63             // =63
	cmp	w8, #0                  // =0
	csel	w9, w9, w8, lt
	asr	w9, w9, #6
	ldr	x9, [x10, w9, sxtw #3]
	lsr	x8, x9, x8
	tbz	w8, #0, .LBB274_33
// %bb.8:
	//APP
	mrs x21, sp_el0
	//NO_APP
	ldr	w8, [x21, #24]
	add	w8, w8, #1              // =1
	str	w8, [x21, #24]
	//APP
	//NO_APP
	adrp	x8, __tracepoint_f2fs_drop_inode+32
	ldr	x22, [x8, :lo12:__tracepoint_f2fs_drop_inode+32]
	cbz	x22, .LBB274_10
.LBB274_9:                              // =>This Inner Loop Header: Depth=1
	ldp	x8, x0, [x22]
	mov	x1, x19
	mov	w2, w20
	blr	x8
	ldr	x8, [x22, #24]!
	cbnz	x8, .LBB274_9
.LBB274_10:
	//APP
	//NO_APP
	ldr	x8, [x21, #24]
	subs	x8, x8, #1              // =1
	str	w8, [x21, #24]
	b.eq	.LBB274_12
// %bb.11:
	ldr	x8, [x21, #24]
	cbnz	x8, .LBB274_33
.LBB274_12:
	bl	preempt_schedule_notrace
	b	.LBB274_33
.LBB274_13:
	cbnz	w8, .LBB274_26
// %bb.14:
	mov	x0, x19
	bl	is_bad_inode
	tbnz	w0, #0, .LBB274_26
// %bb.15:
	add	x8, x19, #384           // =384
	//APP
	// atomic_add
	prfm	pstl1strm, [x8]
1:	ldxr	w9, [x8]
	add	w9, w9, 1
	stxr	w10, w9, [x8]
	cbnz	w10, 1b

	//NO_APP
	add	x20, x19, #136          // =136
	mov	x0, x20
	bl	_raw_spin_unlock
	ldr	x8, [x19, #736]
	tbz	w8, #15, .LBB274_17
// %bb.16:
	mov	x0, x19
	bl	f2fs_drop_inmem_pages
.LBB274_17:
	mov	x0, x19
	bl	f2fs_destroy_extent_node
	ldr	x0, [x19, #40]
	mov	w1, #3
	mov	w2, #1
	bl	__sb_start_write
	ldr	x22, [x19, #736]
	ldr	x21, [x19, #736]
	ldr	x8, [x19, #80]
	cbz	x8, .LBB274_21
// %bb.18:
	mov	w1, #1
	mov	x0, x19
	str	xzr, [x19, #80]
	bl	f2fs_mark_inode_dirty_sync
	tbz	w22, #1, .LBB274_20
// %bb.19:
	tbz	w21, #2, .LBB274_21
.LBB274_20:
	add	x8, x19, #736           // =736
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB274_21:
	ldr	x8, [x19, #40]
	mov	x1, x19
	mov	x2, xzr
	mov	w3, wzr
	ldr	x0, [x8, #1008]
	mov	w4, wzr
	bl	f2fs_submit_merged_write_cond
	ldr	x0, [x19, #48]
	bl	truncate_inode_pages_final
	ldr	w8, [x19, #824]
	ldr	x9, [x19, #144]
	cmp	w8, #0                  // =0
	cset	w8, ne
	cmp	x8, x9, lsr #3
	b.hs	.LBB274_23
// %bb.22:
	mov	x0, x19
	bl	f2fs_truncate
.LBB274_23:
	ldr	x0, [x19, #40]
	mov	w1, #3
	bl	__sb_end_write
	ldrsb	w8, [x19, #712]
	tbnz	w8, #31, .LBB274_25
// %bb.24:
	mov	x0, x19
	bl	fscrypt_put_encryption_info
.LBB274_25:
	mov	x0, x20
	bl	_raw_spin_lock
	add	x8, x19, #384           // =384
	mov	w9, #1
	//APP
	// atomic_sub
	prfm	pstl1strm, [x8]
1:	ldxr	w10, [x8]
	sub	w10, w10, w9
	stxr	w11, w10, [x8]
	cbnz	w11, 1b

	//NO_APP
.LBB274_26:
	adrp	x8, __tracepoint_f2fs_drop_inode+8
	ldr	w8, [x8, :lo12:__tracepoint_f2fs_drop_inode+8]
	cmp	w8, #1                  // =1
	b.lt	.LBB274_32
// %bb.27:
	adrp	x9, cpu_number
	//APP
	.if 1 == 1
661:
	mrs x8, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x8, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	add	x9, x9, :lo12:cpu_number
	ldr	w8, [x8, x9]
	adrp	x10, __cpu_online_mask
	add	x10, x10, :lo12:__cpu_online_mask
	add	w9, w8, #63             // =63
	cmp	w8, #0                  // =0
	csel	w9, w9, w8, lt
	asr	w9, w9, #6
	ldr	x9, [x10, w9, sxtw #3]
	lsr	x8, x9, x8
	tbz	w8, #0, .LBB274_32
// %bb.28:
	//APP
	mrs x20, sp_el0
	//NO_APP
	ldr	w8, [x20, #24]
	add	w8, w8, #1              // =1
	str	w8, [x20, #24]
	//APP
	//NO_APP
	adrp	x8, __tracepoint_f2fs_drop_inode+32
	ldr	x21, [x8, :lo12:__tracepoint_f2fs_drop_inode+32]
	cbz	x21, .LBB274_30
.LBB274_29:                             // =>This Inner Loop Header: Depth=1
	ldp	x8, x0, [x21]
	mov	x1, x19
	mov	w2, wzr
	blr	x8
	ldr	x8, [x21, #24]!
	cbnz	x8, .LBB274_29
.LBB274_30:
	//APP
	//NO_APP
	ldr	x8, [x20, #24]
	subs	x8, x8, #1              // =1
	str	w8, [x20, #24]
	b.eq	.LBB274_43
// %bb.31:
	ldr	x8, [x20, #24]
	cbz	x8, .LBB274_43
.LBB274_32:
	mov	w20, wzr
.LBB274_33:
	mov	w0, w20
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48     // 16-byte Folded Reload
	ret
.LBB274_34:
	ldr	x9, [x19, #64]
	ldr	w10, [x8, #1176]
	cmp	x9, x10
	b.eq	.LBB274_36
// %bb.35:
	ldr	w8, [x8, #1180]
	cmp	x9, x8
	b.ne	.LBB274_1
.LBB274_36:
	adrp	x8, __tracepoint_f2fs_drop_inode+8
	ldr	w8, [x8, :lo12:__tracepoint_f2fs_drop_inode+8]
	cmp	w8, #1                  // =1
	b.lt	.LBB274_42
// %bb.37:
	adrp	x9, cpu_number
	//APP
	.if 1 == 1
661:
	mrs x8, tpidr_el1
662:
.pushsection .altinstructions,"a"
 .word 661b - .
 .word 663f - .
 .hword 11
 .byte 662b-661b
 .byte 664f-663f
.popsection
.pushsection .altinstr_replacement, "a"
663:
	mrs x8, tpidr_el2
664:
	.popsection
	.org	. - (664b-663b) + (662b-661b)
	.org	. - (662b-661b) + (664b-663b)
.endif

	//NO_APP
	add	x9, x9, :lo12:cpu_number
	ldr	w8, [x8, x9]
	adrp	x10, __cpu_online_mask
	add	x10, x10, :lo12:__cpu_online_mask
	add	w9, w8, #63             // =63
	cmp	w8, #0                  // =0
	csel	w9, w9, w8, lt
	asr	w9, w9, #6
	ldr	x9, [x10, w9, sxtw #3]
	lsr	x8, x9, x8
	tbz	w8, #0, .LBB274_42
// %bb.38:
	//APP
	mrs x20, sp_el0
	//NO_APP
	ldr	w8, [x20, #24]
	add	w8, w8, #1              // =1
	str	w8, [x20, #24]
	//APP
	//NO_APP
	adrp	x8, __tracepoint_f2fs_drop_inode+32
	ldr	x21, [x8, :lo12:__tracepoint_f2fs_drop_inode+32]
	cbz	x21, .LBB274_40
.LBB274_39:                             // =>This Inner Loop Header: Depth=1
	ldp	x8, x0, [x21]
	mov	w2, #1
	mov	x1, x19
	blr	x8
	ldr	x8, [x21, #24]!
	cbnz	x8, .LBB274_39
.LBB274_40:
	//APP
	//NO_APP
	ldr	x8, [x20, #24]
	subs	x8, x8, #1              // =1
	str	w8, [x20, #24]
	b.eq	.LBB274_44
// %bb.41:
	ldr	x8, [x20, #24]
	cbz	x8, .LBB274_44
.LBB274_42:
	mov	w20, #1
	b	.LBB274_33
.LBB274_43:
	bl	preempt_schedule_notrace
	b	.LBB274_32
.LBB274_44:
	bl	preempt_schedule_notrace
	mov	w20, #1
	b	.LBB274_33
.Lfunc_end274:
	.size	f2fs_drop_inode, .Lfunc_end274-f2fs_drop_inode
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_put_super
	.type	f2fs_put_super,@function
f2fs_put_super:                         // @f2fs_put_super
// %bb.0:
	sub	sp, sp, #96             // =96
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #48]     // 16-byte Folded Spill
	add	x29, sp, #48            // =48
	stp	x22, x21, [sp, #64]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]     // 16-byte Folded Spill
	stur	x8, [x29, #-8]
	ldr	x19, [x0, #1008]
	adrp	x1, .L.str.540
	mov	x20, x0
	add	x1, x1, :lo12:.L.str.540
	mov	x0, x19
	bl	f2fs_printk
	mov	x0, x19
	bl	f2fs_unregister_sysfs
	mov	x0, x20
	bl	f2fs_quota_off_umount
	add	x21, x19, #3152         // =3152
	mov	x0, x21
	bl	mutex_lock
	mov	x0, x19
	bl	f2fs_stop_ckpt_thread
	ldr	x8, [x19, #80]
	tbnz	w8, #0, .LBB275_2
// %bb.1:
	ldr	x8, [x19, #224]
	ldrb	w8, [x8, #132]
	tbnz	w8, #0, .LBB275_3
.LBB275_2:
	adrp	x8, .L__const.kill_f2fs_super.cpc
	add	x8, x8, :lo12:.L__const.kill_f2fs_super.cpc
	ldp	x9, x10, [x8]
	ldp	x11, x8, [x8, #16]
	add	x1, sp, #8              // =8
	mov	x0, x19
	stp	x9, x10, [sp, #8]
	stp	x11, x8, [sp, #24]
	bl	f2fs_write_checkpoint
.LBB275_3:
	mov	x0, x19
	bl	f2fs_issue_discard_timeout
	ldr	w8, [x19, #3128]
	cmp	w8, #2                  // =2
	b.lt	.LBB275_9
// %bb.4:
	ldr	x9, [x19, #3136]
	b	.LBB275_6
.LBB275_5:                              //   in Loop: Header=BB275_6 Depth=1
	subs	x8, x8, #1              // =1
	add	x9, x9, #88             // =88
	b.eq	.LBB275_12
.LBB275_6:                              // =>This Inner Loop Header: Depth=1
	ldr	x10, [x9]
	ldr	x10, [x10, #128]
	ldr	x10, [x10, #1264]
	ldr	x11, [x10, #104]
	tbnz	w11, #8, .LBB275_13
// %bb.7:                               //   in Loop: Header=BB275_6 Depth=1
	cbz	x10, .LBB275_5
// %bb.8:                               //   in Loop: Header=BB275_6 Depth=1
	ldr	w10, [x10, #2980]
	sub	w10, w10, #1            // =1
	cmp	w10, #2                 // =2
	b.hs	.LBB275_5
	b	.LBB275_13
.LBB275_9:
	ldr	x8, [x19]
	ldr	x8, [x8, #248]
	ldr	x8, [x8, #128]
	ldr	x8, [x8, #1264]
	ldr	x9, [x8, #104]
	tbnz	w9, #8, .LBB275_13
// %bb.10:
	cbz	x8, .LBB275_12
// %bb.11:
	ldr	w8, [x8, #2980]
	sub	w8, w8, #1              // =1
	cmp	w8, #2                  // =2
	b.lo	.LBB275_13
.LBB275_12:
	ldr	x8, [x19, #16]
	ldrb	w8, [x8, #2180]
	tbz	w8, #1, .LBB275_15
.LBB275_13:
	ldr	w8, [x19, #1244]
	cmp	w8, #0                  // =0
	cset	w8, ne
	orr	w8, w0, w8
	tbnz	w8, #0, .LBB275_15
// %bb.14:
	adrp	x8, .L__const.f2fs_put_super.cpc.541
	add	x8, x8, :lo12:.L__const.f2fs_put_super.cpc.541
	ldp	x9, x10, [x8]
	ldp	x11, x8, [x8, #16]
	add	x1, sp, #8              // =8
	mov	x0, x19
	stp	x9, x10, [sp, #8]
	stp	x11, x8, [sp, #24]
	bl	f2fs_write_checkpoint
.LBB275_15:
	mov	w1, #1
	mov	x0, x19
	bl	f2fs_release_ino_entry
	mov	x0, x19
	bl	f2fs_leave_shrinker
	mov	x0, x21
	bl	mutex_unlock
	mov	x0, x19
	bl	f2fs_flush_merged_writes
	mov	w1, #7
	mov	x0, x19
	bl	f2fs_wait_on_all_pages
	ldr	w8, [x19, #940]
	cbnz	w8, .LBB275_27
.LBB275_16:
	mov	x0, x19
	bl	f2fs_destroy_compress_inode
	ldr	x0, [x19, #128]
	bl	iput
	ldr	x0, [x19, #248]
	str	xzr, [x19, #128]
	bl	iput
	mov	x0, x19
	str	xzr, [x19, #248]
	bl	f2fs_destroy_stats
	mov	x0, x19
	bl	f2fs_destroy_node_manager
	mov	x0, x19
	bl	f2fs_destroy_segment_manager
	mov	x0, x19
	bl	f2fs_destroy_post_read_wq
	ldr	x0, [x19, #3392]
	bl	destroy_workqueue
	ldr	x0, [x19, #224]
	bl	kvfree
	str	xzr, [x20, #1008]
	ldr	x0, [x19, #3208]
	cbz	x0, .LBB275_18
// %bb.17:
	add	x1, x0, #128            // =128
	bl	crypto_destroy_tfm
.LBB275_18:
	ldr	x0, [x19, #16]
	bl	kfree
	ldr	w9, [x19, #3128]
	ldr	x0, [x19, #3136]
	cmp	w9, #1                  // =1
	b.lt	.LBB275_23
// %bb.19:
	mov	x21, xzr
	mov	x22, xzr
	b	.LBB275_21
.LBB275_20:                             //   in Loop: Header=BB275_21 Depth=1
	add	x22, x22, #1            // =1
	cmp	x22, w9, sxtw
	add	x21, x21, #88           // =88
	b.ge	.LBB275_23
.LBB275_21:                             // =>This Inner Loop Header: Depth=1
	ldr	x8, [x0, x21]
	cbz	x8, .LBB275_20
// %bb.22:                              //   in Loop: Header=BB275_21 Depth=1
	mov	w1, #128
	mov	x0, x8
	bl	blkdev_put
	ldr	w9, [x19, #3128]
	ldr	x0, [x19, #3136]
	b	.LBB275_20
.LBB275_23:
	bl	kvfree
	mov	x0, x19
	bl	f2fs_destroy_page_array_cache
	mov	x0, x19
	bl	f2fs_destroy_xattr_caches
	ldr	x0, [x19, #216]
	bl	mempool_destroy
	ldr	x0, [x19, #1456]
	bl	kfree
	ldr	x0, [x19, #1464]
	bl	kfree
	ldr	x0, [x19, #1472]
	bl	kfree
	ldr	x0, [x19, #1496]
	bl	kfree
	add	x0, x19, #1336          // =1336
	str	xzr, [x19, #1496]
	bl	percpu_counter_destroy
	add	x0, x19, #1384          // =1384
	bl	percpu_counter_destroy
	ldr	x0, [x19, #144]
	bl	kvfree
	ldr	x0, [x19, #152]
	bl	kvfree
	ldr	x0, [x19, #160]
	bl	kvfree
	mov	x0, x19
	bl	f2fs_destroy_bd_info
	ldr	x0, [x20, #208]
	cbz	x0, .LBB275_25
// %bb.24:
	bl	utf8_unload
	str	xzr, [x20, #208]
.LBB275_25:
	adrp	x1, .L.str.543
	add	x1, x1, :lo12:.L.str.543
	mov	x0, x19
	bl	f2fs_printk
	mov	x0, x19
	bl	kfree
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB275_35
// %bb.26:
	ldp	x20, x19, [sp, #80]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]     // 16-byte Folded Reload
	add	sp, sp, #96             // =96
	ret
.LBB275_27:
	bl	print_bdev_access_info
	adrp	x21, f2fs_dclient
	ldr	x0, [x21, :lo12:f2fs_dclient]
	cbz	x0, .LBB275_30
// %bb.28:
	bl	dsm_client_ocuppy
	cbnz	w0, .LBB275_30
// %bb.29:
	ldr	x0, [x21, :lo12:f2fs_dclient]
	adrp	x1, .L.str.542
	adrp	x2, .L__func__.f2fs_put_super
	add	x1, x1, :lo12:.L.str.542
	add	x2, x2, :lo12:.L__func__.f2fs_put_super
	mov	w3, #1752
	bl	dsm_client_record
	ldr	x0, [x21, :lo12:f2fs_dclient]
	mov	w1, #15241
	movk	w1, #14160, lsl #16
	bl	dsm_client_notify
.LBB275_30:
	mov	x0, x19
	bl	f2fs_print_raw_sb_info
	mov	x0, x19
	bl	f2fs_print_ckpt_info
	mov	x0, x19
	bl	f2fs_print_sbi_info
	//APP
	.pushsection __bug_table,"aw"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,"aMS",@progbits,1; 14472: .string "fs/hw_f2fs/super.c"; .popsection; .long 14472b - 14470b; .short 1752; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800
	//NO_APP
	cbz	x19, .LBB275_16
// %bb.31:
	add	x8, x19, #80            // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
	ldrb	w8, [x19, #3376]
	cbnz	w8, .LBB275_16
// %bb.32:
	ldr	x1, [x19, #3392]
	cbz	x1, .LBB275_16
// %bb.33:
	adrp	x8, system_state
	ldr	w8, [x8, :lo12:system_state]
	cmp	w8, #2                  // =2
	b.hi	.LBB275_16
// %bb.34:
	add	x2, x19, #3408          // =3408
	mov	w0, #8
	bl	queue_work_on
	b	.LBB275_16
.LBB275_35:
	bl	__stack_chk_fail
.Lfunc_end275:
	.size	f2fs_put_super, .Lfunc_end275-f2fs_put_super
                                        // -- End function
	.p2align	2               // -- Begin function __f2fs_sync_fs
	.type	__f2fs_sync_fs,@function
__f2fs_sync_fs:                         // @__f2fs_sync_fs
// %bb.0:
	stp	x29, x30, [sp, #-16]!   // 16-byte Folded Spill
	ldr	x8, [x0, #1008]
	mov	x29, sp
	ldrb	w8, [x8, #1232]
	tbnz	w8, #1, .LBB276_2
// %bb.1:
	bl	f2fs_sync_fs
	ldp	x29, x30, [sp], #16     // 16-byte Folded Reload
	ret
.LBB276_2:
	mov	w0, wzr
	ldp	x29, x30, [sp], #16     // 16-byte Folded Reload
	ret
.Lfunc_end276:
	.size	__f2fs_sync_fs, .Lfunc_end276-__f2fs_sync_fs
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_freeze
	.type	f2fs_freeze,@function
f2fs_freeze:                            // @f2fs_freeze
// %bb.0:
	ldrb	w8, [x0, #80]
	tbnz	w8, #0, .LBB277_5
// %bb.1:
	ldr	x8, [x0, #1008]
	ldr	x9, [x8, #224]
	ldrb	w9, [x9, #132]
	tbnz	w9, #3, .LBB277_6
// %bb.2:
	ldr	x9, [x8, #80]
	mov	w0, #-22
	tbnz	w9, #0, .LBB277_4
// %bb.3:
	ldr	x8, [x8, #648]
	cmp	x8, #0                  // =0
	csel	w0, wzr, w0, eq
.LBB277_4:
	ret
.LBB277_5:
	mov	w0, wzr
	ret
.LBB277_6:
	mov	w0, #-5
	ret
.Lfunc_end277:
	.size	f2fs_freeze, .Lfunc_end277-f2fs_freeze
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_unfreeze
	.type	f2fs_unfreeze,@function
f2fs_unfreeze:                          // @f2fs_unfreeze
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end278:
	.size	f2fs_unfreeze, .Lfunc_end278-f2fs_unfreeze
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_statfs
	.type	f2fs_statfs,@function
f2fs_statfs:                            // @f2fs_statfs
// %bb.0:
	stp	x29, x30, [sp, #-80]!   // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]     // 16-byte Folded Spill
	ldr	x20, [x0, #104]
	mov	w10, #8208
	movk	w10, #62197, lsl #16
	str	x25, [sp, #16]          // 8-byte Folded Spill
	ldr	x23, [x20, #1008]
	ldr	x8, [x20, #248]
	mov	x21, x0
	mov	x29, sp
	ldr	x9, [x23, #16]
	ldr	w11, [x23, #1260]
	ldr	w8, [x8]
	ldr	w25, [x23, #1236]
	ldr	w12, [x9, #36]
	ldr	w9, [x9, #72]
	str	x10, [x1]
	lsr	w24, w8, #12
	sub	w10, w12, w11
	ldr	w11, [x23, #1168]
	sub	w9, w10, w9
	bfxil	w24, w8, #0, #8
	lsr	w8, w8, #8
	stp	x11, x9, [x1, #8]
	ldr	w9, [x23, #1240]
	ldr	w10, [x23, #1256]
	bfi	w24, w8, #20, #12
	add	x22, x23, #2340         // =2340
	sub	w8, w25, w9
	sub	w8, w8, w10
	mov	x0, x22
	mov	x19, x1
	str	x8, [x1, #24]
	bl	_raw_spin_lock
	ldr	x8, [x19, #24]
	ldr	w9, [x23, #1264]
	mov	x0, x22
	subs	x8, x8, x9
	csel	x8, xzr, x8, lo
	str	x8, [x19, #24]
	bl	_raw_spin_unlock
	ldr	x8, [x19, #24]
	ldr	w9, [x23, #1436]
	subs	x8, x8, x9
	csel	x8, xzr, x8, lo
	str	x8, [x19, #32]
	ldr	w9, [x23, #1204]
	sub	w9, w9, #3              // =3
	cmp	w9, w25
	b.ls	.LBB279_2
// %bb.1:
	str	x25, [x19, #40]
	b	.LBB279_3
.LBB279_2:
	str	x9, [x19, #40]
	ldr	w10, [x23, #1208]
	sub	x9, x9, x10
	cmp	x9, x8
	csel	x8, x9, x8, lo
.LBB279_3:
	str	x8, [x19, #48]
	mov	w8, #255
	str	x8, [x19, #64]
	stp	w24, wzr, [x19, #56]
	ldr	x8, [x21, #48]
	ldr	x9, [x8, #736]
	tbz	w9, #27, .LBB279_22
// %bb.4:
	ldrb	w9, [x20, #296]
	tbz	w9, #5, .LBB279_22
// %bb.5:
	ldr	w8, [x8, #1188]
	mov	x0, x20
	orr	x1, x8, #0x200000000
	bl	dqget
	cmn	x0, #1, lsl #12         // =4096
	b.hi	.LBB279_22
// %bb.6:
	add	x22, x0, #96            // =96
	mov	x21, x0
	mov	x0, x22
	bl	_raw_spin_lock
	ldp	x8, x9, [x21, #136]
	cbz	x9, .LBB279_9
// %bb.7:
	cbz	x8, .LBB279_10
// %bb.8:
	cmp	x9, x8
	csel	x8, x9, x8, lt
.LBB279_9:
	cbnz	x8, .LBB279_11
	b	.LBB279_14
.LBB279_10:
	mov	x8, x9
.LBB279_11:
	ldrb	w9, [x20, #20]
	lsr	x8, x8, x9
	cbz	x8, .LBB279_14
// %bb.12:
	ldr	x10, [x19, #16]
	cmp	x10, x8
	b.ls	.LBB279_14
// %bb.13:
	ldp	x10, x11, [x21, #152]
	str	x8, [x19, #16]
	add	x10, x11, x10
	asr	x9, x10, x9
	subs	x9, x8, x9
	csel	x9, xzr, x9, lo
	stp	x9, x9, [x19, #24]
.LBB279_14:
	ldp	x8, x9, [x21, #168]
	cbz	x9, .LBB279_17
// %bb.15:
	cbz	x8, .LBB279_18
// %bb.16:
	cmp	x9, x8
	csel	x8, x9, x8, lt
.LBB279_17:
	cbnz	x8, .LBB279_19
	b	.LBB279_21
.LBB279_18:
	mov	x8, x9
.LBB279_19:
	ldr	x9, [x19, #40]
	cmp	x9, x8
	b.ls	.LBB279_21
// %bb.20:
	str	x8, [x19, #40]
	ldr	x9, [x21, #184]
	subs	x8, x8, x9
	csel	x8, xzr, x8, lo
	str	x8, [x19, #48]
.LBB279_21:
	mov	x0, x22
	bl	_raw_spin_unlock
	mov	x0, x21
	bl	dqput
.LBB279_22:
	ldp	x20, x19, [sp, #64]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]     // 16-byte Folded Reload
	ldr	x25, [sp, #16]          // 8-byte Folded Reload
	mov	w0, wzr
	ldp	x29, x30, [sp], #80     // 16-byte Folded Reload
	ret
.Lfunc_end279:
	.size	f2fs_statfs, .Lfunc_end279-f2fs_statfs
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_remount
	.type	f2fs_remount,@function
f2fs_remount:                           // @f2fs_remount
// %bb.0:
	sub	sp, sp, #400            // =400
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #304]    // 16-byte Folded Spill
	add	x29, sp, #304           // =304
	stp	x28, x27, [sp, #320]    // 16-byte Folded Spill
	stp	x26, x25, [sp, #336]    // 16-byte Folded Spill
	stp	x24, x23, [sp, #352]    // 16-byte Folded Spill
	stp	x22, x21, [sp, #368]    // 16-byte Folded Spill
	stp	x20, x19, [sp, #384]    // 16-byte Folded Spill
	str	x1, [sp, #40]           // 8-byte Folded Spill
	stur	x8, [x29, #-16]
	ldr	x20, [x0, #1008]
	stp	xzr, xzr, [sp, #272]
	stp	xzr, xzr, [sp, #256]
	stp	xzr, xzr, [sp, #240]
	stp	xzr, xzr, [sp, #224]
	stp	xzr, xzr, [sp, #208]
	stp	xzr, xzr, [sp, #192]
	stp	xzr, xzr, [sp, #176]
	stp	xzr, xzr, [sp, #160]
	stp	xzr, xzr, [sp, #144]
	stp	xzr, xzr, [sp, #128]
	stp	xzr, xzr, [sp, #112]
	stp	xzr, xzr, [sp, #96]
	stp	xzr, xzr, [sp, #80]
	stp	xzr, xzr, [sp, #64]
	stp	xzr, xzr, [sp, #48]
	ldr	w25, [x20, #1424]
	ldr	w24, [x20, #1432]
	adrp	x1, .L.str.544
	mov	x19, x0
	add	x1, x1, :lo12:.L.str.544
	mov	x0, x20
	mov	x26, x2
	add	x22, x20, #1424         // =1424
	bl	f2fs_printk
	add	x0, sp, #48             // =48
	mov	w2, #240
	mov	x1, x22
	bl	memcpy
	ldr	w28, [x20, #1480]
	ldr	x27, [x19, #80]
	str	w28, [sp, #104]
	ldr	x0, [x20, #1456]
	cbz	x0, .LBB280_5
// %bb.1:
	mov	w1, #3264
	bl	kstrdup
	str	x0, [sp, #80]
	cbz	x0, .LBB280_21
// %bb.2:
	mov	x21, x0
	ldr	x0, [x20, #1464]
	cbz	x0, .LBB280_6
.LBB280_3:
	mov	w1, #3264
	bl	kstrdup
	str	x0, [sp, #88]
	cbz	x0, .LBB280_17
// %bb.4:
	mov	x23, x0
	b	.LBB280_7
.LBB280_5:
	mov	x21, xzr
	str	xzr, [sp, #80]
	ldr	x0, [x20, #1464]
	cbnz	x0, .LBB280_3
.LBB280_6:
	mov	x23, xzr
	str	xzr, [sp, #88]
.LBB280_7:
	ldr	x0, [x20, #1472]
	str	w25, [sp, #28]          // 4-byte Folded Spill
	cbz	x0, .LBB280_10
// %bb.8:
	mov	w1, #3264
	bl	kstrdup
	mov	x25, x0
	str	x0, [sp, #96]
	cbnz	x0, .LBB280_11
// %bb.9:
	mov	w19, #2
	b	.LBB280_18
.LBB280_10:
	mov	x25, xzr
	str	xzr, [sp, #96]
.LBB280_11:
	ldr	x8, [sp, #40]           // 8-byte Folded Reload
	str	x27, [sp, #32]          // 8-byte Folded Spill
	ldrb	w8, [x8]
	tbnz	w8, #0, .LBB280_15
// %bb.12:
	ldr	x8, [x20, #80]
	tbz	w8, #4, .LBB280_15
// %bb.13:
	mov	x0, x20
	mov	w1, wzr
	bl	f2fs_commit_super
	mov	w27, w0
	adrp	x1, .L.str.545
	add	x1, x1, :lo12:.L.str.545
	mov	x0, x20
	mov	w2, w27
	bl	f2fs_printk
	cbnz	w27, .LBB280_15
// %bb.14:
	add	x8, x20, #80            // =80
	mov	w9, #16
	//APP
	// atomic64_andnot
	prfm	pstl1strm, [x8]
1:	ldxr	x10, [x8]
	bic	x10, x10, x9
	stxr	w11, x10, [x8]
	cbnz	w11, 1b
	//NO_APP
.LBB280_15:
	ldr	x8, [x20, #16]
	adrp	x27, init_user_ns
	mov	w9, #2
	mov	w10, #6
	ldr	w8, [x8, #2180]
	add	x27, x27, :lo12:init_user_ns
	mov	w11, #50
	add	x12, x20, #1484         // =1484
	tst	w8, #0x4000
	csel	w8, w10, w9, eq
	mov	x0, x27
	mov	w1, wzr
	str	w11, [x20, #1452]
	str	w8, [x20, #1448]
	str	xzr, [x12]
	str	wzr, [x20, #1492]
	strb	wzr, [x20, #1512]
	bl	make_kuid
	str	w0, [x20, #1440]
	mov	x0, x27
	mov	w1, wzr
	bl	make_kgid
	ldr	w9, [x20, #1424]
	mov	w8, #769
	strh	w8, [x20, #1524]
	mov	w8, #1
	str	w8, [x20, #1532]
	mov	w8, #9100
	movk	w8, #4096, lsl #16
	and	w9, w9, #0xfdffffff
	orr	w8, w9, w8
	ldr	x9, [x20, #16]
	str	w0, [x20, #1444]
	strb	wzr, [x20, #1528]
	str	wzr, [x20, #1508]
	str	wzr, [x20, #1520]
	str	w8, [x20, #1424]
	ldr	w9, [x9, #2180]
	orr	w8, w8, #0x30
	mov	w2, #1
	mov	x0, x19
	ubfx	w9, w9, #1, #1
	mov	x1, x26
	str	w9, [x20, #1504]
	str	w8, [x20, #1424]
	bl	parse_options
	mov	w26, w0
	cbz	w0, .LBB280_24
.LBB280_16:
	ldr	x0, [x20, #1456]
	str	w28, [x20, #1480]
	bl	kfree
	ldr	x0, [x20, #1464]
	str	x21, [x20, #1456]
	bl	kfree
	ldr	x0, [x20, #1472]
	str	x23, [x20, #1464]
	bl	kfree
	add	x1, sp, #48             // =48
	mov	w2, #240
	mov	x0, x22
	bl	memcpy
	ldr	x8, [sp, #32]           // 8-byte Folded Reload
	str	x8, [x19, #80]
	b	.LBB280_22
.LBB280_17:
	mov	w19, #1
.LBB280_18:
	mov	x0, x21
	bl	kfree
	subs	x19, x19, #1            // =1
	b.eq	.LBB280_21
// %bb.19:
	add	x8, sp, #48             // =48
	add	x20, x8, #40            // =40
.LBB280_20:                             // =>This Inner Loop Header: Depth=1
	ldr	x0, [x20], #8
	bl	kfree
	subs	x19, x19, #1            // =1
	b.ne	.LBB280_20
.LBB280_21:
	mov	w26, #-12
.LBB280_22:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-16]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB280_101
// %bb.23:
	mov	w0, w26
	ldp	x20, x19, [sp, #384]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #368]    // 16-byte Folded Reload
	ldp	x24, x23, [sp, #352]    // 16-byte Folded Reload
	ldp	x26, x25, [sp, #336]    // 16-byte Folded Reload
	ldp	x28, x27, [sp, #320]    // 16-byte Folded Reload
	ldp	x29, x30, [sp, #304]    // 16-byte Folded Reload
	add	sp, sp, #400            // =400
	ret
.LBB280_24:
	ldr	x8, [x19, #80]
	ldr	w27, [x22]
	tbz	w8, #0, .LBB280_26
// %bb.25:
	ldr	x9, [sp, #40]           // 8-byte Folded Reload
	ldrb	w9, [x9]
	tbnz	w9, #0, .LBB280_80
.LBB280_26:
	ldr	x9, [x20, #16]
	ldrb	w10, [x9, #2181]
	ldr	x9, [sp, #40]           // 8-byte Folded Reload
	ldr	w9, [x9]
	tbz	w10, #6, .LBB280_29
// %bb.27:
	tbnz	w9, #0, .LBB280_29
// %bb.28:
	mov	w26, #-30
	b	.LBB280_16
.LBB280_29:
	tbz	w8, #0, .LBB280_33
// %bb.30:
	tbnz	w9, #0, .LBB280_38
// %bb.31:
	ldrh	w9, [x19, #296]
	and	x8, x8, #0xfffffffffffffffe
	str	x8, [x19, #80]
	tst	w9, #0x1c0
	b.eq	.LBB280_36
// %bb.32:
	mov	w1, #-1
	mov	x0, x19
	bl	dquot_resume
	b	.LBB280_38
.LBB280_33:
	tbz	w9, #0, .LBB280_38
// %bb.34:
	mov	w1, #-1
	mov	w2, #64
	mov	x0, x19
	bl	dquot_disable
	tbz	w0, #31, .LBB280_38
// %bb.35:
	mov	w26, w0
	b	.LBB280_16
.LBB280_36:
	ldr	x8, [x20, #16]
	ldrb	w8, [x8, #2180]
	tbz	w8, #7, .LBB280_38
// %bb.37:
	mov	x0, x19
	bl	f2fs_enable_quotas
	mov	w26, w0
	cbnz	w0, .LBB280_16
.LBB280_38:
	ldr	w8, [x22]
	ldr	w12, [sp, #28]          // 4-byte Folded Reload
	mov	w9, #1
	ubfx	w11, w8, #27, #1
	bic	w10, w9, w12, lsr #27
	cmp	w10, w11
	b.ne	.LBB280_40
// %bb.39:
	adrp	x1, .L.str.546
	add	x1, x1, :lo12:.L.str.546
	b	.LBB280_49
.LBB280_40:
	bic	w9, w9, w12, lsr #13
	ubfx	w10, w8, #13, #1
	cmp	w9, w10
	b.ne	.LBB280_42
// %bb.41:
	adrp	x1, .L.str.547
	add	x1, x1, :lo12:.L.str.547
	b	.LBB280_49
.LBB280_42:
	ldr	w10, [x20, #1432]
	mov	w9, #1
	lsl	w9, w9, w24
	cmp	w9, #1                  // =1
	mov	w9, #1
	lsl	w10, w9, w10
	cset	w11, gt
	cmp	w10, #1                 // =1
	cset	w10, gt
	cmp	w11, w10
	b.eq	.LBB280_44
// %bb.43:
	adrp	x1, .L.str.548
	add	x1, x1, :lo12:.L.str.548
	b	.LBB280_49
.LBB280_44:
	ldr	w10, [sp, #28]          // 4-byte Folded Reload
	bic	w9, w9, w10, lsr #30
	ubfx	w10, w8, #30, #1
	cmp	w9, w10
	b.ne	.LBB280_46
// %bb.45:
	adrp	x1, .L.str.549
	add	x1, x1, :lo12:.L.str.549
	b	.LBB280_49
.LBB280_46:
	ldr	x9, [sp, #40]           // 8-byte Folded Reload
	ldr	w9, [x9]
	tbz	w8, #25, .LBB280_50
// %bb.47:
	tbz	w9, #0, .LBB280_50
// %bb.48:
	adrp	x1, .L.str.550
	add	x1, x1, :lo12:.L.str.550
.LBB280_49:
	mov	x0, x20
	bl	f2fs_printk
	mov	w26, #-22
	b	.LBB280_16
.LBB280_50:
	tbnz	w9, #0, .LBB280_52
// %bb.51:
	ldr	w8, [x20, #1508]
	cmp	w8, #1                  // =1
	b.ne	.LBB280_54
.LBB280_52:
	ldr	x8, [x20, #1712]
	cbz	x8, .LBB280_55
// %bb.53:
	mov	x0, x20
	bl	f2fs_stop_gc_thread
	mov	w8, #1
	mov	w24, wzr
	str	w8, [sp, #24]           // 4-byte Folded Spill
	b	.LBB280_56
.LBB280_54:
	ldr	x8, [x20, #1712]
	cbz	x8, .LBB280_85
.LBB280_55:
	str	wzr, [sp, #24]          // 4-byte Folded Spill
	mov	w24, wzr
.LBB280_56:
	ldr	x8, [sp, #40]           // 8-byte Folded Reload
	ldr	w8, [x8]
	tbnz	w8, #0, .LBB280_58
// %bb.57:
	ldr	w9, [x20, #1484]
	ldr	w10, [sp, #108]
	cmp	w9, w10
	b.eq	.LBB280_61
.LBB280_58:
	mov	x0, x19
	bl	sync_inodes_sb
	cbz	x20, .LBB280_60
// %bb.59:
	add	x8, x20, #80            // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 1
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 2
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB280_60:
	mov	w1, #1
	mov	x0, x19
	bl	f2fs_sync_fs
	add	x8, x20, #80            // =80
	mov	w9, #2
	//APP
	// atomic64_andnot
	prfm	pstl1strm, [x8]
1:	ldxr	x10, [x8]
	bic	x10, x10, x9
	stxr	w11, x10, [x8]
	cbnz	w11, 1b
	//NO_APP
	ldr	x8, [sp, #40]           // 8-byte Folded Reload
	ldr	w8, [x8]
.LBB280_61:
	tbnz	w8, #0, .LBB280_65
// %bb.62:
	ldr	w8, [x22]
	mov	w9, #301989888
	and	w8, w8, w9
	mov	w9, #268435456
	cmp	w8, w9
	b.ne	.LBB280_65
// %bb.63:
	mov	x0, x20
	bl	f2fs_start_ckpt_thread
	cbz	w0, .LBB280_87
// %bb.64:
	mov	w26, w0
	adrp	x1, .L.str.349
	add	x1, x1, :lo12:.L.str.349
	mov	x0, x20
	mov	w2, w26
	bl	f2fs_printk
	b	.LBB280_96
.LBB280_65:
	mov	x0, x20
	bl	f2fs_stop_ckpt_thread
	mov	w8, #1
	stp	wzr, w8, [sp, #16]      // 8-byte Folded Spill
.LBB280_66:
	ldr	x8, [sp, #40]           // 8-byte Folded Reload
	ldrb	w9, [x8]
	ldr	w8, [x22]
	tbnz	w9, #0, .LBB280_70
// %bb.67:
	tbz	w8, #10, .LBB280_70
// %bb.68:
	mov	x0, x20
	bl	f2fs_create_flush_cmd_control
	mov	w26, w0
	cbnz	w0, .LBB280_91
// %bb.69:
	str	w24, [sp, #12]          // 4-byte Folded Spill
	mov	w24, wzr
	mov	w10, #1
	b	.LBB280_71
.LBB280_70:
	and	w8, w8, #0xfffffbff
	mov	x0, x20
	mov	w1, wzr
	str	w24, [sp, #12]          // 4-byte Folded Spill
	str	w8, [x20, #1424]
	bl	f2fs_destroy_flush_cmd_control
	mov	w10, wzr
	mov	w24, #1
.LBB280_71:
	ldr	w8, [sp, #28]           // 4-byte Folded Reload
	and	w9, w27, #0x2000000
	ubfx	w8, w8, #25, #1
	cmp	w8, w9
	b.eq	.LBB280_80
// %bb.72:
	ldrb	w8, [x22, #3]
	tbnz	w8, #1, .LBB280_76
// %bb.73:
	mov	x24, x20
	ldr	x0, [x24], #80
	bl	sync_inodes_sb
	add	x22, x20, #1664         // =1664
	mov	x0, x22
	bl	down_write
	mov	x0, x20
	bl	f2fs_dirty_to_prefree
	mov	w8, #256
	//APP
	// atomic64_andnot
	prfm	pstl1strm, [x24]
1:	ldxr	x9, [x24]
	bic	x9, x9, x8
	stxr	w10, x9, [x24]
	cbnz	w10, 1b
	//NO_APP
	cbz	x20, .LBB280_75
// %bb.74:
	add	x8, x20, #80            // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 1
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
.LBB280_75:
	mov	x0, x22
	bl	up_write
	ldr	x0, [x20]
	mov	w1, #1
	bl	f2fs_sync_fs
	b	.LBB280_80
.LBB280_76:
	mov	x0, x20
	mov	w26, w10
	bl	f2fs_disable_checkpoint
	cbz	w0, .LBB280_80
// %bb.77:
	mov	w8, w26
	mov	w26, w0
	cbz	w24, .LBB280_88
// %bb.78:
	mov	x0, x20
	bl	f2fs_create_flush_cmd_control
	cbz	w0, .LBB280_90
// %bb.79:
	adrp	x1, .L.str.552
	add	x1, x1, :lo12:.L.str.552
	mov	x0, x20
	bl	f2fs_printk
	b	.LBB280_90
.LBB280_80:
	mov	x0, x21
	bl	kfree
	mov	x0, x23
	bl	kfree
	mov	x0, x25
	bl	kfree
	ldr	w8, [x20, #1424]
	ldr	x9, [x19, #80]
	mov	x0, x20
	lsl	w8, w8, #11
	lsr	x8, x8, #16
	bfi	x9, x8, #16, #1
	str	x9, [x19, #80]
	bl	limit_reserve_root
	ldr	w3, [x20, #1516]
	cbz	w3, .LBB280_84
// %bb.81:
	ldr	w2, [x20, #1236]
	cmp	w3, #100                // =100
	b.eq	.LBB280_83
// %bb.82:
	mov	w8, #34079
	movk	w8, #20971, lsl #16
	umull	x8, w2, w8
	lsr	x8, x8, #37
	mul	w2, w8, w3
.LBB280_83:
	adrp	x1, .L.str.631
	add	x1, x1, :lo12:.L.str.631
	mov	x0, x20
	str	w2, [x20, #1520]
	bl	f2fs_printk
.LBB280_84:
	ldr	x10, [sp, #40]          // 8-byte Folded Reload
	ldr	w8, [x19, #80]
	adrp	x1, .L.str.551
	add	x1, x1, :lo12:.L.str.551
	ldr	w9, [x10]
	lsr	w8, w8, #25
	mov	x0, x20
	bfi	w9, w8, #25, #1
	str	w9, [x10]
	bl	f2fs_printk
	mov	w26, wzr
	b	.LBB280_22
.LBB280_85:
	mov	x0, x20
	bl	f2fs_start_gc_thread
	mov	w26, w0
	cbnz	w0, .LBB280_16
// %bb.86:
	mov	w24, #1
	str	wzr, [sp, #24]          // 4-byte Folded Spill
	b	.LBB280_56
.LBB280_87:
	mov	w8, #1
	stp	w8, wzr, [sp, #16]      // 8-byte Folded Spill
	b	.LBB280_66
.LBB280_88:
	cbz	w8, .LBB280_90
// %bb.89:
	ldr	w8, [x20, #1424]
	mov	x0, x20
	mov	w1, wzr
	and	w8, w8, #0xfffffbff
	str	w8, [x20, #1424]
	bl	f2fs_destroy_flush_cmd_control
.LBB280_90:
	ldr	w24, [sp, #12]          // 4-byte Folded Reload
.LBB280_91:
	ldr	w8, [sp, #20]           // 4-byte Folded Reload
	cbz	w8, .LBB280_94
// %bb.92:
	mov	x0, x20
	bl	f2fs_start_ckpt_thread
	cbz	w0, .LBB280_96
// %bb.93:
	adrp	x1, .L.str.553
	add	x1, x1, :lo12:.L.str.553
	mov	x0, x20
	bl	f2fs_printk
	b	.LBB280_96
.LBB280_94:
	ldr	w8, [sp, #16]           // 4-byte Folded Reload
	cbz	w8, .LBB280_96
// %bb.95:
	mov	x0, x20
	bl	f2fs_stop_ckpt_thread
.LBB280_96:
	ldr	w8, [sp, #24]           // 4-byte Folded Reload
	cbz	w8, .LBB280_99
// %bb.97:
	mov	x0, x20
	bl	f2fs_start_gc_thread
	cbz	w0, .LBB280_16
// %bb.98:
	adrp	x1, .L.str.554
	add	x1, x1, :lo12:.L.str.554
	mov	x0, x20
	bl	f2fs_printk
	b	.LBB280_16
.LBB280_99:
	cbz	w24, .LBB280_16
// %bb.100:
	mov	x0, x20
	bl	f2fs_stop_gc_thread
	b	.LBB280_16
.LBB280_101:
	bl	__stack_chk_fail
.Lfunc_end280:
	.size	f2fs_remount, .Lfunc_end280-f2fs_remount
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_show_options
	.type	f2fs_show_options,@function
f2fs_show_options:                      // @f2fs_show_options
// %bb.0:
	stp	x29, x30, [sp, #-64]!   // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]     // 16-byte Folded Spill
	ldr	x8, [x1, #104]
	mov	x19, x0
	mov	x29, sp
	ldr	x24, [x8, #1008]
	ldrsw	x8, [x24, #1508]
	cmp	w8, #2                  // =2
	b.hi	.LBB281_2
// %bb.1:
	adrp	x9, .Lswitch.table.f2fs_show_options.637
	add	x9, x9, :lo12:.Lswitch.table.f2fs_show_options.637
	ldr	x2, [x9, x8, lsl #3]
	adrp	x1, .L.str.555
	add	x1, x1, :lo12:.L.str.555
	mov	x0, x19
	bl	seq_printf
.LBB281_2:
	ldr	w8, [x24, #1424]
	add	x23, x24, #1424         // =1424
	tbz	w8, #1, .LBB281_4
// %bb.3:
	adrp	x1, .L.str.556
	add	x1, x1, :lo12:.L.str.556
	mov	x0, x19
	bl	seq_puts
	ldr	w8, [x23]
.LBB281_4:
	tbz	w8, #26, .LBB281_6
// %bb.5:
	adrp	x1, .L.str.557
	add	x1, x1, :lo12:.L.str.557
	mov	x0, x19
	bl	seq_puts
	ldr	w8, [x23]
.LBB281_6:
	adrp	x9, .L.str.558
	adrp	x10, .L.str.559
	add	x9, x9, :lo12:.L.str.558
	add	x10, x10, :lo12:.L.str.559
	tst	w8, #0x4
	csel	x1, x10, x9, eq
	mov	x0, x19
	bl	seq_puts
	ldr	w8, [x23]
	adrp	x9, .L.str.560
	adrp	x10, .L.str.561
	add	x9, x9, :lo12:.L.str.560
	add	x10, x10, :lo12:.L.str.561
	tst	w8, #0x8
	csel	x1, x10, x9, eq
	mov	x0, x19
	bl	seq_puts
	ldr	w8, [x23]
	adrp	x9, .L.str.562
	adrp	x10, .L.str.563
	add	x9, x9, :lo12:.L.str.562
	add	x10, x10, :lo12:.L.str.563
	tst	w8, #0x10
	csel	x1, x10, x9, eq
	mov	x0, x19
	bl	seq_puts
	ldr	w8, [x23]
	adrp	x9, .L.str.564
	adrp	x10, .L.str.565
	add	x9, x9, :lo12:.L.str.564
	add	x10, x10, :lo12:.L.str.565
	tst	w8, #0x80
	csel	x1, x10, x9, eq
	mov	x0, x19
	bl	seq_puts
	ldr	w8, [x23]
	tbz	w8, #23, .LBB281_8
// %bb.7:
	ldr	w2, [x24, #1452]
	adrp	x1, .L.str.566
	add	x1, x1, :lo12:.L.str.566
	mov	x0, x19
	bl	seq_printf
	ldr	w8, [x24, #1424]
.LBB281_8:
	adrp	x9, .L.str.567
	adrp	x10, .L.str.568
	add	x9, x9, :lo12:.L.str.567
	add	x10, x10, :lo12:.L.str.568
	tst	w8, #0x20
	csel	x1, x10, x9, eq
	mov	x0, x19
	bl	seq_puts
	ldr	w8, [x23]
	tbz	w8, #6, .LBB281_10
// %bb.9:
	adrp	x1, .L.str.569
	add	x1, x1, :lo12:.L.str.569
	mov	x0, x19
	bl	seq_puts
	ldr	w8, [x23]
.LBB281_10:
	adrp	x9, .L.str.570
	adrp	x10, .L.str.571
	add	x9, x9, :lo12:.L.str.570
	add	x10, x10, :lo12:.L.str.571
	tst	w8, #0x100
	csel	x1, x10, x9, eq
	mov	x0, x19
	bl	seq_puts
	ldr	w8, [x24, #1424]
	adrp	x9, .L.str.572
	adrp	x10, .L.str.573
	add	x9, x9, :lo12:.L.str.572
	add	x10, x10, :lo12:.L.str.573
	tst	w8, #0x200
	csel	x1, x10, x9, eq
	mov	x0, x19
	bl	seq_puts
	ldr	x8, [x24]
	ldrb	w8, [x8, #80]
	tbnz	w8, #0, .LBB281_13
// %bb.11:
	ldrb	w8, [x23, #1]
	tbz	w8, #2, .LBB281_13
// %bb.12:
	adrp	x1, .L.str.574
	add	x1, x1, :lo12:.L.str.574
	mov	x0, x19
	bl	seq_puts
.LBB281_13:
	ldr	w8, [x23]
	tbz	w8, #11, .LBB281_15
// %bb.14:
	adrp	x1, .L.str.575
	add	x1, x1, :lo12:.L.str.575
	mov	x0, x19
	bl	seq_puts
	ldr	w8, [x23]
.LBB281_15:
	tbz	w8, #12, .LBB281_17
// %bb.16:
	adrp	x1, .L.str.576
	add	x1, x1, :lo12:.L.str.576
	mov	x0, x19
	bl	seq_puts
	ldr	w8, [x23]
.LBB281_17:
	adrp	x9, .L.str.577
	adrp	x10, .L.str.578
	add	x9, x9, :lo12:.L.str.577
	add	x10, x10, :lo12:.L.str.578
	tst	w8, #0x2000
	csel	x1, x10, x9, eq
	mov	x0, x19
	bl	seq_puts
	ldrb	w8, [x23, #1]
	tbz	w8, #7, .LBB281_19
// %bb.18:
	adrp	x1, .L.str.579
	add	x1, x1, :lo12:.L.str.579
	mov	x0, x19
	bl	seq_puts
.LBB281_19:
	adrp	x1, .L.str.580
	add	x1, x1, :lo12:.L.str.580
	mov	x0, x19
	bl	seq_puts
	ldr	w8, [x24, #1504]
	cbz	w8, .LBB281_22
// %bb.20:
	cmp	w8, #1                  // =1
	b.ne	.LBB281_24
// %bb.21:
	adrp	x1, .L.str.401
	add	x1, x1, :lo12:.L.str.401
	b	.LBB281_23
.LBB281_22:
	adrp	x1, .L.str.399
	add	x1, x1, :lo12:.L.str.399
.LBB281_23:
	mov	x0, x19
	bl	seq_puts
.LBB281_24:
	ldr	w8, [x23]
	tbz	w8, #31, .LBB281_26
// %bb.25:
	adrp	x1, .L.str.581
	add	x1, x1, :lo12:.L.str.581
	mov	x0, x19
	bl	seq_puts
.LBB281_26:
	ldr	w2, [x24, #1448]
	adrp	x1, .L.str.582
	add	x1, x1, :lo12:.L.str.582
	mov	x0, x19
	bl	seq_printf
	ldrb	w8, [x24, #1427]
	tbz	w8, #0, .LBB281_28
// %bb.27:
	ldr	w1, [x24, #1440]
	ldr	w20, [x24, #1436]
	adrp	x21, init_user_ns
	add	x21, x21, :lo12:init_user_ns
	mov	x0, x21
	bl	from_kuid_munged
	ldr	w1, [x24, #1444]
	mov	w22, w0
	mov	x0, x21
	bl	from_kgid_munged
	adrp	x1, .L.str.583
	mov	w4, w0
	add	x1, x1, :lo12:.L.str.583
	mov	x0, x19
	mov	w2, w20
	mov	w3, w22
	bl	seq_printf
.LBB281_28:
	ldr	w2, [x24, #1432]
	cbz	w2, .LBB281_30
// %bb.29:
	adrp	x1, .L.str.584
	add	x1, x1, :lo12:.L.str.584
	mov	x0, x19
	bl	seq_printf
.LBB281_30:
	ldr	w8, [x23]
	tbnz	w8, #22, .LBB281_38
// %bb.31:
	tbnz	w8, #19, .LBB281_39
.LBB281_32:
	tbnz	w8, #20, .LBB281_40
.LBB281_33:
	tbz	w8, #21, .LBB281_35
.LBB281_34:
	adrp	x1, .L.str.588
	add	x1, x1, :lo12:.L.str.588
	mov	x0, x19
	bl	seq_puts
.LBB281_35:
	ldr	x8, [x24]
	adrp	x2, .L.str.256
	add	x2, x2, :lo12:.L.str.256
	ldr	x21, [x8, #1008]
	ldr	w8, [x21, #1480]
	cmp	w8, #4                  // =4
	b.hi	.LBB281_43
// %bb.36:
	adrp	x9, .LJTI281_0
	add	x9, x9, :lo12:.LJTI281_0
	adr	x10, .LBB281_37
	ldrb	w11, [x9, x8]
	add	x10, x10, x11, lsl #2
	br	x10
.LBB281_37:
	adrp	x2, .L.str.597
	add	x2, x2, :lo12:.L.str.597
	b	.LBB281_43
.LBB281_38:
	adrp	x1, .L.str.585
	add	x1, x1, :lo12:.L.str.585
	mov	x0, x19
	bl	seq_puts
	ldr	w8, [x23]
	tbz	w8, #19, .LBB281_32
.LBB281_39:
	adrp	x1, .L.str.586
	add	x1, x1, :lo12:.L.str.586
	mov	x0, x19
	bl	seq_puts
	ldr	w8, [x23]
	tbz	w8, #20, .LBB281_33
.LBB281_40:
	adrp	x1, .L.str.587
	add	x1, x1, :lo12:.L.str.587
	mov	x0, x19
	bl	seq_puts
	ldr	w8, [x23]
	tbnz	w8, #21, .LBB281_34
	b	.LBB281_35
.LBB281_41:
	adrp	x2, .L.str.598
	add	x2, x2, :lo12:.L.str.598
	b	.LBB281_43
.LBB281_42:
	adrp	x2, .L.str.599
	add	x2, x2, :lo12:.L.str.599
.LBB281_43:
	adrp	x1, .L.str.600
	add	x1, x1, :lo12:.L.str.600
	mov	x0, x19
	bl	seq_printf
.LBB281_44:
	ldr	x20, [x21, #1456]
	cbz	x20, .LBB281_46
// %bb.45:
	mov	w1, #44
	mov	x0, x19
	bl	seq_putc
	adrp	x1, .L.str.601
	adrp	x2, .L.str.604
	add	x1, x1, :lo12:.L.str.601
	add	x2, x2, :lo12:.L.str.604
	mov	x0, x19
	bl	seq_escape
	mov	w1, #61
	mov	x0, x19
	bl	seq_putc
	adrp	x2, .L.str.605
	add	x2, x2, :lo12:.L.str.605
	mov	x0, x19
	mov	x1, x20
	bl	seq_escape
.LBB281_46:
	ldr	x20, [x21, #1464]
	cbz	x20, .LBB281_48
// %bb.47:
	mov	w1, #44
	mov	x0, x19
	bl	seq_putc
	adrp	x1, .L.str.602
	adrp	x2, .L.str.604
	add	x1, x1, :lo12:.L.str.602
	add	x2, x2, :lo12:.L.str.604
	mov	x0, x19
	bl	seq_escape
	mov	w1, #61
	mov	x0, x19
	bl	seq_putc
	adrp	x2, .L.str.605
	add	x2, x2, :lo12:.L.str.605
	mov	x0, x19
	mov	x1, x20
	bl	seq_escape
.LBB281_48:
	ldr	x20, [x21, #1472]
	cbz	x20, .LBB281_50
// %bb.49:
	mov	w1, #44
	mov	x0, x19
	bl	seq_putc
	adrp	x1, .L.str.603
	adrp	x2, .L.str.604
	add	x1, x1, :lo12:.L.str.603
	add	x2, x2, :lo12:.L.str.604
	mov	x0, x19
	bl	seq_escape
	mov	w1, #61
	mov	x0, x19
	bl	seq_putc
	adrp	x2, .L.str.605
	add	x2, x2, :lo12:.L.str.605
	mov	x0, x19
	mov	x1, x20
	bl	seq_escape
.LBB281_50:
	ldr	w8, [x24, #1484]
	cmp	w8, #1                  // =1
	b.eq	.LBB281_53
// %bb.51:
	cmp	w8, #2                  // =2
	b.ne	.LBB281_55
// %bb.52:
	adrp	x2, .L.str.406
	add	x2, x2, :lo12:.L.str.406
	b	.LBB281_54
.LBB281_53:
	adrp	x2, .L.str.405
	add	x2, x2, :lo12:.L.str.405
.LBB281_54:
	adrp	x1, .L.str.589
	add	x1, x1, :lo12:.L.str.589
	mov	x0, x19
	bl	seq_printf
.LBB281_55:
	ldrb	w8, [x24, #1512]
	cbz	w8, .LBB281_57
// %bb.56:
	adrp	x1, .L.str.590
	add	x1, x1, :lo12:.L.str.590
	mov	x0, x19
	bl	seq_puts
.LBB281_57:
	ldr	x2, [x24]
	mov	w1, #44
	mov	x0, x19
	bl	fscrypt_show_test_dummy_encryption
	ldr	w8, [x24, #1488]
	cbz	w8, .LBB281_60
// %bb.58:
	cmp	w8, #1                  // =1
	b.ne	.LBB281_62
// %bb.59:
	adrp	x2, .L.str.408
	add	x2, x2, :lo12:.L.str.408
	b	.LBB281_61
.LBB281_60:
	adrp	x2, .L.str.407
	add	x2, x2, :lo12:.L.str.407
.LBB281_61:
	adrp	x1, .L.str.591
	add	x1, x1, :lo12:.L.str.591
	mov	x0, x19
	bl	seq_printf
.LBB281_62:
	ldr	w8, [x23]
	tbz	w8, #25, .LBB281_64
// %bb.63:
	ldr	w2, [x24, #1520]
	adrp	x1, .L.str.592
	add	x1, x1, :lo12:.L.str.592
	mov	x0, x19
	bl	seq_printf
	ldr	w8, [x24, #1424]
.LBB281_64:
	adrp	x9, .L.str.593
	adrp	x10, .L.str.594
	add	x9, x9, :lo12:.L.str.593
	add	x10, x10, :lo12:.L.str.594
	tst	w8, #0x10000000
	csel	x1, x10, x9, eq
	mov	x0, x19
	bl	seq_puts
	ldrsw	x8, [x24, #1492]
	cmp	w8, #2                  // =2
	b.hi	.LBB281_66
// %bb.65:
	adrp	x9, .Lswitch.table.f2fs_show_options.638
	add	x9, x9, :lo12:.Lswitch.table.f2fs_show_options.638
	ldr	x2, [x9, x8, lsl #3]
	adrp	x1, .L.str.595
	add	x1, x1, :lo12:.L.str.595
	mov	x0, x19
	bl	seq_printf
.LBB281_66:
	ldr	x8, [x24]
	ldr	x22, [x8, #1008]
	ldr	x8, [x22, #16]
	ldrb	w8, [x8, #2181]
	tbz	w8, #5, .LBB281_84
// %bb.67:
	ldrsb	x8, [x22, #1524]
	cmp	x8, #3                  // =3
	b.hi	.LBB281_69
// %bb.68:
	adrp	x9, .Lswitch.table.f2fs_show_options
	add	x9, x9, :lo12:.Lswitch.table.f2fs_show_options
	ldr	x2, [x9, x8, lsl #3]
	b	.LBB281_70
.LBB281_69:
	adrp	x2, .L.str.256
	add	x2, x2, :lo12:.L.str.256
.LBB281_70:
	adrp	x1, .L.str.606
	add	x1, x1, :lo12:.L.str.606
	mov	x0, x19
	bl	seq_printf
	ldrb	w2, [x22, #1526]
	cbz	w2, .LBB281_72
// %bb.71:
	adrp	x1, .L.str.607
	add	x1, x1, :lo12:.L.str.607
	mov	x0, x19
	bl	seq_printf
.LBB281_72:
	ldrb	w2, [x22, #1525]
	adrp	x1, .L.str.608
	add	x1, x1, :lo12:.L.str.608
	mov	x0, x19
	bl	seq_printf
	ldrb	w8, [x22, #1528]
	cbz	w8, .LBB281_75
// %bb.73:
	adrp	x21, .L.str.609
	mov	x24, xzr
	add	x20, x22, #1536         // =1536
	add	x21, x21, :lo12:.L.str.609
.LBB281_74:                             // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	mov	x1, x21
	mov	x2, x20
	bl	seq_printf
	ldrb	w8, [x22, #1528]
	add	x24, x24, #1            // =1
	add	x20, x20, #8            // =8
	cmp	x24, x8
	b.lo	.LBB281_74
.LBB281_75:
	ldrb	w8, [x22, #1527]
	cbz	w8, .LBB281_77
// %bb.76:
	adrp	x1, .L.str.610
	add	x1, x1, :lo12:.L.str.610
	mov	x0, x19
	bl	seq_puts
.LBB281_77:
	ldr	w8, [x22, #1532]
	cbz	w8, .LBB281_80
// %bb.78:
	cmp	w8, #1                  // =1
	b.ne	.LBB281_82
// %bb.79:
	adrp	x2, .L.str.419
	add	x2, x2, :lo12:.L.str.419
	b	.LBB281_81
.LBB281_80:
	adrp	x2, .L.str.418
	add	x2, x2, :lo12:.L.str.418
.LBB281_81:
	adrp	x1, .L.str.611
	add	x1, x1, :lo12:.L.str.611
	mov	x0, x19
	bl	seq_printf
.LBB281_82:
	ldrb	w8, [x22, #1427]
	tbz	w8, #6, .LBB281_84
// %bb.83:
	adrp	x1, .L.str.612
	add	x1, x1, :lo12:.L.str.612
	mov	x0, x19
	bl	seq_puts
.LBB281_84:
	ldrb	w8, [x23, #3]
	tbz	w8, #3, .LBB281_86
// %bb.85:
	adrp	x1, .L.str.596
	add	x1, x1, :lo12:.L.str.596
	mov	x0, x19
	bl	seq_puts
.LBB281_86:
	ldp	x20, x19, [sp, #48]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]     // 16-byte Folded Reload
	mov	w0, wzr
	ldp	x29, x30, [sp], #64     // 16-byte Folded Reload
	ret
.Lfunc_end281:
	.size	f2fs_show_options, .Lfunc_end281-f2fs_show_options
	.section	.rodata,"a",@progbits
.LJTI281_0:
	.byte	(.LBB281_44-.LBB281_37)>>2
	.byte	(.LBB281_37-.LBB281_37)>>2
	.byte	(.LBB281_41-.LBB281_37)>>2
	.byte	(.LBB281_43-.LBB281_37)>>2
	.byte	(.LBB281_42-.LBB281_37)>>2
                                        // -- End function
	.text
	.p2align	2               // -- Begin function f2fs_quota_read
	.type	f2fs_quota_read,@function
f2fs_quota_read:                        // @f2fs_quota_read
// %bb.0:
	sub	sp, sp, #112            // =112
	stp	x29, x30, [sp, #16]     // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]     // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]     // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]     // 16-byte Folded Spill
	add	x8, x0, w1, sxtw #3
	ldr	x8, [x8, #352]
	add	x29, sp, #16            // =16
	ldr	x9, [x8, #80]
	subs	x10, x9, x4
	b.ge	.LBB282_2
// %bb.1:
	mov	x28, xzr
	b	.LBB282_27
.LBB282_2:
	add	x11, x4, x3
	cmp	x11, x9
	csel	x28, x10, x3, hi
	cbz	x28, .LBB282_27
// %bb.3:
	ldr	x23, [x8, #48]
	ldr	x8, [x0, #24]
	mov	x20, x0
	mov	x22, x2
	lsr	x9, x4, #12
	sub	w10, w8, #1             // =1
	and	w10, w10, w4
	sxtw	x19, w10
	mov	x21, x28
	str	w1, [sp, #4]            // 4-byte Folded Spill
	//APP
	mrs x27, sp_el0
	//NO_APP
.LBB282_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB282_5 Depth 2
	sub	x8, x8, x19
	cmp	x8, x21
	csel	x26, x8, x21, lo
	mov	w24, w9
.LBB282_5:                              //   Parent Loop BB282_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	w2, #3136
	mov	x0, x23
	mov	x1, x24
	bl	read_cache_page_gfp
	mov	x25, x0
	cmn	x0, #4095               // =4095
	b.lo	.LBB282_8
// %bb.6:                               //   in Loop: Header=BB282_5 Depth=2
	cmn	x25, #12                // =12
	b.ne	.LBB282_19
// %bb.7:                               //   in Loop: Header=BB282_5 Depth=2
	mov	w1, #5
	mov	w0, wzr
	bl	congestion_wait
	b	.LBB282_5
.LBB282_8:                              //   in Loop: Header=BB282_5 Depth=2
	ldr	x8, [x25, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x25, x9, eq
	ldr	x9, [x8]
	str	x9, [sp, #8]
	ldr	x9, [sp, #8]
	tbnz	w9, #0, .LBB282_10
// %bb.9:                               //   in Loop: Header=BB282_5 Depth=2
	//APP
	// atomic64_fetch_or_acquire
	prfm	pstl1strm, [x8]
1:	ldaxr	x9, [x8]
	orr	x10, x9, 1
	stxr	w11, x10, [x8]
	cbnz	w11, 1b
	
	//NO_APP
	tbz	w9, #0, .LBB282_11
.LBB282_10:                             //   in Loop: Header=BB282_5 Depth=2
	mov	x0, x25
	bl	__lock_page
.LBB282_11:                             //   in Loop: Header=BB282_5 Depth=2
	ldr	x8, [x25, #24]
	cmp	x8, x23
	b.eq	.LBB282_13
// %bb.12:                              //   in Loop: Header=BB282_5 Depth=2
	mov	x0, x25
	bl	f2fs_put_page
	b	.LBB282_5
.LBB282_13:                             //   in Loop: Header=BB282_4 Depth=1
	ldr	x8, [x25, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x25, x9, eq
	ldr	x8, [x8]
	tbz	w8, #2, .LBB282_21
// %bb.14:                              //   in Loop: Header=BB282_4 Depth=1
	//APP
	dmb ishld
	//NO_APP
	ldr	w8, [x27, #24]
	mov	x9, #134217728
	movk	x9, #64, lsl #32
	add	x9, x9, x25, lsl #6
	add	w8, w8, #1              // =1
	str	w8, [x27, #24]
	//APP
	//NO_APP
	ldr	w8, [x27, #2800]
	sxtw	x26, w26
	mov	x0, x22
	mov	x2, x26
	add	w8, w8, #1              // =1
	str	w8, [x27, #2800]
	//APP
	//NO_APP
	and	x8, x9, #0xfffffffffffff000
	add	x8, x8, x19
	mov	x9, #-549755813888
	add	x1, x8, x9
	bl	memcpy
	//APP
	//NO_APP
	ldr	w8, [x27, #2800]
	sub	w8, w8, #1              // =1
	str	w8, [x27, #2800]
	//APP
	//NO_APP
	ldr	x8, [x27, #24]
	subs	x8, x8, #1              // =1
	str	w8, [x27, #24]
	b.eq	.LBB282_18
// %bb.15:                              //   in Loop: Header=BB282_4 Depth=1
	ldr	x8, [x27, #24]
	cbz	x8, .LBB282_18
.LBB282_16:                             //   in Loop: Header=BB282_4 Depth=1
	mov	x0, x25
	bl	f2fs_put_page
	subs	x21, x21, x26
	b.eq	.LBB282_27
// %bb.17:                              //   in Loop: Header=BB282_4 Depth=1
	ldr	x8, [x20, #24]
	mov	x19, xzr
	add	w9, w24, #1             // =1
	add	x22, x22, x26
	b	.LBB282_4
.LBB282_18:                             //   in Loop: Header=BB282_4 Depth=1
	bl	preempt_schedule
	b	.LBB282_16
.LBB282_19:
	ldr	x8, [x20, #1008]
	cbz	x8, .LBB282_23
// %bb.20:
	add	x8, x8, #80             // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4096
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
	ldr	x0, [x20, #1008]
	b	.LBB282_24
.LBB282_21:
	mov	x0, x25
	bl	f2fs_put_page
	ldr	x8, [x20, #1008]
	cbz	x8, .LBB282_25
// %bb.22:
	add	x8, x8, #80             // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4096
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
	ldr	x0, [x20, #1008]
	b	.LBB282_26
.LBB282_23:
	mov	x0, xzr
.LBB282_24:
	ldr	w2, [sp, #4]            // 4-byte Folded Reload
	adrp	x1, .L.str.613
	add	x1, x1, :lo12:.L.str.613
	mov	x3, x25
	bl	f2fs_printk
	mov	x28, x25
	b	.LBB282_27
.LBB282_25:
	mov	x0, xzr
.LBB282_26:
	ldr	w2, [sp, #4]            // 4-byte Folded Reload
	adrp	x1, .L.str.614
	add	x1, x1, :lo12:.L.str.614
	bl	f2fs_printk
	mov	x28, #-5
.LBB282_27:
	mov	x0, x28
	ldp	x20, x19, [sp, #96]     // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]     // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]     // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]     // 16-byte Folded Reload
	add	sp, sp, #112            // =112
	ret
.Lfunc_end282:
	.size	f2fs_quota_read, .Lfunc_end282-f2fs_quota_read
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_quota_write
	.type	f2fs_quota_write,@function
f2fs_quota_write:                       // @f2fs_quota_write
// %bb.0:
	sub	sp, sp, #144            // =144
	adrp	x8, __stack_chk_guard
	ldr	x8, [x8, :lo12:__stack_chk_guard]
	stp	x29, x30, [sp, #48]     // 16-byte Folded Spill
	add	x29, sp, #48            // =48
	stp	x28, x27, [sp, #64]     // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]     // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]     // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]    // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]    // 16-byte Folded Spill
	add	x9, x0, w1, sxtw #3
	stur	x8, [x29, #-8]
	ldr	x19, [x9, #352]
	ldr	x8, [x0, #24]
	mov	x26, x3
	ldr	x25, [x19, #48]
	ldr	x22, [x25, #120]
	stur	xzr, [x29, #-16]
	str	xzr, [sp, #24]
	cbz	x3, .LBB283_14
// %bb.1:
	mov	x23, x4
	sub	w9, w8, #1              // =1
	and	w9, w9, w23
	mov	x24, x2
	mov	x21, x0
	sxtw	x20, w9
	mov	x28, x26
	str	w1, [sp, #4]            // 4-byte Folded Spill
	stp	x19, x26, [sp, #8]      // 16-byte Folded Spill
	//APP
	mrs x19, sp_el0
	//NO_APP
.LBB283_2:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB283_3 Depth 2
	sub	x8, x8, x20
	cmp	x8, x28
	csel	x26, x8, x28, lo
.LBB283_3:                              //   Parent Loop BB283_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x22, #40]
	sub	x5, x29, #16            // =16
	add	x6, sp, #24             // =24
	mov	x0, xzr
	mov	x1, x25
	mov	x2, x23
	mov	w3, w26
	mov	w4, wzr
	blr	x8
	cbz	w0, .LBB283_6
// %bb.4:                               //   in Loop: Header=BB283_3 Depth=2
	mov	w27, w0
	cmn	w0, #12                 // =12
	b.ne	.LBB283_18
// %bb.5:                               //   in Loop: Header=BB283_3 Depth=2
	mov	w1, #5
	mov	w0, wzr
	bl	congestion_wait
	b	.LBB283_3
.LBB283_6:                              //   in Loop: Header=BB283_2 Depth=1
	ldur	x8, [x29, #-16]
	ldr	w9, [x19, #24]
	mov	x10, #134217728
	movk	x10, #64, lsl #32
	add	x8, x10, x8, lsl #6
	add	w9, w9, #1              // =1
	str	w9, [x19, #24]
	//APP
	//NO_APP
	ldr	w9, [x19, #2800]
	and	x8, x8, #0xfffffffffffff000
	add	x8, x8, x20
	sxtw	x27, w26
	add	w9, w9, #1              // =1
	str	w9, [x19, #2800]
	//APP
	//NO_APP
	mov	x9, #-549755813888
	add	x0, x8, x9
	mov	x1, x24
	mov	x2, x27
	bl	memcpy
	//APP
	//NO_APP
	ldr	w8, [x19, #2800]
	sub	w8, w8, #1              // =1
	str	w8, [x19, #2800]
	//APP
	//NO_APP
	ldr	x8, [x19, #24]
	subs	x8, x8, #1              // =1
	str	w8, [x19, #24]
	b.eq	.LBB283_10
// %bb.7:                               //   in Loop: Header=BB283_2 Depth=1
	ldr	x8, [x19, #24]
	cbz	x8, .LBB283_10
.LBB283_8:                              //   in Loop: Header=BB283_2 Depth=1
	ldur	x0, [x29, #-16]
	bl	flush_dcache_page
	ldr	x8, [x22, #48]
	ldur	x5, [x29, #-16]
	ldr	x6, [sp, #24]
	mov	x0, xzr
	mov	x1, x25
	mov	x2, x23
	mov	w3, w26
	mov	w4, w26
	blr	x8
	subs	x28, x28, x27
	b.eq	.LBB283_11
// %bb.9:                               //   in Loop: Header=BB283_2 Depth=1
	ldr	x8, [x21, #24]
	mov	x20, xzr
	add	x24, x24, x27
	add	x23, x27, x23
	b	.LBB283_2
.LBB283_10:                             //   in Loop: Header=BB283_2 Depth=1
	bl	preempt_schedule
	b	.LBB283_8
.LBB283_11:
	mov	w27, wzr
.LBB283_12:
	ldp	x19, x26, [sp, #8]      // 16-byte Folded Reload
	cmp	x28, x26
	b.ne	.LBB283_15
.LBB283_13:
	sxtw	x0, w27
	b	.LBB283_16
.LBB283_14:
	mov	x28, xzr
	mov	w27, wzr
	cmp	x28, x26
	b.eq	.LBB283_13
.LBB283_15:
	mov	x0, x19
	bl	current_time
	stp	x0, x1, [x19, #120]
	stp	x0, x1, [x19, #104]
	mov	x0, x19
	mov	w1, wzr
	bl	f2fs_mark_inode_dirty_sync
	sub	x0, x26, x28
.LBB283_16:
	adrp	x9, __stack_chk_guard
	ldur	x8, [x29, #-8]
	ldr	x9, [x9, :lo12:__stack_chk_guard]
	cmp	x9, x8
	b.ne	.LBB283_20
// %bb.17:
	ldp	x20, x19, [sp, #128]    // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]    // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]     // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]     // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]     // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]     // 16-byte Folded Reload
	add	sp, sp, #144            // =144
	ret
.LBB283_18:
	ldr	x0, [x21, #1008]
	ldr	w2, [sp, #4]            // 4-byte Folded Reload
	adrp	x1, .L.str.615
	add	x1, x1, :lo12:.L.str.615
	mov	w3, w27
	bl	f2fs_printk
	ldr	x8, [x21, #1008]
	cbz	x8, .LBB283_12
// %bb.19:
	add	x8, x8, #80             // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x8]
1:	ldxr	x9, [x8]
	orr	x9, x9, 4096
	stxr	w10, x9, [x8]
	cbnz	w10, 1b
	//NO_APP
	b	.LBB283_12
.LBB283_20:
	bl	__stack_chk_fail
.Lfunc_end283:
	.size	f2fs_quota_write, .Lfunc_end283-f2fs_quota_write
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_get_dquots
	.type	f2fs_get_dquots,@function
f2fs_get_dquots:                        // @f2fs_get_dquots
// %bb.0:
	add	x0, x0, #848            // =848
	ret
.Lfunc_end284:
	.size	f2fs_get_dquots, .Lfunc_end284-f2fs_get_dquots
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_put_page
	.type	f2fs_put_page,@function
f2fs_put_page:                          // @f2fs_put_page
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	mov	x29, sp
	cbz	x0, .LBB285_30
// %bb.1:
	ldr	x8, [x0, #24]
	mov	x19, x0
	ldr	x8, [x8]
	ldr	x8, [x8, #40]
	ldr	x9, [x8, #96]
	ldr	x8, [x0, #8]
	sub	x10, x8, #1             // =1
	tst	x8, #0x1
	csel	x8, x0, x10, eq
	ldr	x8, [x8]
	mov	w10, #8208
	movk	w10, #62197, lsl #16
	cmp	x9, x10
	b.ne	.LBB285_23
// %bb.2:
	tbnz	w8, #0, .LBB285_28
// %bb.3:
	bl	print_bdev_access_info
	adrp	x20, f2fs_dclient
	ldr	x0, [x20, :lo12:f2fs_dclient]
	cbz	x0, .LBB285_6
// %bb.4:
	bl	dsm_client_ocuppy
	cbnz	w0, .LBB285_6
// %bb.5:
	ldr	x0, [x20, :lo12:f2fs_dclient]
	adrp	x1, .L.str.542
	adrp	x2, .L__func__.f2fs_put_page
	add	x1, x1, :lo12:.L.str.542
	add	x2, x2, :lo12:.L__func__.f2fs_put_page
	mov	w3, #3801
	bl	dsm_client_record
	ldr	x0, [x20, :lo12:f2fs_dclient]
	mov	w1, #15241
	movk	w1, #14160, lsl #16
	bl	dsm_client_notify
.LBB285_6:
	ldr	x8, [x19, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x19, x9, eq
	ldr	x8, [x8]
	tbz	w8, #19, .LBB285_8
// %bb.7:
	ldr	x8, [x19]
	tbnz	w8, #10, .LBB285_31
.LBB285_8:
	ldr	x0, [x19, #24]
.LBB285_9:
	ldr	x8, [x0]
	ldr	x8, [x8, #40]
	ldr	x0, [x8, #1008]
	bl	f2fs_print_raw_sb_info
	ldr	x8, [x19, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x19, x9, eq
	ldr	x8, [x8]
	tbz	w8, #19, .LBB285_11
// %bb.10:
	ldr	x8, [x19]
	tbnz	w8, #10, .LBB285_32
.LBB285_11:
	ldr	x0, [x19, #24]
.LBB285_12:
	ldr	x8, [x0]
	ldr	x8, [x8, #40]
	ldr	x0, [x8, #1008]
	bl	f2fs_print_ckpt_info
	ldr	x8, [x19, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x19, x9, eq
	ldr	x8, [x8]
	tbz	w8, #19, .LBB285_14
// %bb.13:
	ldr	x8, [x19]
	tbnz	w8, #10, .LBB285_33
.LBB285_14:
	ldr	x0, [x19, #24]
.LBB285_15:
	ldr	x8, [x0]
	ldr	x8, [x8, #40]
	ldr	x0, [x8, #1008]
	bl	f2fs_print_sbi_info
	//APP
	.pushsection __bug_table,"aw"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,"aMS",@progbits,1; 14472: .string "fs/hw_f2fs/f2fs.h"; .popsection; .long 14472b - 14470b; .short 3801; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800
	//NO_APP
	ldr	x8, [x19, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x8, x19, x9, eq
	ldr	x8, [x8]
	tbz	w8, #19, .LBB285_17
// %bb.16:
	ldr	x8, [x19]
	tbnz	w8, #10, .LBB285_34
.LBB285_17:
	ldr	x0, [x19, #24]
.LBB285_18:
	ldr	x8, [x0]
	ldr	x8, [x8, #40]
	ldr	x8, [x8, #1008]
	cbz	x8, .LBB285_28
// %bb.19:
	add	x9, x8, #80             // =80
	//APP
	// atomic64_or
	prfm	pstl1strm, [x9]
1:	ldxr	x10, [x9]
	orr	x10, x10, 4
	stxr	w11, x10, [x9]
	cbnz	w11, 1b
	//NO_APP
	ldrb	w9, [x8, #3376]
	cbnz	w9, .LBB285_28
// %bb.20:
	ldr	x1, [x8, #3392]
	cbz	x1, .LBB285_28
// %bb.21:
	adrp	x9, system_state
	ldr	w9, [x9, :lo12:system_state]
	cmp	w9, #2                  // =2
	b.hi	.LBB285_28
// %bb.22:
	add	x2, x8, #3408           // =3408
	mov	w0, #8
	bl	queue_work_on
	b	.LBB285_28
.LBB285_23:
	tbnz	w8, #0, .LBB285_28
// %bb.24:
	bl	print_bdev_access_info
	adrp	x20, f2fs_dclient
	ldr	x0, [x20, :lo12:f2fs_dclient]
	cbz	x0, .LBB285_27
// %bb.25:
	bl	dsm_client_ocuppy
	cbnz	w0, .LBB285_27
// %bb.26:
	ldr	x0, [x20, :lo12:f2fs_dclient]
	adrp	x1, .L.str.542
	adrp	x2, .L__func__.f2fs_put_page
	add	x1, x1, :lo12:.L.str.542
	add	x2, x2, :lo12:.L__func__.f2fs_put_page
	mov	w3, #3803
	bl	dsm_client_record
	ldr	x0, [x20, :lo12:f2fs_dclient]
	mov	w1, #15241
	movk	w1, #14160, lsl #16
	bl	dsm_client_notify
.LBB285_27:
	mov	x0, xzr
	bl	f2fs_print_raw_sb_info
	mov	x0, xzr
	bl	f2fs_print_ckpt_info
	mov	x0, xzr
	bl	f2fs_print_sbi_info
	//APP
	.pushsection __bug_table,"aw"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,"aMS",@progbits,1; 14472: .string "fs/hw_f2fs/f2fs.h"; .popsection; .long 14472b - 14470b; .short 3803; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800
	//NO_APP
.LBB285_28:
	mov	x0, x19
	bl	unlock_page
	ldr	x8, [x19, #8]
	sub	x9, x8, #1              // =1
	tst	x8, #0x1
	csel	x0, x19, x9, eq
	add	x8, x0, #52             // =52
	mov	w9, #1
	//APP
	// atomic_sub_return
	prfm	pstl1strm, [x8]
1:	ldxr	w10, [x8]
	sub	w10, w10, w9
	stlxr	w11, w10, [x8]
	cbnz	w11, 1b
	dmb ish
	//NO_APP
	cbnz	w10, .LBB285_30
// %bb.29:
	bl	__put_page
.LBB285_30:
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.LBB285_31:
	mov	x0, x19
	bl	__page_file_mapping
	b	.LBB285_9
.LBB285_32:
	mov	x0, x19
	bl	__page_file_mapping
	b	.LBB285_12
.LBB285_33:
	mov	x0, x19
	bl	__page_file_mapping
	b	.LBB285_15
.LBB285_34:
	mov	x0, x19
	bl	__page_file_mapping
	b	.LBB285_18
.Lfunc_end285:
	.size	f2fs_put_page, .Lfunc_end285-f2fs_put_page
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_get_context
	.type	f2fs_get_context,@function
f2fs_get_context:                       // @f2fs_get_context
// %bb.0:
	stp	x29, x30, [sp, #-32]!   // 16-byte Folded Spill
	mov	x4, x2
	adrp	x2, .L.str.58
	mov	x3, x1
	add	x2, x2, :lo12:.L.str.58
	mov	w1, #9
	mov	x5, xzr
	stp	x20, x19, [sp, #16]     // 16-byte Folded Spill
	mov	x29, sp
	mov	x20, x0
	bl	f2fs_getxattr
	mov	w19, w0
	cmn	w0, #61                 // =61
	b.ne	.LBB286_4
// %bb.1:
	ldr	x8, [x20, #40]
	ldr	x8, [x8, #1008]
	add	x0, x8, #2296           // =2296
	bl	mutex_lock
	ldr	x8, [x20, #40]
	ldr	x8, [x8, #1008]
	ldr	x9, [x8, #2328]
	cbz	x9, .LBB286_3
// %bb.2:
	ldrb	w8, [x9, #552]
	orr	w8, w8, #0x2
	strb	w8, [x9, #552]
	ldr	x8, [x20, #40]
	ldr	x8, [x8, #1008]
.LBB286_3:
	add	x0, x8, #2296           // =2296
	bl	mutex_unlock
.LBB286_4:
	mov	w0, w19
	ldp	x20, x19, [sp, #16]     // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32     // 16-byte Folded Reload
	ret
.Lfunc_end286:
	.size	f2fs_get_context, .Lfunc_end286-f2fs_get_context
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_set_context
	.type	f2fs_set_context,@function
f2fs_set_context:                       // @f2fs_set_context
// %bb.0:
	stp	x29, x30, [sp, #-16]!   // 16-byte Folded Spill
	ldr	x8, [x0, #40]
	mov	x5, x3
	mov	x4, x2
	mov	x3, x1
	ldr	x8, [x8, #1008]
	mov	x29, sp
	ldr	x9, [x8, #16]
	ldrb	w9, [x9, #2181]
	tbz	w9, #1, .LBB287_3
// %bb.1:
	ldr	x9, [x0, #64]
	ldr	w8, [x8, #1172]
	cmp	x9, x8
	b.ne	.LBB287_3
// %bb.2:
	mov	w0, #-1
	ldp	x29, x30, [sp], #16     // 16-byte Folded Reload
	ret
.LBB287_3:
	adrp	x2, .L.str.58
	add	x2, x2, :lo12:.L.str.58
	mov	w1, #9
	mov	w6, #1
	bl	f2fs_setxattr
	ldp	x29, x30, [sp], #16     // 16-byte Folded Reload
	ret
.Lfunc_end287:
	.size	f2fs_set_context, .Lfunc_end287-f2fs_set_context
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_get_dummy_context
	.type	f2fs_get_dummy_context,@function
f2fs_get_dummy_context:                 // @f2fs_get_dummy_context
// %bb.0:
	ldr	x8, [x0, #1008]
	ldr	x0, [x8, #1496]
	ret
.Lfunc_end288:
	.size	f2fs_get_dummy_context, .Lfunc_end288-f2fs_get_dummy_context
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_has_stable_inodes
	.type	f2fs_has_stable_inodes,@function
f2fs_has_stable_inodes:                 // @f2fs_has_stable_inodes
// %bb.0:
	mov	w0, #1
	ret
.Lfunc_end289:
	.size	f2fs_has_stable_inodes, .Lfunc_end289-f2fs_has_stable_inodes
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_get_ino_and_lblk_bits
	.type	f2fs_get_ino_and_lblk_bits,@function
f2fs_get_ino_and_lblk_bits:             // @f2fs_get_ino_and_lblk_bits
// %bb.0:
	mov	w8, #32
	str	w8, [x1]
	str	w8, [x2]
	ret
.Lfunc_end290:
	.size	f2fs_get_ino_and_lblk_bits, .Lfunc_end290-f2fs_get_ino_and_lblk_bits
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_inline_crypt_enabled
	.type	f2fs_inline_crypt_enabled,@function
f2fs_inline_crypt_enabled:              // @f2fs_inline_crypt_enabled
// %bb.0:
	ldr	x8, [x0, #1008]
	ldrb	w0, [x8, #1512]
	ret
.Lfunc_end291:
	.size	f2fs_inline_crypt_enabled, .Lfunc_end291-f2fs_inline_crypt_enabled
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_get_num_devices
	.type	f2fs_get_num_devices,@function
f2fs_get_num_devices:                   // @f2fs_get_num_devices
// %bb.0:
	ldr	x8, [x0, #1008]
	ldr	w8, [x8, #3128]
	cmp	w8, #1                  // =1
	csinc	w0, w8, wzr, gt
	ret
.Lfunc_end292:
	.size	f2fs_get_num_devices, .Lfunc_end292-f2fs_get_num_devices
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_get_devices
	.type	f2fs_get_devices,@function
f2fs_get_devices:                       // @f2fs_get_devices
// %bb.0:
	ldr	x8, [x0, #1008]
	ldr	w9, [x8, #3128]
	cmp	w9, #1                  // =1
	b.lt	.LBB293_3
// %bb.1:
	mov	x9, xzr
	mov	x10, xzr
.LBB293_2:                              // =>This Inner Loop Header: Depth=1
	ldr	x11, [x8, #3136]
	ldr	x11, [x11, x9]
	add	x9, x9, #88             // =88
	ldr	x11, [x11, #128]
	ldr	x11, [x11, #1264]
	str	x11, [x1, x10, lsl #3]
	ldrsw	x11, [x8, #3128]
	add	x10, x10, #1            // =1
	cmp	x10, x11
	b.lt	.LBB293_2
.LBB293_3:
	ret
.Lfunc_end293:
	.size	f2fs_get_devices, .Lfunc_end293-f2fs_get_devices
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_fh_to_dentry
	.type	f2fs_fh_to_dentry,@function
f2fs_fh_to_dentry:                      // @f2fs_fh_to_dentry
// %bb.0:
	stp	x29, x30, [sp, #-16]!   // 16-byte Folded Spill
	adrp	x4, f2fs_nfs_get_inode
	add	x4, x4, :lo12:f2fs_nfs_get_inode
	mov	x29, sp
	bl	generic_fh_to_dentry
	ldp	x29, x30, [sp], #16     // 16-byte Folded Reload
	ret
.Lfunc_end294:
	.size	f2fs_fh_to_dentry, .Lfunc_end294-f2fs_fh_to_dentry
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_fh_to_parent
	.type	f2fs_fh_to_parent,@function
f2fs_fh_to_parent:                      // @f2fs_fh_to_parent
// %bb.0:
	stp	x29, x30, [sp, #-16]!   // 16-byte Folded Spill
	adrp	x4, f2fs_nfs_get_inode
	add	x4, x4, :lo12:f2fs_nfs_get_inode
	mov	x29, sp
	bl	generic_fh_to_parent
	ldp	x29, x30, [sp], #16     // 16-byte Folded Reload
	ret
.Lfunc_end295:
	.size	f2fs_fh_to_parent, .Lfunc_end295-f2fs_fh_to_parent
                                        // -- End function
	.p2align	2               // -- Begin function f2fs_nfs_get_inode
	.type	f2fs_nfs_get_inode,@function
f2fs_nfs_get_inode:                     // @f2fs_nfs_get_inode
// %bb.0:
	stp	x29, x30, [sp, #-48]!   // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]     // 16-byte Folded Spill
	mov	x20, x0
	ldr	x0, [x0, #1008]
	str	x21, [sp, #16]          // 8-byte Folded Spill
	mov	x29, sp
	mov	w19, w2
	mov	x21, x1
	bl	f2fs_check_nid_range
	cbz	w0, .LBB296_2
.LBB296_1:
	mov	x0, #-116
	b	.LBB296_5
.LBB296_2:
	mov	x0, x20
	mov	x1, x21
	bl	f2fs_iget
	cbz	w19, .LBB296_5
// %bb.3:
	cmn	x0, #1, lsl #12         // =4096
	b.hi	.LBB296_5
// %bb.4:
	ldr	w8, [x0, #640]
	cmp	w8, w19
	b.ne	.LBB296_6
.LBB296_5:
	ldp	x20, x19, [sp, #32]     // 16-byte Folded Reload
	ldr	x21, [sp, #16]          // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48     // 16-byte Folded Reload
	ret
.LBB296_6:
	bl	iput
	b	.LBB296_1
.Lfunc_end296:
	.size	f2fs_nfs_get_inode, .Lfunc_end296-f2fs_nfs_get_inode
                                        // -- End function
	.type	__tpstrtab_f2fs_sync_file_enter,@object // @__tpstrtab_f2fs_sync_file_enter
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_sync_file_enter:
	.asciz	"f2fs_sync_file_enter"
	.size	__tpstrtab_f2fs_sync_file_enter, 21

	.type	__tracepoint_f2fs_sync_file_enter,@object // @__tracepoint_f2fs_sync_file_enter
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_sync_file_enter
	.p2align	3
__tracepoint_f2fs_sync_file_enter:
.L__tracepoint_f2fs_sync_file_enter$local:
	.xword	__tpstrtab_f2fs_sync_file_enter
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_sync_file_enter, 40

	.type	__tpstrtab_f2fs_sync_file_exit,@object // @__tpstrtab_f2fs_sync_file_exit
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_sync_file_exit:
	.asciz	"f2fs_sync_file_exit"
	.size	__tpstrtab_f2fs_sync_file_exit, 20

	.type	__tracepoint_f2fs_sync_file_exit,@object // @__tracepoint_f2fs_sync_file_exit
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_sync_file_exit
	.p2align	3
__tracepoint_f2fs_sync_file_exit:
.L__tracepoint_f2fs_sync_file_exit$local:
	.xword	__tpstrtab_f2fs_sync_file_exit
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_sync_file_exit, 40

	.type	__tpstrtab_f2fs_sync_fs,@object // @__tpstrtab_f2fs_sync_fs
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_sync_fs:
	.asciz	"f2fs_sync_fs"
	.size	__tpstrtab_f2fs_sync_fs, 13

	.type	__tracepoint_f2fs_sync_fs,@object // @__tracepoint_f2fs_sync_fs
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_sync_fs
	.p2align	3
__tracepoint_f2fs_sync_fs:
.L__tracepoint_f2fs_sync_fs$local:
	.xword	__tpstrtab_f2fs_sync_fs
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_sync_fs, 40

	.type	__tpstrtab_f2fs_iget,@object // @__tpstrtab_f2fs_iget
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_iget:
	.asciz	"f2fs_iget"
	.size	__tpstrtab_f2fs_iget, 10

	.type	__tracepoint_f2fs_iget,@object // @__tracepoint_f2fs_iget
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_iget
	.p2align	3
__tracepoint_f2fs_iget:
.L__tracepoint_f2fs_iget$local:
	.xword	__tpstrtab_f2fs_iget
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_iget, 40

	.type	__tpstrtab_f2fs_iget_exit,@object // @__tpstrtab_f2fs_iget_exit
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_iget_exit:
	.asciz	"f2fs_iget_exit"
	.size	__tpstrtab_f2fs_iget_exit, 15

	.type	__tracepoint_f2fs_iget_exit,@object // @__tracepoint_f2fs_iget_exit
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_iget_exit
	.p2align	3
__tracepoint_f2fs_iget_exit:
.L__tracepoint_f2fs_iget_exit$local:
	.xword	__tpstrtab_f2fs_iget_exit
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_iget_exit, 40

	.type	__tpstrtab_f2fs_evict_inode,@object // @__tpstrtab_f2fs_evict_inode
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_evict_inode:
	.asciz	"f2fs_evict_inode"
	.size	__tpstrtab_f2fs_evict_inode, 17

	.type	__tracepoint_f2fs_evict_inode,@object // @__tracepoint_f2fs_evict_inode
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_evict_inode
	.p2align	3
__tracepoint_f2fs_evict_inode:
.L__tracepoint_f2fs_evict_inode$local:
	.xword	__tpstrtab_f2fs_evict_inode
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_evict_inode, 40

	.type	__tpstrtab_f2fs_new_inode,@object // @__tpstrtab_f2fs_new_inode
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_new_inode:
	.asciz	"f2fs_new_inode"
	.size	__tpstrtab_f2fs_new_inode, 15

	.type	__tracepoint_f2fs_new_inode,@object // @__tracepoint_f2fs_new_inode
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_new_inode
	.p2align	3
__tracepoint_f2fs_new_inode:
.L__tracepoint_f2fs_new_inode$local:
	.xword	__tpstrtab_f2fs_new_inode
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_new_inode, 40

	.type	__tpstrtab_f2fs_unlink_enter,@object // @__tpstrtab_f2fs_unlink_enter
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_unlink_enter:
	.asciz	"f2fs_unlink_enter"
	.size	__tpstrtab_f2fs_unlink_enter, 18

	.type	__tracepoint_f2fs_unlink_enter,@object // @__tracepoint_f2fs_unlink_enter
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_unlink_enter
	.p2align	3
__tracepoint_f2fs_unlink_enter:
.L__tracepoint_f2fs_unlink_enter$local:
	.xword	__tpstrtab_f2fs_unlink_enter
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_unlink_enter, 40

	.type	__tpstrtab_f2fs_unlink_exit,@object // @__tpstrtab_f2fs_unlink_exit
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_unlink_exit:
	.asciz	"f2fs_unlink_exit"
	.size	__tpstrtab_f2fs_unlink_exit, 17

	.type	__tracepoint_f2fs_unlink_exit,@object // @__tracepoint_f2fs_unlink_exit
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_unlink_exit
	.p2align	3
__tracepoint_f2fs_unlink_exit:
.L__tracepoint_f2fs_unlink_exit$local:
	.xword	__tpstrtab_f2fs_unlink_exit
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_unlink_exit, 40

	.type	__tpstrtab_f2fs_drop_inode,@object // @__tpstrtab_f2fs_drop_inode
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_drop_inode:
	.asciz	"f2fs_drop_inode"
	.size	__tpstrtab_f2fs_drop_inode, 16

	.type	__tracepoint_f2fs_drop_inode,@object // @__tracepoint_f2fs_drop_inode
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_drop_inode
	.p2align	3
__tracepoint_f2fs_drop_inode:
.L__tracepoint_f2fs_drop_inode$local:
	.xword	__tpstrtab_f2fs_drop_inode
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_drop_inode, 40

	.type	__tpstrtab_f2fs_truncate,@object // @__tpstrtab_f2fs_truncate
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_truncate:
	.asciz	"f2fs_truncate"
	.size	__tpstrtab_f2fs_truncate, 14

	.type	__tracepoint_f2fs_truncate,@object // @__tracepoint_f2fs_truncate
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_truncate
	.p2align	3
__tracepoint_f2fs_truncate:
.L__tracepoint_f2fs_truncate$local:
	.xword	__tpstrtab_f2fs_truncate
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_truncate, 40

	.type	__tpstrtab_f2fs_truncate_data_blocks_range,@object // @__tpstrtab_f2fs_truncate_data_blocks_range
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_truncate_data_blocks_range:
	.asciz	"f2fs_truncate_data_blocks_range"
	.size	__tpstrtab_f2fs_truncate_data_blocks_range, 32

	.type	__tracepoint_f2fs_truncate_data_blocks_range,@object // @__tracepoint_f2fs_truncate_data_blocks_range
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_truncate_data_blocks_range
	.p2align	3
__tracepoint_f2fs_truncate_data_blocks_range:
.L__tracepoint_f2fs_truncate_data_blocks_range$local:
	.xword	__tpstrtab_f2fs_truncate_data_blocks_range
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_truncate_data_blocks_range, 40

	.type	__tpstrtab_f2fs_truncate_blocks_enter,@object // @__tpstrtab_f2fs_truncate_blocks_enter
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_truncate_blocks_enter:
	.asciz	"f2fs_truncate_blocks_enter"
	.size	__tpstrtab_f2fs_truncate_blocks_enter, 27

	.type	__tracepoint_f2fs_truncate_blocks_enter,@object // @__tracepoint_f2fs_truncate_blocks_enter
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_truncate_blocks_enter
	.p2align	3
__tracepoint_f2fs_truncate_blocks_enter:
.L__tracepoint_f2fs_truncate_blocks_enter$local:
	.xword	__tpstrtab_f2fs_truncate_blocks_enter
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_truncate_blocks_enter, 40

	.type	__tpstrtab_f2fs_truncate_blocks_exit,@object // @__tpstrtab_f2fs_truncate_blocks_exit
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_truncate_blocks_exit:
	.asciz	"f2fs_truncate_blocks_exit"
	.size	__tpstrtab_f2fs_truncate_blocks_exit, 26

	.type	__tracepoint_f2fs_truncate_blocks_exit,@object // @__tracepoint_f2fs_truncate_blocks_exit
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_truncate_blocks_exit
	.p2align	3
__tracepoint_f2fs_truncate_blocks_exit:
.L__tracepoint_f2fs_truncate_blocks_exit$local:
	.xword	__tpstrtab_f2fs_truncate_blocks_exit
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_truncate_blocks_exit, 40

	.type	__tpstrtab_f2fs_truncate_inode_blocks_enter,@object // @__tpstrtab_f2fs_truncate_inode_blocks_enter
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_truncate_inode_blocks_enter:
	.asciz	"f2fs_truncate_inode_blocks_enter"
	.size	__tpstrtab_f2fs_truncate_inode_blocks_enter, 33

	.type	__tracepoint_f2fs_truncate_inode_blocks_enter,@object // @__tracepoint_f2fs_truncate_inode_blocks_enter
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_truncate_inode_blocks_enter
	.p2align	3
__tracepoint_f2fs_truncate_inode_blocks_enter:
.L__tracepoint_f2fs_truncate_inode_blocks_enter$local:
	.xword	__tpstrtab_f2fs_truncate_inode_blocks_enter
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_truncate_inode_blocks_enter, 40

	.type	__tpstrtab_f2fs_truncate_inode_blocks_exit,@object // @__tpstrtab_f2fs_truncate_inode_blocks_exit
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_truncate_inode_blocks_exit:
	.asciz	"f2fs_truncate_inode_blocks_exit"
	.size	__tpstrtab_f2fs_truncate_inode_blocks_exit, 32

	.type	__tracepoint_f2fs_truncate_inode_blocks_exit,@object // @__tracepoint_f2fs_truncate_inode_blocks_exit
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_truncate_inode_blocks_exit
	.p2align	3
__tracepoint_f2fs_truncate_inode_blocks_exit:
.L__tracepoint_f2fs_truncate_inode_blocks_exit$local:
	.xword	__tpstrtab_f2fs_truncate_inode_blocks_exit
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_truncate_inode_blocks_exit, 40

	.type	__tpstrtab_f2fs_truncate_nodes_enter,@object // @__tpstrtab_f2fs_truncate_nodes_enter
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_truncate_nodes_enter:
	.asciz	"f2fs_truncate_nodes_enter"
	.size	__tpstrtab_f2fs_truncate_nodes_enter, 26

	.type	__tracepoint_f2fs_truncate_nodes_enter,@object // @__tracepoint_f2fs_truncate_nodes_enter
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_truncate_nodes_enter
	.p2align	3
__tracepoint_f2fs_truncate_nodes_enter:
.L__tracepoint_f2fs_truncate_nodes_enter$local:
	.xword	__tpstrtab_f2fs_truncate_nodes_enter
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_truncate_nodes_enter, 40

	.type	__tpstrtab_f2fs_truncate_nodes_exit,@object // @__tpstrtab_f2fs_truncate_nodes_exit
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_truncate_nodes_exit:
	.asciz	"f2fs_truncate_nodes_exit"
	.size	__tpstrtab_f2fs_truncate_nodes_exit, 25

	.type	__tracepoint_f2fs_truncate_nodes_exit,@object // @__tracepoint_f2fs_truncate_nodes_exit
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_truncate_nodes_exit
	.p2align	3
__tracepoint_f2fs_truncate_nodes_exit:
.L__tracepoint_f2fs_truncate_nodes_exit$local:
	.xword	__tpstrtab_f2fs_truncate_nodes_exit
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_truncate_nodes_exit, 40

	.type	__tpstrtab_f2fs_truncate_node,@object // @__tpstrtab_f2fs_truncate_node
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_truncate_node:
	.asciz	"f2fs_truncate_node"
	.size	__tpstrtab_f2fs_truncate_node, 19

	.type	__tracepoint_f2fs_truncate_node,@object // @__tracepoint_f2fs_truncate_node
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_truncate_node
	.p2align	3
__tracepoint_f2fs_truncate_node:
.L__tracepoint_f2fs_truncate_node$local:
	.xword	__tpstrtab_f2fs_truncate_node
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_truncate_node, 40

	.type	__tpstrtab_f2fs_truncate_partial_nodes,@object // @__tpstrtab_f2fs_truncate_partial_nodes
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_truncate_partial_nodes:
	.asciz	"f2fs_truncate_partial_nodes"
	.size	__tpstrtab_f2fs_truncate_partial_nodes, 28

	.type	__tracepoint_f2fs_truncate_partial_nodes,@object // @__tracepoint_f2fs_truncate_partial_nodes
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_truncate_partial_nodes
	.p2align	3
__tracepoint_f2fs_truncate_partial_nodes:
.L__tracepoint_f2fs_truncate_partial_nodes$local:
	.xword	__tpstrtab_f2fs_truncate_partial_nodes
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_truncate_partial_nodes, 40

	.type	__tpstrtab_f2fs_file_write_iter,@object // @__tpstrtab_f2fs_file_write_iter
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_file_write_iter:
	.asciz	"f2fs_file_write_iter"
	.size	__tpstrtab_f2fs_file_write_iter, 21

	.type	__tracepoint_f2fs_file_write_iter,@object // @__tracepoint_f2fs_file_write_iter
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_file_write_iter
	.p2align	3
__tracepoint_f2fs_file_write_iter:
.L__tracepoint_f2fs_file_write_iter$local:
	.xword	__tpstrtab_f2fs_file_write_iter
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_file_write_iter, 40

	.type	__tpstrtab_f2fs_map_blocks,@object // @__tpstrtab_f2fs_map_blocks
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_map_blocks:
	.asciz	"f2fs_map_blocks"
	.size	__tpstrtab_f2fs_map_blocks, 16

	.type	__tracepoint_f2fs_map_blocks,@object // @__tracepoint_f2fs_map_blocks
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_map_blocks
	.p2align	3
__tracepoint_f2fs_map_blocks:
.L__tracepoint_f2fs_map_blocks$local:
	.xword	__tpstrtab_f2fs_map_blocks
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_map_blocks, 40

	.type	__tpstrtab_f2fs_background_gc,@object // @__tpstrtab_f2fs_background_gc
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_background_gc:
	.asciz	"f2fs_background_gc"
	.size	__tpstrtab_f2fs_background_gc, 19

	.type	__tracepoint_f2fs_background_gc,@object // @__tracepoint_f2fs_background_gc
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_background_gc
	.p2align	3
__tracepoint_f2fs_background_gc:
.L__tracepoint_f2fs_background_gc$local:
	.xword	__tpstrtab_f2fs_background_gc
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_background_gc, 40

	.type	__tpstrtab_f2fs_gc_begin,@object // @__tpstrtab_f2fs_gc_begin
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_gc_begin:
	.asciz	"f2fs_gc_begin"
	.size	__tpstrtab_f2fs_gc_begin, 14

	.type	__tracepoint_f2fs_gc_begin,@object // @__tracepoint_f2fs_gc_begin
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_gc_begin
	.p2align	3
__tracepoint_f2fs_gc_begin:
.L__tracepoint_f2fs_gc_begin$local:
	.xword	__tpstrtab_f2fs_gc_begin
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_gc_begin, 40

	.type	__tpstrtab_f2fs_gc_end,@object // @__tpstrtab_f2fs_gc_end
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_gc_end:
	.asciz	"f2fs_gc_end"
	.size	__tpstrtab_f2fs_gc_end, 12

	.type	__tracepoint_f2fs_gc_end,@object // @__tracepoint_f2fs_gc_end
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_gc_end
	.p2align	3
__tracepoint_f2fs_gc_end:
.L__tracepoint_f2fs_gc_end$local:
	.xword	__tpstrtab_f2fs_gc_end
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_gc_end, 40

	.type	__tpstrtab_f2fs_get_victim,@object // @__tpstrtab_f2fs_get_victim
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_get_victim:
	.asciz	"f2fs_get_victim"
	.size	__tpstrtab_f2fs_get_victim, 16

	.type	__tracepoint_f2fs_get_victim,@object // @__tracepoint_f2fs_get_victim
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_get_victim
	.p2align	3
__tracepoint_f2fs_get_victim:
.L__tracepoint_f2fs_get_victim$local:
	.xword	__tpstrtab_f2fs_get_victim
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_get_victim, 40

	.type	__tpstrtab_f2fs_lookup_start,@object // @__tpstrtab_f2fs_lookup_start
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_lookup_start:
	.asciz	"f2fs_lookup_start"
	.size	__tpstrtab_f2fs_lookup_start, 18

	.type	__tracepoint_f2fs_lookup_start,@object // @__tracepoint_f2fs_lookup_start
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_lookup_start
	.p2align	3
__tracepoint_f2fs_lookup_start:
.L__tracepoint_f2fs_lookup_start$local:
	.xword	__tpstrtab_f2fs_lookup_start
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_lookup_start, 40

	.type	__tpstrtab_f2fs_lookup_end,@object // @__tpstrtab_f2fs_lookup_end
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_lookup_end:
	.asciz	"f2fs_lookup_end"
	.size	__tpstrtab_f2fs_lookup_end, 16

	.type	__tracepoint_f2fs_lookup_end,@object // @__tracepoint_f2fs_lookup_end
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_lookup_end
	.p2align	3
__tracepoint_f2fs_lookup_end:
.L__tracepoint_f2fs_lookup_end$local:
	.xword	__tpstrtab_f2fs_lookup_end
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_lookup_end, 40

	.type	__tpstrtab_f2fs_readdir,@object // @__tpstrtab_f2fs_readdir
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_readdir:
	.asciz	"f2fs_readdir"
	.size	__tpstrtab_f2fs_readdir, 13

	.type	__tracepoint_f2fs_readdir,@object // @__tracepoint_f2fs_readdir
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_readdir
	.p2align	3
__tracepoint_f2fs_readdir:
.L__tracepoint_f2fs_readdir$local:
	.xword	__tpstrtab_f2fs_readdir
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_readdir, 40

	.type	__tpstrtab_f2fs_fallocate,@object // @__tpstrtab_f2fs_fallocate
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_fallocate:
	.asciz	"f2fs_fallocate"
	.size	__tpstrtab_f2fs_fallocate, 15

	.type	__tracepoint_f2fs_fallocate,@object // @__tracepoint_f2fs_fallocate
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_fallocate
	.p2align	3
__tracepoint_f2fs_fallocate:
.L__tracepoint_f2fs_fallocate$local:
	.xword	__tpstrtab_f2fs_fallocate
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_fallocate, 40

	.type	__tpstrtab_f2fs_direct_IO_enter,@object // @__tpstrtab_f2fs_direct_IO_enter
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_direct_IO_enter:
	.asciz	"f2fs_direct_IO_enter"
	.size	__tpstrtab_f2fs_direct_IO_enter, 21

	.type	__tracepoint_f2fs_direct_IO_enter,@object // @__tracepoint_f2fs_direct_IO_enter
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_direct_IO_enter
	.p2align	3
__tracepoint_f2fs_direct_IO_enter:
.L__tracepoint_f2fs_direct_IO_enter$local:
	.xword	__tpstrtab_f2fs_direct_IO_enter
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_direct_IO_enter, 40

	.type	__tpstrtab_f2fs_direct_IO_exit,@object // @__tpstrtab_f2fs_direct_IO_exit
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_direct_IO_exit:
	.asciz	"f2fs_direct_IO_exit"
	.size	__tpstrtab_f2fs_direct_IO_exit, 20

	.type	__tracepoint_f2fs_direct_IO_exit,@object // @__tracepoint_f2fs_direct_IO_exit
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_direct_IO_exit
	.p2align	3
__tracepoint_f2fs_direct_IO_exit:
.L__tracepoint_f2fs_direct_IO_exit$local:
	.xword	__tpstrtab_f2fs_direct_IO_exit
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_direct_IO_exit, 40

	.type	__tpstrtab_f2fs_reserve_new_blocks,@object // @__tpstrtab_f2fs_reserve_new_blocks
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_reserve_new_blocks:
	.asciz	"f2fs_reserve_new_blocks"
	.size	__tpstrtab_f2fs_reserve_new_blocks, 24

	.type	__tracepoint_f2fs_reserve_new_blocks,@object // @__tracepoint_f2fs_reserve_new_blocks
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_reserve_new_blocks
	.p2align	3
__tracepoint_f2fs_reserve_new_blocks:
.L__tracepoint_f2fs_reserve_new_blocks$local:
	.xword	__tpstrtab_f2fs_reserve_new_blocks
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_reserve_new_blocks, 40

	.type	__tpstrtab_f2fs_submit_page_bio,@object // @__tpstrtab_f2fs_submit_page_bio
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_submit_page_bio:
	.asciz	"f2fs_submit_page_bio"
	.size	__tpstrtab_f2fs_submit_page_bio, 21

	.type	__tracepoint_f2fs_submit_page_bio,@object // @__tracepoint_f2fs_submit_page_bio
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_submit_page_bio
	.p2align	3
__tracepoint_f2fs_submit_page_bio:
.L__tracepoint_f2fs_submit_page_bio$local:
	.xword	__tpstrtab_f2fs_submit_page_bio
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_submit_page_bio, 40

	.type	__tpstrtab_f2fs_submit_page_write,@object // @__tpstrtab_f2fs_submit_page_write
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_submit_page_write:
	.asciz	"f2fs_submit_page_write"
	.size	__tpstrtab_f2fs_submit_page_write, 23

	.type	__tracepoint_f2fs_submit_page_write,@object // @__tracepoint_f2fs_submit_page_write
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_submit_page_write
	.p2align	3
__tracepoint_f2fs_submit_page_write:
.L__tracepoint_f2fs_submit_page_write$local:
	.xword	__tpstrtab_f2fs_submit_page_write
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_submit_page_write, 40

	.type	__tpstrtab_f2fs_prepare_write_bio,@object // @__tpstrtab_f2fs_prepare_write_bio
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_prepare_write_bio:
	.asciz	"f2fs_prepare_write_bio"
	.size	__tpstrtab_f2fs_prepare_write_bio, 23

	.type	__tracepoint_f2fs_prepare_write_bio,@object // @__tracepoint_f2fs_prepare_write_bio
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_prepare_write_bio
	.p2align	3
__tracepoint_f2fs_prepare_write_bio:
.L__tracepoint_f2fs_prepare_write_bio$local:
	.xword	__tpstrtab_f2fs_prepare_write_bio
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_prepare_write_bio, 40

	.type	__tpstrtab_f2fs_prepare_read_bio,@object // @__tpstrtab_f2fs_prepare_read_bio
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_prepare_read_bio:
	.asciz	"f2fs_prepare_read_bio"
	.size	__tpstrtab_f2fs_prepare_read_bio, 22

	.type	__tracepoint_f2fs_prepare_read_bio,@object // @__tracepoint_f2fs_prepare_read_bio
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_prepare_read_bio
	.p2align	3
__tracepoint_f2fs_prepare_read_bio:
.L__tracepoint_f2fs_prepare_read_bio$local:
	.xword	__tpstrtab_f2fs_prepare_read_bio
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_prepare_read_bio, 40

	.type	__tpstrtab_f2fs_submit_read_bio,@object // @__tpstrtab_f2fs_submit_read_bio
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_submit_read_bio:
	.asciz	"f2fs_submit_read_bio"
	.size	__tpstrtab_f2fs_submit_read_bio, 21

	.type	__tracepoint_f2fs_submit_read_bio,@object // @__tracepoint_f2fs_submit_read_bio
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_submit_read_bio
	.p2align	3
__tracepoint_f2fs_submit_read_bio:
.L__tracepoint_f2fs_submit_read_bio$local:
	.xword	__tpstrtab_f2fs_submit_read_bio
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_submit_read_bio, 40

	.type	__tpstrtab_f2fs_submit_write_bio,@object // @__tpstrtab_f2fs_submit_write_bio
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_submit_write_bio:
	.asciz	"f2fs_submit_write_bio"
	.size	__tpstrtab_f2fs_submit_write_bio, 22

	.type	__tracepoint_f2fs_submit_write_bio,@object // @__tracepoint_f2fs_submit_write_bio
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_submit_write_bio
	.p2align	3
__tracepoint_f2fs_submit_write_bio:
.L__tracepoint_f2fs_submit_write_bio$local:
	.xword	__tpstrtab_f2fs_submit_write_bio
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_submit_write_bio, 40

	.type	__tpstrtab_f2fs_write_begin,@object // @__tpstrtab_f2fs_write_begin
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_write_begin:
	.asciz	"f2fs_write_begin"
	.size	__tpstrtab_f2fs_write_begin, 17

	.type	__tracepoint_f2fs_write_begin,@object // @__tracepoint_f2fs_write_begin
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_write_begin
	.p2align	3
__tracepoint_f2fs_write_begin:
.L__tracepoint_f2fs_write_begin$local:
	.xword	__tpstrtab_f2fs_write_begin
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_write_begin, 40

	.type	__tpstrtab_f2fs_write_end,@object // @__tpstrtab_f2fs_write_end
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_write_end:
	.asciz	"f2fs_write_end"
	.size	__tpstrtab_f2fs_write_end, 15

	.type	__tracepoint_f2fs_write_end,@object // @__tracepoint_f2fs_write_end
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_write_end
	.p2align	3
__tracepoint_f2fs_write_end:
.L__tracepoint_f2fs_write_end$local:
	.xword	__tpstrtab_f2fs_write_end
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_write_end, 40

	.type	__tpstrtab_f2fs_writepage,@object // @__tpstrtab_f2fs_writepage
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_writepage:
	.asciz	"f2fs_writepage"
	.size	__tpstrtab_f2fs_writepage, 15

	.type	__tracepoint_f2fs_writepage,@object // @__tracepoint_f2fs_writepage
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_writepage
	.p2align	3
__tracepoint_f2fs_writepage:
.L__tracepoint_f2fs_writepage$local:
	.xword	__tpstrtab_f2fs_writepage
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_writepage, 40

	.type	__tpstrtab_f2fs_do_write_data_page,@object // @__tpstrtab_f2fs_do_write_data_page
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_do_write_data_page:
	.asciz	"f2fs_do_write_data_page"
	.size	__tpstrtab_f2fs_do_write_data_page, 24

	.type	__tracepoint_f2fs_do_write_data_page,@object // @__tracepoint_f2fs_do_write_data_page
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_do_write_data_page
	.p2align	3
__tracepoint_f2fs_do_write_data_page:
.L__tracepoint_f2fs_do_write_data_page$local:
	.xword	__tpstrtab_f2fs_do_write_data_page
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_do_write_data_page, 40

	.type	__tpstrtab_f2fs_readpage,@object // @__tpstrtab_f2fs_readpage
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_readpage:
	.asciz	"f2fs_readpage"
	.size	__tpstrtab_f2fs_readpage, 14

	.type	__tracepoint_f2fs_readpage,@object // @__tracepoint_f2fs_readpage
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_readpage
	.p2align	3
__tracepoint_f2fs_readpage:
.L__tracepoint_f2fs_readpage$local:
	.xword	__tpstrtab_f2fs_readpage
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_readpage, 40

	.type	__tpstrtab_f2fs_set_page_dirty,@object // @__tpstrtab_f2fs_set_page_dirty
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_set_page_dirty:
	.asciz	"f2fs_set_page_dirty"
	.size	__tpstrtab_f2fs_set_page_dirty, 20

	.type	__tracepoint_f2fs_set_page_dirty,@object // @__tracepoint_f2fs_set_page_dirty
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_set_page_dirty
	.p2align	3
__tracepoint_f2fs_set_page_dirty:
.L__tracepoint_f2fs_set_page_dirty$local:
	.xword	__tpstrtab_f2fs_set_page_dirty
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_set_page_dirty, 40

	.type	__tpstrtab_f2fs_vm_page_mkwrite,@object // @__tpstrtab_f2fs_vm_page_mkwrite
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_vm_page_mkwrite:
	.asciz	"f2fs_vm_page_mkwrite"
	.size	__tpstrtab_f2fs_vm_page_mkwrite, 21

	.type	__tracepoint_f2fs_vm_page_mkwrite,@object // @__tracepoint_f2fs_vm_page_mkwrite
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_vm_page_mkwrite
	.p2align	3
__tracepoint_f2fs_vm_page_mkwrite:
.L__tracepoint_f2fs_vm_page_mkwrite$local:
	.xword	__tpstrtab_f2fs_vm_page_mkwrite
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_vm_page_mkwrite, 40

	.type	__tpstrtab_f2fs_register_inmem_page,@object // @__tpstrtab_f2fs_register_inmem_page
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_register_inmem_page:
	.asciz	"f2fs_register_inmem_page"
	.size	__tpstrtab_f2fs_register_inmem_page, 25

	.type	__tracepoint_f2fs_register_inmem_page,@object // @__tracepoint_f2fs_register_inmem_page
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_register_inmem_page
	.p2align	3
__tracepoint_f2fs_register_inmem_page:
.L__tracepoint_f2fs_register_inmem_page$local:
	.xword	__tpstrtab_f2fs_register_inmem_page
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_register_inmem_page, 40

	.type	__tpstrtab_f2fs_commit_inmem_page,@object // @__tpstrtab_f2fs_commit_inmem_page
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_commit_inmem_page:
	.asciz	"f2fs_commit_inmem_page"
	.size	__tpstrtab_f2fs_commit_inmem_page, 23

	.type	__tracepoint_f2fs_commit_inmem_page,@object // @__tracepoint_f2fs_commit_inmem_page
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_commit_inmem_page
	.p2align	3
__tracepoint_f2fs_commit_inmem_page:
.L__tracepoint_f2fs_commit_inmem_page$local:
	.xword	__tpstrtab_f2fs_commit_inmem_page
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_commit_inmem_page, 40

	.type	__tpstrtab_f2fs_filemap_fault,@object // @__tpstrtab_f2fs_filemap_fault
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_filemap_fault:
	.asciz	"f2fs_filemap_fault"
	.size	__tpstrtab_f2fs_filemap_fault, 19

	.type	__tracepoint_f2fs_filemap_fault,@object // @__tracepoint_f2fs_filemap_fault
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_filemap_fault
	.p2align	3
__tracepoint_f2fs_filemap_fault:
.L__tracepoint_f2fs_filemap_fault$local:
	.xword	__tpstrtab_f2fs_filemap_fault
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_filemap_fault, 40

	.type	__tpstrtab_f2fs_writepages,@object // @__tpstrtab_f2fs_writepages
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_writepages:
	.asciz	"f2fs_writepages"
	.size	__tpstrtab_f2fs_writepages, 16

	.type	__tracepoint_f2fs_writepages,@object // @__tracepoint_f2fs_writepages
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_writepages
	.p2align	3
__tracepoint_f2fs_writepages:
.L__tracepoint_f2fs_writepages$local:
	.xword	__tpstrtab_f2fs_writepages
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_writepages, 40

	.type	__tpstrtab_f2fs_readpages,@object // @__tpstrtab_f2fs_readpages
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_readpages:
	.asciz	"f2fs_readpages"
	.size	__tpstrtab_f2fs_readpages, 15

	.type	__tracepoint_f2fs_readpages,@object // @__tracepoint_f2fs_readpages
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_readpages
	.p2align	3
__tracepoint_f2fs_readpages:
.L__tracepoint_f2fs_readpages$local:
	.xword	__tpstrtab_f2fs_readpages
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_readpages, 40

	.type	__tpstrtab_f2fs_write_checkpoint,@object // @__tpstrtab_f2fs_write_checkpoint
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_write_checkpoint:
	.asciz	"f2fs_write_checkpoint"
	.size	__tpstrtab_f2fs_write_checkpoint, 22

	.type	__tracepoint_f2fs_write_checkpoint,@object // @__tracepoint_f2fs_write_checkpoint
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_write_checkpoint
	.p2align	3
__tracepoint_f2fs_write_checkpoint:
.L__tracepoint_f2fs_write_checkpoint$local:
	.xword	__tpstrtab_f2fs_write_checkpoint
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_write_checkpoint, 40

	.type	__tpstrtab_f2fs_queue_discard,@object // @__tpstrtab_f2fs_queue_discard
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_queue_discard:
	.asciz	"f2fs_queue_discard"
	.size	__tpstrtab_f2fs_queue_discard, 19

	.type	__tracepoint_f2fs_queue_discard,@object // @__tracepoint_f2fs_queue_discard
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_queue_discard
	.p2align	3
__tracepoint_f2fs_queue_discard:
.L__tracepoint_f2fs_queue_discard$local:
	.xword	__tpstrtab_f2fs_queue_discard
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_queue_discard, 40

	.type	__tpstrtab_f2fs_issue_discard,@object // @__tpstrtab_f2fs_issue_discard
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_issue_discard:
	.asciz	"f2fs_issue_discard"
	.size	__tpstrtab_f2fs_issue_discard, 19

	.type	__tracepoint_f2fs_issue_discard,@object // @__tracepoint_f2fs_issue_discard
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_issue_discard
	.p2align	3
__tracepoint_f2fs_issue_discard:
.L__tracepoint_f2fs_issue_discard$local:
	.xword	__tpstrtab_f2fs_issue_discard
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_issue_discard, 40

	.type	__tpstrtab_f2fs_remove_discard,@object // @__tpstrtab_f2fs_remove_discard
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_remove_discard:
	.asciz	"f2fs_remove_discard"
	.size	__tpstrtab_f2fs_remove_discard, 20

	.type	__tracepoint_f2fs_remove_discard,@object // @__tracepoint_f2fs_remove_discard
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_remove_discard
	.p2align	3
__tracepoint_f2fs_remove_discard:
.L__tracepoint_f2fs_remove_discard$local:
	.xword	__tpstrtab_f2fs_remove_discard
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_remove_discard, 40

	.type	__tpstrtab_f2fs_issue_reset_zone,@object // @__tpstrtab_f2fs_issue_reset_zone
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_issue_reset_zone:
	.asciz	"f2fs_issue_reset_zone"
	.size	__tpstrtab_f2fs_issue_reset_zone, 22

	.type	__tracepoint_f2fs_issue_reset_zone,@object // @__tracepoint_f2fs_issue_reset_zone
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_issue_reset_zone
	.p2align	3
__tracepoint_f2fs_issue_reset_zone:
.L__tracepoint_f2fs_issue_reset_zone$local:
	.xword	__tpstrtab_f2fs_issue_reset_zone
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_issue_reset_zone, 40

	.type	__tpstrtab_f2fs_issue_flush,@object // @__tpstrtab_f2fs_issue_flush
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_issue_flush:
	.asciz	"f2fs_issue_flush"
	.size	__tpstrtab_f2fs_issue_flush, 17

	.type	__tracepoint_f2fs_issue_flush,@object // @__tracepoint_f2fs_issue_flush
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_issue_flush
	.p2align	3
__tracepoint_f2fs_issue_flush:
.L__tracepoint_f2fs_issue_flush$local:
	.xword	__tpstrtab_f2fs_issue_flush
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_issue_flush, 40

	.type	__tpstrtab_f2fs_lookup_extent_tree_start,@object // @__tpstrtab_f2fs_lookup_extent_tree_start
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_lookup_extent_tree_start:
	.asciz	"f2fs_lookup_extent_tree_start"
	.size	__tpstrtab_f2fs_lookup_extent_tree_start, 30

	.type	__tracepoint_f2fs_lookup_extent_tree_start,@object // @__tracepoint_f2fs_lookup_extent_tree_start
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_lookup_extent_tree_start
	.p2align	3
__tracepoint_f2fs_lookup_extent_tree_start:
.L__tracepoint_f2fs_lookup_extent_tree_start$local:
	.xword	__tpstrtab_f2fs_lookup_extent_tree_start
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_lookup_extent_tree_start, 40

	.type	__tpstrtab_f2fs_lookup_extent_tree_end,@object // @__tpstrtab_f2fs_lookup_extent_tree_end
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_lookup_extent_tree_end:
	.asciz	"f2fs_lookup_extent_tree_end"
	.size	__tpstrtab_f2fs_lookup_extent_tree_end, 28

	.type	__tracepoint_f2fs_lookup_extent_tree_end,@object // @__tracepoint_f2fs_lookup_extent_tree_end
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_lookup_extent_tree_end
	.p2align	3
__tracepoint_f2fs_lookup_extent_tree_end:
.L__tracepoint_f2fs_lookup_extent_tree_end$local:
	.xword	__tpstrtab_f2fs_lookup_extent_tree_end
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_lookup_extent_tree_end, 40

	.type	__tpstrtab_f2fs_update_extent_tree_range,@object // @__tpstrtab_f2fs_update_extent_tree_range
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_update_extent_tree_range:
	.asciz	"f2fs_update_extent_tree_range"
	.size	__tpstrtab_f2fs_update_extent_tree_range, 30

	.type	__tracepoint_f2fs_update_extent_tree_range,@object // @__tracepoint_f2fs_update_extent_tree_range
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_update_extent_tree_range
	.p2align	3
__tracepoint_f2fs_update_extent_tree_range:
.L__tracepoint_f2fs_update_extent_tree_range$local:
	.xword	__tpstrtab_f2fs_update_extent_tree_range
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_update_extent_tree_range, 40

	.type	__tpstrtab_f2fs_shrink_extent_tree,@object // @__tpstrtab_f2fs_shrink_extent_tree
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_shrink_extent_tree:
	.asciz	"f2fs_shrink_extent_tree"
	.size	__tpstrtab_f2fs_shrink_extent_tree, 24

	.type	__tracepoint_f2fs_shrink_extent_tree,@object // @__tracepoint_f2fs_shrink_extent_tree
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_shrink_extent_tree
	.p2align	3
__tracepoint_f2fs_shrink_extent_tree:
.L__tracepoint_f2fs_shrink_extent_tree$local:
	.xword	__tpstrtab_f2fs_shrink_extent_tree
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_shrink_extent_tree, 40

	.type	__tpstrtab_f2fs_destroy_extent_tree,@object // @__tpstrtab_f2fs_destroy_extent_tree
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_destroy_extent_tree:
	.asciz	"f2fs_destroy_extent_tree"
	.size	__tpstrtab_f2fs_destroy_extent_tree, 25

	.type	__tracepoint_f2fs_destroy_extent_tree,@object // @__tracepoint_f2fs_destroy_extent_tree
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_destroy_extent_tree
	.p2align	3
__tracepoint_f2fs_destroy_extent_tree:
.L__tracepoint_f2fs_destroy_extent_tree$local:
	.xword	__tpstrtab_f2fs_destroy_extent_tree
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_destroy_extent_tree, 40

	.type	__tpstrtab_f2fs_sync_dirty_inodes_enter,@object // @__tpstrtab_f2fs_sync_dirty_inodes_enter
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_sync_dirty_inodes_enter:
	.asciz	"f2fs_sync_dirty_inodes_enter"
	.size	__tpstrtab_f2fs_sync_dirty_inodes_enter, 29

	.type	__tracepoint_f2fs_sync_dirty_inodes_enter,@object // @__tracepoint_f2fs_sync_dirty_inodes_enter
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_sync_dirty_inodes_enter
	.p2align	3
__tracepoint_f2fs_sync_dirty_inodes_enter:
.L__tracepoint_f2fs_sync_dirty_inodes_enter$local:
	.xword	__tpstrtab_f2fs_sync_dirty_inodes_enter
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_sync_dirty_inodes_enter, 40

	.type	__tpstrtab_f2fs_sync_dirty_inodes_exit,@object // @__tpstrtab_f2fs_sync_dirty_inodes_exit
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_sync_dirty_inodes_exit:
	.asciz	"f2fs_sync_dirty_inodes_exit"
	.size	__tpstrtab_f2fs_sync_dirty_inodes_exit, 28

	.type	__tracepoint_f2fs_sync_dirty_inodes_exit,@object // @__tracepoint_f2fs_sync_dirty_inodes_exit
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_sync_dirty_inodes_exit
	.p2align	3
__tracepoint_f2fs_sync_dirty_inodes_exit:
.L__tracepoint_f2fs_sync_dirty_inodes_exit$local:
	.xword	__tpstrtab_f2fs_sync_dirty_inodes_exit
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_sync_dirty_inodes_exit, 40

	.type	__tpstrtab_f2fs_shutdown,@object // @__tpstrtab_f2fs_shutdown
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_shutdown:
	.asciz	"f2fs_shutdown"
	.size	__tpstrtab_f2fs_shutdown, 14

	.type	__tracepoint_f2fs_shutdown,@object // @__tracepoint_f2fs_shutdown
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_shutdown
	.p2align	3
__tracepoint_f2fs_shutdown:
.L__tracepoint_f2fs_shutdown$local:
	.xword	__tpstrtab_f2fs_shutdown
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_shutdown, 40

	.type	__tpstrtab_f2fs_compress_pages_start,@object // @__tpstrtab_f2fs_compress_pages_start
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_compress_pages_start:
	.asciz	"f2fs_compress_pages_start"
	.size	__tpstrtab_f2fs_compress_pages_start, 26

	.type	__tracepoint_f2fs_compress_pages_start,@object // @__tracepoint_f2fs_compress_pages_start
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_compress_pages_start
	.p2align	3
__tracepoint_f2fs_compress_pages_start:
.L__tracepoint_f2fs_compress_pages_start$local:
	.xword	__tpstrtab_f2fs_compress_pages_start
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_compress_pages_start, 40

	.type	__tpstrtab_f2fs_decompress_pages_start,@object // @__tpstrtab_f2fs_decompress_pages_start
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_decompress_pages_start:
	.asciz	"f2fs_decompress_pages_start"
	.size	__tpstrtab_f2fs_decompress_pages_start, 28

	.type	__tracepoint_f2fs_decompress_pages_start,@object // @__tracepoint_f2fs_decompress_pages_start
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_decompress_pages_start
	.p2align	3
__tracepoint_f2fs_decompress_pages_start:
.L__tracepoint_f2fs_decompress_pages_start$local:
	.xword	__tpstrtab_f2fs_decompress_pages_start
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_decompress_pages_start, 40

	.type	__tpstrtab_f2fs_compress_pages_end,@object // @__tpstrtab_f2fs_compress_pages_end
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_compress_pages_end:
	.asciz	"f2fs_compress_pages_end"
	.size	__tpstrtab_f2fs_compress_pages_end, 24

	.type	__tracepoint_f2fs_compress_pages_end,@object // @__tracepoint_f2fs_compress_pages_end
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_compress_pages_end
	.p2align	3
__tracepoint_f2fs_compress_pages_end:
.L__tracepoint_f2fs_compress_pages_end$local:
	.xword	__tpstrtab_f2fs_compress_pages_end
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_compress_pages_end, 40

	.type	__tpstrtab_f2fs_decompress_pages_end,@object // @__tpstrtab_f2fs_decompress_pages_end
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_decompress_pages_end:
	.asciz	"f2fs_decompress_pages_end"
	.size	__tpstrtab_f2fs_decompress_pages_end, 26

	.type	__tracepoint_f2fs_decompress_pages_end,@object // @__tracepoint_f2fs_decompress_pages_end
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_decompress_pages_end
	.p2align	3
__tracepoint_f2fs_decompress_pages_end:
.L__tracepoint_f2fs_decompress_pages_end$local:
	.xword	__tpstrtab_f2fs_decompress_pages_end
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_decompress_pages_end, 40

	.type	__tpstrtab_f2fs_iostat,@object // @__tpstrtab_f2fs_iostat
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_iostat:
	.asciz	"f2fs_iostat"
	.size	__tpstrtab_f2fs_iostat, 12

	.type	__tracepoint_f2fs_iostat,@object // @__tracepoint_f2fs_iostat
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_iostat
	.p2align	3
__tracepoint_f2fs_iostat:
.L__tracepoint_f2fs_iostat$local:
	.xword	__tpstrtab_f2fs_iostat
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_iostat, 40

	.type	__tpstrtab_f2fs_grading_ssr_allocate,@object // @__tpstrtab_f2fs_grading_ssr_allocate
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_grading_ssr_allocate:
	.asciz	"f2fs_grading_ssr_allocate"
	.size	__tpstrtab_f2fs_grading_ssr_allocate, 26

	.type	__tracepoint_f2fs_grading_ssr_allocate,@object // @__tracepoint_f2fs_grading_ssr_allocate
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_grading_ssr_allocate
	.p2align	3
__tracepoint_f2fs_grading_ssr_allocate:
.L__tracepoint_f2fs_grading_ssr_allocate$local:
	.xword	__tpstrtab_f2fs_grading_ssr_allocate
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_grading_ssr_allocate, 40

	.type	__tpstrtab_f2fs_dedup_ioc_create_layered_inode,@object // @__tpstrtab_f2fs_dedup_ioc_create_layered_inode
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_dedup_ioc_create_layered_inode:
	.asciz	"f2fs_dedup_ioc_create_layered_inode"
	.size	__tpstrtab_f2fs_dedup_ioc_create_layered_inode, 36

	.type	__tracepoint_f2fs_dedup_ioc_create_layered_inode,@object // @__tracepoint_f2fs_dedup_ioc_create_layered_inode
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_dedup_ioc_create_layered_inode
	.p2align	3
__tracepoint_f2fs_dedup_ioc_create_layered_inode:
.L__tracepoint_f2fs_dedup_ioc_create_layered_inode$local:
	.xword	__tpstrtab_f2fs_dedup_ioc_create_layered_inode
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_dedup_ioc_create_layered_inode, 40

	.type	__tpstrtab_f2fs_dedup_ioc_dedup_inode,@object // @__tpstrtab_f2fs_dedup_ioc_dedup_inode
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_dedup_ioc_dedup_inode:
	.asciz	"f2fs_dedup_ioc_dedup_inode"
	.size	__tpstrtab_f2fs_dedup_ioc_dedup_inode, 27

	.type	__tracepoint_f2fs_dedup_ioc_dedup_inode,@object // @__tracepoint_f2fs_dedup_ioc_dedup_inode
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_dedup_ioc_dedup_inode
	.p2align	3
__tracepoint_f2fs_dedup_ioc_dedup_inode:
.L__tracepoint_f2fs_dedup_ioc_dedup_inode$local:
	.xword	__tpstrtab_f2fs_dedup_ioc_dedup_inode
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_dedup_ioc_dedup_inode, 40

	.type	__tpstrtab_f2fs_dedup_revoke_inode,@object // @__tpstrtab_f2fs_dedup_revoke_inode
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_dedup_revoke_inode:
	.asciz	"f2fs_dedup_revoke_inode"
	.size	__tpstrtab_f2fs_dedup_revoke_inode, 24

	.type	__tracepoint_f2fs_dedup_revoke_inode,@object // @__tracepoint_f2fs_dedup_revoke_inode
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_dedup_revoke_inode
	.p2align	3
__tracepoint_f2fs_dedup_revoke_inode:
.L__tracepoint_f2fs_dedup_revoke_inode$local:
	.xword	__tpstrtab_f2fs_dedup_revoke_inode
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_dedup_revoke_inode, 40

	.type	__tpstrtab_f2fs_dedup_revoke_fail,@object // @__tpstrtab_f2fs_dedup_revoke_fail
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_dedup_revoke_fail:
	.asciz	"f2fs_dedup_revoke_fail"
	.size	__tpstrtab_f2fs_dedup_revoke_fail, 23

	.type	__tracepoint_f2fs_dedup_revoke_fail,@object // @__tracepoint_f2fs_dedup_revoke_fail
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_dedup_revoke_fail
	.p2align	3
__tracepoint_f2fs_dedup_revoke_fail:
.L__tracepoint_f2fs_dedup_revoke_fail$local:
	.xword	__tpstrtab_f2fs_dedup_revoke_fail
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_dedup_revoke_fail, 40

	.type	__tpstrtab_f2fs_dedup_dec_inner_link,@object // @__tpstrtab_f2fs_dedup_dec_inner_link
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_dedup_dec_inner_link:
	.asciz	"f2fs_dedup_dec_inner_link"
	.size	__tpstrtab_f2fs_dedup_dec_inner_link, 26

	.type	__tracepoint_f2fs_dedup_dec_inner_link,@object // @__tracepoint_f2fs_dedup_dec_inner_link
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_dedup_dec_inner_link
	.p2align	3
__tracepoint_f2fs_dedup_dec_inner_link:
.L__tracepoint_f2fs_dedup_dec_inner_link$local:
	.xword	__tpstrtab_f2fs_dedup_dec_inner_link
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_dedup_dec_inner_link, 40

	.type	__tpstrtab_f2fs_dedup_map_readpage,@object // @__tpstrtab_f2fs_dedup_map_readpage
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_dedup_map_readpage:
	.asciz	"f2fs_dedup_map_readpage"
	.size	__tpstrtab_f2fs_dedup_map_readpage, 24

	.type	__tracepoint_f2fs_dedup_map_readpage,@object // @__tracepoint_f2fs_dedup_map_readpage
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_dedup_map_readpage
	.p2align	3
__tracepoint_f2fs_dedup_map_readpage:
.L__tracepoint_f2fs_dedup_map_readpage$local:
	.xword	__tpstrtab_f2fs_dedup_map_readpage
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_dedup_map_readpage, 40

	.type	__tpstrtab_f2fs_dedup_map_blocks,@object // @__tpstrtab_f2fs_dedup_map_blocks
	.section	__tracepoints_strings,"a",@progbits
__tpstrtab_f2fs_dedup_map_blocks:
	.asciz	"f2fs_dedup_map_blocks"
	.size	__tpstrtab_f2fs_dedup_map_blocks, 22

	.type	__tracepoint_f2fs_dedup_map_blocks,@object // @__tracepoint_f2fs_dedup_map_blocks
	.section	__tracepoints,"aw",@progbits
	.globl	__tracepoint_f2fs_dedup_map_blocks
	.p2align	3
__tracepoint_f2fs_dedup_map_blocks:
.L__tracepoint_f2fs_dedup_map_blocks$local:
	.xword	__tpstrtab_f2fs_dedup_map_blocks
	.zero	4
	.zero	4
	.xword	0
	.xword	0
	.xword	0
	.size	__tracepoint_f2fs_dedup_map_blocks, 40

	.type	.L.str,@object          // @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"NODE"
	.size	.L.str, 5

	.type	__TRACE_SYSTEM_NODE,@object // @__TRACE_SYSTEM_NODE
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_NODE:
	.xword	.L.str.320
	.xword	.L.str
	.xword	1                       // 0x1
	.size	__TRACE_SYSTEM_NODE, 24

	.type	TRACE_SYSTEM_NODE,@object // @TRACE_SYSTEM_NODE
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_NODE:
	.xword	__TRACE_SYSTEM_NODE
	.size	TRACE_SYSTEM_NODE, 8

	.type	.L.str.1,@object        // @.str.1
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1:
	.asciz	"DATA"
	.size	.L.str.1, 5

	.type	__TRACE_SYSTEM_DATA,@object // @__TRACE_SYSTEM_DATA
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_DATA:
	.xword	.L.str.320
	.xword	.L.str.1
	.xword	0                       // 0x0
	.size	__TRACE_SYSTEM_DATA, 24

	.type	TRACE_SYSTEM_DATA,@object // @TRACE_SYSTEM_DATA
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_DATA:
	.xword	__TRACE_SYSTEM_DATA
	.size	TRACE_SYSTEM_DATA, 8

	.type	.L.str.2,@object        // @.str.2
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.2:
	.asciz	"META"
	.size	.L.str.2, 5

	.type	__TRACE_SYSTEM_META,@object // @__TRACE_SYSTEM_META
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_META:
	.xword	.L.str.320
	.xword	.L.str.2
	.xword	2                       // 0x2
	.size	__TRACE_SYSTEM_META, 24

	.type	TRACE_SYSTEM_META,@object // @TRACE_SYSTEM_META
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_META:
	.xword	__TRACE_SYSTEM_META
	.size	TRACE_SYSTEM_META, 8

	.type	.L.str.3,@object        // @.str.3
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.3:
	.asciz	"META_FLUSH"
	.size	.L.str.3, 11

	.type	__TRACE_SYSTEM_META_FLUSH,@object // @__TRACE_SYSTEM_META_FLUSH
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_META_FLUSH:
	.xword	.L.str.320
	.xword	.L.str.3
	.xword	4                       // 0x4
	.size	__TRACE_SYSTEM_META_FLUSH, 24

	.type	TRACE_SYSTEM_META_FLUSH,@object // @TRACE_SYSTEM_META_FLUSH
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_META_FLUSH:
	.xword	__TRACE_SYSTEM_META_FLUSH
	.size	TRACE_SYSTEM_META_FLUSH, 8

	.type	.L.str.4,@object        // @.str.4
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.4:
	.asciz	"INMEM"
	.size	.L.str.4, 6

	.type	__TRACE_SYSTEM_INMEM,@object // @__TRACE_SYSTEM_INMEM
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_INMEM:
	.xword	.L.str.320
	.xword	.L.str.4
	.xword	5                       // 0x5
	.size	__TRACE_SYSTEM_INMEM, 24

	.type	TRACE_SYSTEM_INMEM,@object // @TRACE_SYSTEM_INMEM
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_INMEM:
	.xword	__TRACE_SYSTEM_INMEM
	.size	TRACE_SYSTEM_INMEM, 8

	.type	.L.str.5,@object        // @.str.5
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.5:
	.asciz	"INMEM_DROP"
	.size	.L.str.5, 11

	.type	__TRACE_SYSTEM_INMEM_DROP,@object // @__TRACE_SYSTEM_INMEM_DROP
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_INMEM_DROP:
	.xword	.L.str.320
	.xword	.L.str.5
	.xword	6                       // 0x6
	.size	__TRACE_SYSTEM_INMEM_DROP, 24

	.type	TRACE_SYSTEM_INMEM_DROP,@object // @TRACE_SYSTEM_INMEM_DROP
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_INMEM_DROP:
	.xword	__TRACE_SYSTEM_INMEM_DROP
	.size	TRACE_SYSTEM_INMEM_DROP, 8

	.type	.L.str.6,@object        // @.str.6
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.6:
	.asciz	"INMEM_INVALIDATE"
	.size	.L.str.6, 17

	.type	__TRACE_SYSTEM_INMEM_INVALIDATE,@object // @__TRACE_SYSTEM_INMEM_INVALIDATE
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_INMEM_INVALIDATE:
	.xword	.L.str.320
	.xword	.L.str.6
	.xword	7                       // 0x7
	.size	__TRACE_SYSTEM_INMEM_INVALIDATE, 24

	.type	TRACE_SYSTEM_INMEM_INVALIDATE,@object // @TRACE_SYSTEM_INMEM_INVALIDATE
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_INMEM_INVALIDATE:
	.xword	__TRACE_SYSTEM_INMEM_INVALIDATE
	.size	TRACE_SYSTEM_INMEM_INVALIDATE, 8

	.type	.L.str.7,@object        // @.str.7
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.7:
	.asciz	"INMEM_REVOKE"
	.size	.L.str.7, 13

	.type	__TRACE_SYSTEM_INMEM_REVOKE,@object // @__TRACE_SYSTEM_INMEM_REVOKE
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_INMEM_REVOKE:
	.xword	.L.str.320
	.xword	.L.str.7
	.xword	8                       // 0x8
	.size	__TRACE_SYSTEM_INMEM_REVOKE, 24

	.type	TRACE_SYSTEM_INMEM_REVOKE,@object // @TRACE_SYSTEM_INMEM_REVOKE
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_INMEM_REVOKE:
	.xword	__TRACE_SYSTEM_INMEM_REVOKE
	.size	TRACE_SYSTEM_INMEM_REVOKE, 8

	.type	.L.str.8,@object        // @.str.8
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.8:
	.asciz	"IPU"
	.size	.L.str.8, 4

	.type	__TRACE_SYSTEM_IPU,@object // @__TRACE_SYSTEM_IPU
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_IPU:
	.xword	.L.str.320
	.xword	.L.str.8
	.xword	9                       // 0x9
	.size	__TRACE_SYSTEM_IPU, 24

	.type	TRACE_SYSTEM_IPU,@object // @TRACE_SYSTEM_IPU
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_IPU:
	.xword	__TRACE_SYSTEM_IPU
	.size	TRACE_SYSTEM_IPU, 8

	.type	.L.str.9,@object        // @.str.9
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.9:
	.asciz	"OPU"
	.size	.L.str.9, 4

	.type	__TRACE_SYSTEM_OPU,@object // @__TRACE_SYSTEM_OPU
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_OPU:
	.xword	.L.str.320
	.xword	.L.str.9
	.xword	10                      // 0xa
	.size	__TRACE_SYSTEM_OPU, 24

	.type	TRACE_SYSTEM_OPU,@object // @TRACE_SYSTEM_OPU
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_OPU:
	.xword	__TRACE_SYSTEM_OPU
	.size	TRACE_SYSTEM_OPU, 8

	.type	.L.str.10,@object       // @.str.10
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.10:
	.asciz	"HOT"
	.size	.L.str.10, 4

	.type	__TRACE_SYSTEM_HOT,@object // @__TRACE_SYSTEM_HOT
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_HOT:
	.xword	.L.str.320
	.xword	.L.str.10
	.xword	0                       // 0x0
	.size	__TRACE_SYSTEM_HOT, 24

	.type	TRACE_SYSTEM_HOT,@object // @TRACE_SYSTEM_HOT
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_HOT:
	.xword	__TRACE_SYSTEM_HOT
	.size	TRACE_SYSTEM_HOT, 8

	.type	.L.str.11,@object       // @.str.11
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.11:
	.asciz	"WARM"
	.size	.L.str.11, 5

	.type	__TRACE_SYSTEM_WARM,@object // @__TRACE_SYSTEM_WARM
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_WARM:
	.xword	.L.str.320
	.xword	.L.str.11
	.xword	1                       // 0x1
	.size	__TRACE_SYSTEM_WARM, 24

	.type	TRACE_SYSTEM_WARM,@object // @TRACE_SYSTEM_WARM
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_WARM:
	.xword	__TRACE_SYSTEM_WARM
	.size	TRACE_SYSTEM_WARM, 8

	.type	.L.str.12,@object       // @.str.12
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.12:
	.asciz	"COLD"
	.size	.L.str.12, 5

	.type	__TRACE_SYSTEM_COLD,@object // @__TRACE_SYSTEM_COLD
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_COLD:
	.xword	.L.str.320
	.xword	.L.str.12
	.xword	2                       // 0x2
	.size	__TRACE_SYSTEM_COLD, 24

	.type	TRACE_SYSTEM_COLD,@object // @TRACE_SYSTEM_COLD
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_COLD:
	.xword	__TRACE_SYSTEM_COLD
	.size	TRACE_SYSTEM_COLD, 8

	.type	.L.str.13,@object       // @.str.13
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.13:
	.asciz	"CURSEG_HOT_DATA"
	.size	.L.str.13, 16

	.type	__TRACE_SYSTEM_CURSEG_HOT_DATA,@object // @__TRACE_SYSTEM_CURSEG_HOT_DATA
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_CURSEG_HOT_DATA:
	.xword	.L.str.320
	.xword	.L.str.13
	.xword	0                       // 0x0
	.size	__TRACE_SYSTEM_CURSEG_HOT_DATA, 24

	.type	TRACE_SYSTEM_CURSEG_HOT_DATA,@object // @TRACE_SYSTEM_CURSEG_HOT_DATA
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_CURSEG_HOT_DATA:
	.xword	__TRACE_SYSTEM_CURSEG_HOT_DATA
	.size	TRACE_SYSTEM_CURSEG_HOT_DATA, 8

	.type	.L.str.14,@object       // @.str.14
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.14:
	.asciz	"CURSEG_WARM_DATA"
	.size	.L.str.14, 17

	.type	__TRACE_SYSTEM_CURSEG_WARM_DATA,@object // @__TRACE_SYSTEM_CURSEG_WARM_DATA
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_CURSEG_WARM_DATA:
	.xword	.L.str.320
	.xword	.L.str.14
	.xword	1                       // 0x1
	.size	__TRACE_SYSTEM_CURSEG_WARM_DATA, 24

	.type	TRACE_SYSTEM_CURSEG_WARM_DATA,@object // @TRACE_SYSTEM_CURSEG_WARM_DATA
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_CURSEG_WARM_DATA:
	.xword	__TRACE_SYSTEM_CURSEG_WARM_DATA
	.size	TRACE_SYSTEM_CURSEG_WARM_DATA, 8

	.type	.L.str.15,@object       // @.str.15
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.15:
	.asciz	"CURSEG_COLD_DATA"
	.size	.L.str.15, 17

	.type	__TRACE_SYSTEM_CURSEG_COLD_DATA,@object // @__TRACE_SYSTEM_CURSEG_COLD_DATA
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_CURSEG_COLD_DATA:
	.xword	.L.str.320
	.xword	.L.str.15
	.xword	2                       // 0x2
	.size	__TRACE_SYSTEM_CURSEG_COLD_DATA, 24

	.type	TRACE_SYSTEM_CURSEG_COLD_DATA,@object // @TRACE_SYSTEM_CURSEG_COLD_DATA
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_CURSEG_COLD_DATA:
	.xword	__TRACE_SYSTEM_CURSEG_COLD_DATA
	.size	TRACE_SYSTEM_CURSEG_COLD_DATA, 8

	.type	.L.str.16,@object       // @.str.16
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.16:
	.asciz	"CURSEG_HOT_NODE"
	.size	.L.str.16, 16

	.type	__TRACE_SYSTEM_CURSEG_HOT_NODE,@object // @__TRACE_SYSTEM_CURSEG_HOT_NODE
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_CURSEG_HOT_NODE:
	.xword	.L.str.320
	.xword	.L.str.16
	.xword	3                       // 0x3
	.size	__TRACE_SYSTEM_CURSEG_HOT_NODE, 24

	.type	TRACE_SYSTEM_CURSEG_HOT_NODE,@object // @TRACE_SYSTEM_CURSEG_HOT_NODE
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_CURSEG_HOT_NODE:
	.xword	__TRACE_SYSTEM_CURSEG_HOT_NODE
	.size	TRACE_SYSTEM_CURSEG_HOT_NODE, 8

	.type	.L.str.17,@object       // @.str.17
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.17:
	.asciz	"CURSEG_WARM_NODE"
	.size	.L.str.17, 17

	.type	__TRACE_SYSTEM_CURSEG_WARM_NODE,@object // @__TRACE_SYSTEM_CURSEG_WARM_NODE
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_CURSEG_WARM_NODE:
	.xword	.L.str.320
	.xword	.L.str.17
	.xword	4                       // 0x4
	.size	__TRACE_SYSTEM_CURSEG_WARM_NODE, 24

	.type	TRACE_SYSTEM_CURSEG_WARM_NODE,@object // @TRACE_SYSTEM_CURSEG_WARM_NODE
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_CURSEG_WARM_NODE:
	.xword	__TRACE_SYSTEM_CURSEG_WARM_NODE
	.size	TRACE_SYSTEM_CURSEG_WARM_NODE, 8

	.type	.L.str.18,@object       // @.str.18
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.18:
	.asciz	"CURSEG_COLD_NODE"
	.size	.L.str.18, 17

	.type	__TRACE_SYSTEM_CURSEG_COLD_NODE,@object // @__TRACE_SYSTEM_CURSEG_COLD_NODE
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_CURSEG_COLD_NODE:
	.xword	.L.str.320
	.xword	.L.str.18
	.xword	5                       // 0x5
	.size	__TRACE_SYSTEM_CURSEG_COLD_NODE, 24

	.type	TRACE_SYSTEM_CURSEG_COLD_NODE,@object // @TRACE_SYSTEM_CURSEG_COLD_NODE
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_CURSEG_COLD_NODE:
	.xword	__TRACE_SYSTEM_CURSEG_COLD_NODE
	.size	TRACE_SYSTEM_CURSEG_COLD_NODE, 8

	.type	.L.str.19,@object       // @.str.19
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.19:
	.asciz	"NO_CHECK_TYPE"
	.size	.L.str.19, 14

	.type	__TRACE_SYSTEM_NO_CHECK_TYPE,@object // @__TRACE_SYSTEM_NO_CHECK_TYPE
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_NO_CHECK_TYPE:
	.xword	.L.str.320
	.xword	.L.str.19
	.xword	8                       // 0x8
	.size	__TRACE_SYSTEM_NO_CHECK_TYPE, 24

	.type	TRACE_SYSTEM_NO_CHECK_TYPE,@object // @TRACE_SYSTEM_NO_CHECK_TYPE
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_NO_CHECK_TYPE:
	.xword	__TRACE_SYSTEM_NO_CHECK_TYPE
	.size	TRACE_SYSTEM_NO_CHECK_TYPE, 8

	.type	.L.str.20,@object       // @.str.20
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.20:
	.asciz	"GC_GREEDY"
	.size	.L.str.20, 10

	.type	__TRACE_SYSTEM_GC_GREEDY,@object // @__TRACE_SYSTEM_GC_GREEDY
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_GC_GREEDY:
	.xword	.L.str.320
	.xword	.L.str.20
	.xword	1                       // 0x1
	.size	__TRACE_SYSTEM_GC_GREEDY, 24

	.type	TRACE_SYSTEM_GC_GREEDY,@object // @TRACE_SYSTEM_GC_GREEDY
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_GC_GREEDY:
	.xword	__TRACE_SYSTEM_GC_GREEDY
	.size	TRACE_SYSTEM_GC_GREEDY, 8

	.type	.L.str.21,@object       // @.str.21
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.21:
	.asciz	"GC_CB"
	.size	.L.str.21, 6

	.type	__TRACE_SYSTEM_GC_CB,@object // @__TRACE_SYSTEM_GC_CB
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_GC_CB:
	.xword	.L.str.320
	.xword	.L.str.21
	.xword	0                       // 0x0
	.size	__TRACE_SYSTEM_GC_CB, 24

	.type	TRACE_SYSTEM_GC_CB,@object // @TRACE_SYSTEM_GC_CB
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_GC_CB:
	.xword	__TRACE_SYSTEM_GC_CB
	.size	TRACE_SYSTEM_GC_CB, 8

	.type	.L.str.22,@object       // @.str.22
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.22:
	.asciz	"FG_GC"
	.size	.L.str.22, 6

	.type	__TRACE_SYSTEM_FG_GC,@object // @__TRACE_SYSTEM_FG_GC
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_FG_GC:
	.xword	.L.str.320
	.xword	.L.str.22
	.xword	1                       // 0x1
	.size	__TRACE_SYSTEM_FG_GC, 24

	.type	TRACE_SYSTEM_FG_GC,@object // @TRACE_SYSTEM_FG_GC
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_FG_GC:
	.xword	__TRACE_SYSTEM_FG_GC
	.size	TRACE_SYSTEM_FG_GC, 8

	.type	.L.str.23,@object       // @.str.23
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.23:
	.asciz	"BG_GC"
	.size	.L.str.23, 6

	.type	__TRACE_SYSTEM_BG_GC,@object // @__TRACE_SYSTEM_BG_GC
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_BG_GC:
	.xword	.L.str.320
	.xword	.L.str.23
	.xword	0                       // 0x0
	.size	__TRACE_SYSTEM_BG_GC, 24

	.type	TRACE_SYSTEM_BG_GC,@object // @TRACE_SYSTEM_BG_GC
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_BG_GC:
	.xword	__TRACE_SYSTEM_BG_GC
	.size	TRACE_SYSTEM_BG_GC, 8

	.type	.L.str.24,@object       // @.str.24
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.24:
	.asciz	"LFS"
	.size	.L.str.24, 4

	.type	__TRACE_SYSTEM_LFS,@object // @__TRACE_SYSTEM_LFS
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_LFS:
	.xword	.L.str.320
	.xword	.L.str.24
	.xword	0                       // 0x0
	.size	__TRACE_SYSTEM_LFS, 24

	.type	TRACE_SYSTEM_LFS,@object // @TRACE_SYSTEM_LFS
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_LFS:
	.xword	__TRACE_SYSTEM_LFS
	.size	TRACE_SYSTEM_LFS, 8

	.type	.L.str.25,@object       // @.str.25
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.25:
	.asciz	"SSR"
	.size	.L.str.25, 4

	.type	__TRACE_SYSTEM_SSR,@object // @__TRACE_SYSTEM_SSR
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_SSR:
	.xword	.L.str.320
	.xword	.L.str.25
	.xword	1                       // 0x1
	.size	__TRACE_SYSTEM_SSR, 24

	.type	TRACE_SYSTEM_SSR,@object // @TRACE_SYSTEM_SSR
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_SSR:
	.xword	__TRACE_SYSTEM_SSR
	.size	TRACE_SYSTEM_SSR, 8

	.type	.L.str.26,@object       // @.str.26
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.26:
	.asciz	"__REQ_RAHEAD"
	.size	.L.str.26, 13

	.type	__TRACE_SYSTEM___REQ_RAHEAD,@object // @__TRACE_SYSTEM___REQ_RAHEAD
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM___REQ_RAHEAD:
	.xword	.L.str.320
	.xword	.L.str.26
	.xword	20                      // 0x14
	.size	__TRACE_SYSTEM___REQ_RAHEAD, 24

	.type	TRACE_SYSTEM___REQ_RAHEAD,@object // @TRACE_SYSTEM___REQ_RAHEAD
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM___REQ_RAHEAD:
	.xword	__TRACE_SYSTEM___REQ_RAHEAD
	.size	TRACE_SYSTEM___REQ_RAHEAD, 8

	.type	.L.str.27,@object       // @.str.27
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.27:
	.asciz	"__REQ_SYNC"
	.size	.L.str.27, 11

	.type	__TRACE_SYSTEM___REQ_SYNC,@object // @__TRACE_SYSTEM___REQ_SYNC
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM___REQ_SYNC:
	.xword	.L.str.320
	.xword	.L.str.27
	.xword	11                      // 0xb
	.size	__TRACE_SYSTEM___REQ_SYNC, 24

	.type	TRACE_SYSTEM___REQ_SYNC,@object // @TRACE_SYSTEM___REQ_SYNC
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM___REQ_SYNC:
	.xword	__TRACE_SYSTEM___REQ_SYNC
	.size	TRACE_SYSTEM___REQ_SYNC, 8

	.type	.L.str.28,@object       // @.str.28
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.28:
	.asciz	"__REQ_IDLE"
	.size	.L.str.28, 11

	.type	__TRACE_SYSTEM___REQ_IDLE,@object // @__TRACE_SYSTEM___REQ_IDLE
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM___REQ_IDLE:
	.xword	.L.str.320
	.xword	.L.str.28
	.xword	15                      // 0xf
	.size	__TRACE_SYSTEM___REQ_IDLE, 24

	.type	TRACE_SYSTEM___REQ_IDLE,@object // @TRACE_SYSTEM___REQ_IDLE
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM___REQ_IDLE:
	.xword	__TRACE_SYSTEM___REQ_IDLE
	.size	TRACE_SYSTEM___REQ_IDLE, 8

	.type	.L.str.29,@object       // @.str.29
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.29:
	.asciz	"__REQ_PREFLUSH"
	.size	.L.str.29, 15

	.type	__TRACE_SYSTEM___REQ_PREFLUSH,@object // @__TRACE_SYSTEM___REQ_PREFLUSH
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM___REQ_PREFLUSH:
	.xword	.L.str.320
	.xword	.L.str.29
	.xword	19                      // 0x13
	.size	__TRACE_SYSTEM___REQ_PREFLUSH, 24

	.type	TRACE_SYSTEM___REQ_PREFLUSH,@object // @TRACE_SYSTEM___REQ_PREFLUSH
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM___REQ_PREFLUSH:
	.xword	__TRACE_SYSTEM___REQ_PREFLUSH
	.size	TRACE_SYSTEM___REQ_PREFLUSH, 8

	.type	.L.str.30,@object       // @.str.30
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.30:
	.asciz	"__REQ_FUA"
	.size	.L.str.30, 10

	.type	__TRACE_SYSTEM___REQ_FUA,@object // @__TRACE_SYSTEM___REQ_FUA
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM___REQ_FUA:
	.xword	.L.str.320
	.xword	.L.str.30
	.xword	18                      // 0x12
	.size	__TRACE_SYSTEM___REQ_FUA, 24

	.type	TRACE_SYSTEM___REQ_FUA,@object // @TRACE_SYSTEM___REQ_FUA
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM___REQ_FUA:
	.xword	__TRACE_SYSTEM___REQ_FUA
	.size	TRACE_SYSTEM___REQ_FUA, 8

	.type	.L.str.31,@object       // @.str.31
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.31:
	.asciz	"__REQ_PRIO"
	.size	.L.str.31, 11

	.type	__TRACE_SYSTEM___REQ_PRIO,@object // @__TRACE_SYSTEM___REQ_PRIO
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM___REQ_PRIO:
	.xword	.L.str.320
	.xword	.L.str.31
	.xword	13                      // 0xd
	.size	__TRACE_SYSTEM___REQ_PRIO, 24

	.type	TRACE_SYSTEM___REQ_PRIO,@object // @TRACE_SYSTEM___REQ_PRIO
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM___REQ_PRIO:
	.xword	__TRACE_SYSTEM___REQ_PRIO
	.size	TRACE_SYSTEM___REQ_PRIO, 8

	.type	.L.str.32,@object       // @.str.32
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.32:
	.asciz	"__REQ_META"
	.size	.L.str.32, 11

	.type	__TRACE_SYSTEM___REQ_META,@object // @__TRACE_SYSTEM___REQ_META
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM___REQ_META:
	.xword	.L.str.320
	.xword	.L.str.32
	.xword	12                      // 0xc
	.size	__TRACE_SYSTEM___REQ_META, 24

	.type	TRACE_SYSTEM___REQ_META,@object // @TRACE_SYSTEM___REQ_META
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM___REQ_META:
	.xword	__TRACE_SYSTEM___REQ_META
	.size	TRACE_SYSTEM___REQ_META, 8

	.type	.L.str.33,@object       // @.str.33
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.33:
	.asciz	"CP_UMOUNT"
	.size	.L.str.33, 10

	.type	__TRACE_SYSTEM_CP_UMOUNT,@object // @__TRACE_SYSTEM_CP_UMOUNT
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_CP_UMOUNT:
	.xword	.L.str.320
	.xword	.L.str.33
	.xword	1                       // 0x1
	.size	__TRACE_SYSTEM_CP_UMOUNT, 24

	.type	TRACE_SYSTEM_CP_UMOUNT,@object // @TRACE_SYSTEM_CP_UMOUNT
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_CP_UMOUNT:
	.xword	__TRACE_SYSTEM_CP_UMOUNT
	.size	TRACE_SYSTEM_CP_UMOUNT, 8

	.type	.L.str.34,@object       // @.str.34
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.34:
	.asciz	"CP_FASTBOOT"
	.size	.L.str.34, 12

	.type	__TRACE_SYSTEM_CP_FASTBOOT,@object // @__TRACE_SYSTEM_CP_FASTBOOT
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_CP_FASTBOOT:
	.xword	.L.str.320
	.xword	.L.str.34
	.xword	2                       // 0x2
	.size	__TRACE_SYSTEM_CP_FASTBOOT, 24

	.type	TRACE_SYSTEM_CP_FASTBOOT,@object // @TRACE_SYSTEM_CP_FASTBOOT
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_CP_FASTBOOT:
	.xword	__TRACE_SYSTEM_CP_FASTBOOT
	.size	TRACE_SYSTEM_CP_FASTBOOT, 8

	.type	.L.str.35,@object       // @.str.35
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.35:
	.asciz	"CP_SYNC"
	.size	.L.str.35, 8

	.type	__TRACE_SYSTEM_CP_SYNC,@object // @__TRACE_SYSTEM_CP_SYNC
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_CP_SYNC:
	.xword	.L.str.320
	.xword	.L.str.35
	.xword	4                       // 0x4
	.size	__TRACE_SYSTEM_CP_SYNC, 24

	.type	TRACE_SYSTEM_CP_SYNC,@object // @TRACE_SYSTEM_CP_SYNC
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_CP_SYNC:
	.xword	__TRACE_SYSTEM_CP_SYNC
	.size	TRACE_SYSTEM_CP_SYNC, 8

	.type	.L.str.36,@object       // @.str.36
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.36:
	.asciz	"CP_RECOVERY"
	.size	.L.str.36, 12

	.type	__TRACE_SYSTEM_CP_RECOVERY,@object // @__TRACE_SYSTEM_CP_RECOVERY
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_CP_RECOVERY:
	.xword	.L.str.320
	.xword	.L.str.36
	.xword	8                       // 0x8
	.size	__TRACE_SYSTEM_CP_RECOVERY, 24

	.type	TRACE_SYSTEM_CP_RECOVERY,@object // @TRACE_SYSTEM_CP_RECOVERY
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_CP_RECOVERY:
	.xword	__TRACE_SYSTEM_CP_RECOVERY
	.size	TRACE_SYSTEM_CP_RECOVERY, 8

	.type	.L.str.37,@object       // @.str.37
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.37:
	.asciz	"CP_DISCARD"
	.size	.L.str.37, 11

	.type	__TRACE_SYSTEM_CP_DISCARD,@object // @__TRACE_SYSTEM_CP_DISCARD
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_CP_DISCARD:
	.xword	.L.str.320
	.xword	.L.str.37
	.xword	16                      // 0x10
	.size	__TRACE_SYSTEM_CP_DISCARD, 24

	.type	TRACE_SYSTEM_CP_DISCARD,@object // @TRACE_SYSTEM_CP_DISCARD
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_CP_DISCARD:
	.xword	__TRACE_SYSTEM_CP_DISCARD
	.size	TRACE_SYSTEM_CP_DISCARD, 8

	.type	.L.str.38,@object       // @.str.38
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.38:
	.asciz	"CP_TRIMMED"
	.size	.L.str.38, 11

	.type	__TRACE_SYSTEM_CP_TRIMMED,@object // @__TRACE_SYSTEM_CP_TRIMMED
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_CP_TRIMMED:
	.xword	.L.str.320
	.xword	.L.str.38
	.xword	32                      // 0x20
	.size	__TRACE_SYSTEM_CP_TRIMMED, 24

	.type	TRACE_SYSTEM_CP_TRIMMED,@object // @TRACE_SYSTEM_CP_TRIMMED
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_CP_TRIMMED:
	.xword	__TRACE_SYSTEM_CP_TRIMMED
	.size	TRACE_SYSTEM_CP_TRIMMED, 8

	.type	.L.str.39,@object       // @.str.39
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.39:
	.asciz	"CP_PAUSE"
	.size	.L.str.39, 9

	.type	__TRACE_SYSTEM_CP_PAUSE,@object // @__TRACE_SYSTEM_CP_PAUSE
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_CP_PAUSE:
	.xword	.L.str.320
	.xword	.L.str.39
	.xword	64                      // 0x40
	.size	__TRACE_SYSTEM_CP_PAUSE, 24

	.type	TRACE_SYSTEM_CP_PAUSE,@object // @TRACE_SYSTEM_CP_PAUSE
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_CP_PAUSE:
	.xword	__TRACE_SYSTEM_CP_PAUSE
	.size	TRACE_SYSTEM_CP_PAUSE, 8

	.type	.L.str.40,@object       // @.str.40
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.40:
	.asciz	"CP_RESIZE"
	.size	.L.str.40, 10

	.type	__TRACE_SYSTEM_CP_RESIZE,@object // @__TRACE_SYSTEM_CP_RESIZE
	.section	.init.data,"aw",@progbits
	.p2align	3
__TRACE_SYSTEM_CP_RESIZE:
	.xword	.L.str.320
	.xword	.L.str.40
	.xword	128                     // 0x80
	.size	__TRACE_SYSTEM_CP_RESIZE, 24

	.type	TRACE_SYSTEM_CP_RESIZE,@object // @TRACE_SYSTEM_CP_RESIZE
	.section	_ftrace_eval_map,"aw",@progbits
	.p2align	3
TRACE_SYSTEM_CP_RESIZE:
	.xword	__TRACE_SYSTEM_CP_RESIZE
	.size	TRACE_SYSTEM_CP_RESIZE, 8

	.type	event_class_f2fs__inode,@object // @event_class_f2fs__inode
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs__inode:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs__inode
	.xword	perf_trace_f2fs__inode
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs__inode
	.xword	0
	.xword	event_class_f2fs__inode+48
	.xword	event_class_f2fs__inode+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs__inode, 72

	.type	event_class_f2fs__inode_exit,@object // @event_class_f2fs__inode_exit
	.p2align	3
event_class_f2fs__inode_exit:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs__inode_exit
	.xword	perf_trace_f2fs__inode_exit
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs__inode_exit
	.xword	0
	.xword	event_class_f2fs__inode_exit+48
	.xword	event_class_f2fs__inode_exit+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs__inode_exit, 72

	.type	trace_event_type_funcs_f2fs__inode,@object // @trace_event_type_funcs_f2fs__inode
	.data
	.p2align	3
trace_event_type_funcs_f2fs__inode:
	.xword	trace_raw_output_f2fs__inode
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs__inode, 32

	.type	print_fmt_f2fs__inode,@object // @print_fmt_f2fs__inode
print_fmt_f2fs__inode:
	.asciz	"\"dev = (%d,%d), ino = %lu, pino = %lu, i_mode = 0x%hx, i_size = %lld, i_nlink = %u, i_blocks = %llu, i_advise = 0x%x\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, (unsigned long)REC->pino, REC->mode, REC->size, (unsigned int)REC->nlink, (unsigned long long)REC->blocks, (unsigned char)REC->advise"
	.size	print_fmt_f2fs__inode, 365

	.type	event_f2fs_sync_file_enter,@object // @event_f2fs_sync_file_enter
	.p2align	3
event_f2fs_sync_file_enter:
	.zero	16
	.xword	event_class_f2fs__inode
	.xword	__tracepoint_f2fs_sync_file_enter
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__inode
	.xword	print_fmt_f2fs__inode
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_sync_file_enter, 144

	.type	__event_f2fs_sync_file_enter,@object // @__event_f2fs_sync_file_enter
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_sync_file_enter:
	.xword	event_f2fs_sync_file_enter
	.size	__event_f2fs_sync_file_enter, 8

	.type	event_class_f2fs_sync_file_exit,@object // @event_class_f2fs_sync_file_exit
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_sync_file_exit:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_sync_file_exit
	.xword	perf_trace_f2fs_sync_file_exit
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_sync_file_exit
	.xword	0
	.xword	event_class_f2fs_sync_file_exit+48
	.xword	event_class_f2fs_sync_file_exit+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_sync_file_exit, 72

	.type	trace_event_type_funcs_f2fs_sync_file_exit,@object // @trace_event_type_funcs_f2fs_sync_file_exit
	.data
	.p2align	3
trace_event_type_funcs_f2fs_sync_file_exit:
	.xword	trace_raw_output_f2fs_sync_file_exit
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_sync_file_exit, 32

	.type	print_fmt_f2fs_sync_file_exit,@object // @print_fmt_f2fs_sync_file_exit
print_fmt_f2fs_sync_file_exit:
	.asciz	"\"dev = (%d,%d), ino = %lu, cp_reason: %s, datasync = %d, ret = %d\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, __print_symbolic(REC->cp_reason, { CP_NO_NEEDED, \"no needed\" }, { CP_NON_REGULAR, \"non regular\" }, { CP_COMPRESSED, \"compressed\" }, { CP_HARDLINK, \"hardlink\" }, { CP_SB_NEED_CP, \"sb needs cp\" }, { CP_WRONG_PINO, \"wrong pino\" }, { CP_NO_SPC_ROLL, \"no space roll forward\" }, { CP_NODE_NEED_CP, \"node needs cp\" }, { CP_FASTBOOT_MODE, \"fastboot mode\" }, { CP_SPEC_LOG_NUM, \"log type is 2\" }, { CP_RECOVER_DIR, \"dir needs recovery\" }), REC->datasync, REC->ret"
	.size	print_fmt_f2fs_sync_file_exit, 635

	.type	event_f2fs_sync_file_exit,@object // @event_f2fs_sync_file_exit
	.p2align	3
event_f2fs_sync_file_exit:
	.zero	16
	.xword	event_class_f2fs_sync_file_exit
	.xword	__tracepoint_f2fs_sync_file_exit
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_sync_file_exit
	.xword	print_fmt_f2fs_sync_file_exit
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_sync_file_exit, 144

	.type	__event_f2fs_sync_file_exit,@object // @__event_f2fs_sync_file_exit
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_sync_file_exit:
	.xword	event_f2fs_sync_file_exit
	.size	__event_f2fs_sync_file_exit, 8

	.type	event_class_f2fs_sync_fs,@object // @event_class_f2fs_sync_fs
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_sync_fs:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_sync_fs
	.xword	perf_trace_f2fs_sync_fs
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_sync_fs
	.xword	0
	.xword	event_class_f2fs_sync_fs+48
	.xword	event_class_f2fs_sync_fs+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_sync_fs, 72

	.type	trace_event_type_funcs_f2fs_sync_fs,@object // @trace_event_type_funcs_f2fs_sync_fs
	.data
	.p2align	3
trace_event_type_funcs_f2fs_sync_fs:
	.xword	trace_raw_output_f2fs_sync_fs
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_sync_fs, 32

	.type	print_fmt_f2fs_sync_fs,@object // @print_fmt_f2fs_sync_fs
print_fmt_f2fs_sync_fs:
	.asciz	"\"dev = (%d,%d), superblock is %s, wait = %d\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), REC->dirty ? \"dirty\" : \"not dirty\", REC->wait"
	.size	print_fmt_f2fs_sync_fs, 179

	.type	event_f2fs_sync_fs,@object // @event_f2fs_sync_fs
	.p2align	3
event_f2fs_sync_fs:
	.zero	16
	.xword	event_class_f2fs_sync_fs
	.xword	__tracepoint_f2fs_sync_fs
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_sync_fs
	.xword	print_fmt_f2fs_sync_fs
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_sync_fs, 144

	.type	__event_f2fs_sync_fs,@object // @__event_f2fs_sync_fs
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_sync_fs:
	.xword	event_f2fs_sync_fs
	.size	__event_f2fs_sync_fs, 8

	.type	event_f2fs_iget,@object // @event_f2fs_iget
	.data
	.p2align	3
event_f2fs_iget:
	.zero	16
	.xword	event_class_f2fs__inode
	.xword	__tracepoint_f2fs_iget
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__inode
	.xword	print_fmt_f2fs__inode
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_iget, 144

	.type	__event_f2fs_iget,@object // @__event_f2fs_iget
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_iget:
	.xword	event_f2fs_iget
	.size	__event_f2fs_iget, 8

	.type	trace_event_type_funcs_f2fs__inode_exit,@object // @trace_event_type_funcs_f2fs__inode_exit
	.data
	.p2align	3
trace_event_type_funcs_f2fs__inode_exit:
	.xword	trace_raw_output_f2fs__inode_exit
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs__inode_exit, 32

	.type	print_fmt_f2fs__inode_exit,@object // @print_fmt_f2fs__inode_exit
print_fmt_f2fs__inode_exit:
	.asciz	"\"dev = (%d,%d), ino = %lu, ret = %d\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, REC->ret"
	.size	print_fmt_f2fs__inode_exit, 159

	.type	event_f2fs_iget_exit,@object // @event_f2fs_iget_exit
	.p2align	3
event_f2fs_iget_exit:
	.zero	16
	.xword	event_class_f2fs__inode_exit
	.xword	__tracepoint_f2fs_iget_exit
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__inode_exit
	.xword	print_fmt_f2fs__inode_exit
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_iget_exit, 144

	.type	__event_f2fs_iget_exit,@object // @__event_f2fs_iget_exit
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_iget_exit:
	.xword	event_f2fs_iget_exit
	.size	__event_f2fs_iget_exit, 8

	.type	event_f2fs_evict_inode,@object // @event_f2fs_evict_inode
	.data
	.p2align	3
event_f2fs_evict_inode:
	.zero	16
	.xword	event_class_f2fs__inode
	.xword	__tracepoint_f2fs_evict_inode
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__inode
	.xword	print_fmt_f2fs__inode
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_evict_inode, 144

	.type	__event_f2fs_evict_inode,@object // @__event_f2fs_evict_inode
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_evict_inode:
	.xword	event_f2fs_evict_inode
	.size	__event_f2fs_evict_inode, 8

	.type	event_f2fs_new_inode,@object // @event_f2fs_new_inode
	.data
	.p2align	3
event_f2fs_new_inode:
	.zero	16
	.xword	event_class_f2fs__inode_exit
	.xword	__tracepoint_f2fs_new_inode
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__inode_exit
	.xword	print_fmt_f2fs__inode_exit
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_new_inode, 144

	.type	__event_f2fs_new_inode,@object // @__event_f2fs_new_inode
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_new_inode:
	.xword	event_f2fs_new_inode
	.size	__event_f2fs_new_inode, 8

	.type	event_class_f2fs_unlink_enter,@object // @event_class_f2fs_unlink_enter
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_unlink_enter:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_unlink_enter
	.xword	perf_trace_f2fs_unlink_enter
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_unlink_enter
	.xword	0
	.xword	event_class_f2fs_unlink_enter+48
	.xword	event_class_f2fs_unlink_enter+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_unlink_enter, 72

	.type	trace_event_type_funcs_f2fs_unlink_enter,@object // @trace_event_type_funcs_f2fs_unlink_enter
	.data
	.p2align	3
trace_event_type_funcs_f2fs_unlink_enter:
	.xword	trace_raw_output_f2fs_unlink_enter
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_unlink_enter, 32

	.type	print_fmt_f2fs_unlink_enter,@object // @print_fmt_f2fs_unlink_enter
print_fmt_f2fs_unlink_enter:
	.asciz	"\"dev = (%d,%d), dir ino = %lu, i_size = %lld, i_blocks = %llu, name = %s\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, REC->size, (unsigned long long)REC->blocks, __get_str(name)"
	.size	print_fmt_f2fs_unlink_enter, 247

	.type	event_f2fs_unlink_enter,@object // @event_f2fs_unlink_enter
	.p2align	3
event_f2fs_unlink_enter:
	.zero	16
	.xword	event_class_f2fs_unlink_enter
	.xword	__tracepoint_f2fs_unlink_enter
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_unlink_enter
	.xword	print_fmt_f2fs_unlink_enter
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_unlink_enter, 144

	.type	__event_f2fs_unlink_enter,@object // @__event_f2fs_unlink_enter
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_unlink_enter:
	.xword	event_f2fs_unlink_enter
	.size	__event_f2fs_unlink_enter, 8

	.type	event_f2fs_unlink_exit,@object // @event_f2fs_unlink_exit
	.data
	.p2align	3
event_f2fs_unlink_exit:
	.zero	16
	.xword	event_class_f2fs__inode_exit
	.xword	__tracepoint_f2fs_unlink_exit
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__inode_exit
	.xword	print_fmt_f2fs__inode_exit
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_unlink_exit, 144

	.type	__event_f2fs_unlink_exit,@object // @__event_f2fs_unlink_exit
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_unlink_exit:
	.xword	event_f2fs_unlink_exit
	.size	__event_f2fs_unlink_exit, 8

	.type	event_f2fs_drop_inode,@object // @event_f2fs_drop_inode
	.data
	.p2align	3
event_f2fs_drop_inode:
	.zero	16
	.xword	event_class_f2fs__inode_exit
	.xword	__tracepoint_f2fs_drop_inode
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__inode_exit
	.xword	print_fmt_f2fs__inode_exit
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_drop_inode, 144

	.type	__event_f2fs_drop_inode,@object // @__event_f2fs_drop_inode
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_drop_inode:
	.xword	event_f2fs_drop_inode
	.size	__event_f2fs_drop_inode, 8

	.type	event_f2fs_truncate,@object // @event_f2fs_truncate
	.data
	.p2align	3
event_f2fs_truncate:
	.zero	16
	.xword	event_class_f2fs__inode
	.xword	__tracepoint_f2fs_truncate
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__inode
	.xword	print_fmt_f2fs__inode
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_truncate, 144

	.type	__event_f2fs_truncate,@object // @__event_f2fs_truncate
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_truncate:
	.xword	event_f2fs_truncate
	.size	__event_f2fs_truncate, 8

	.type	event_class_f2fs_truncate_data_blocks_range,@object // @event_class_f2fs_truncate_data_blocks_range
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_truncate_data_blocks_range:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_truncate_data_blocks_range
	.xword	perf_trace_f2fs_truncate_data_blocks_range
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_truncate_data_blocks_range
	.xword	0
	.xword	event_class_f2fs_truncate_data_blocks_range+48
	.xword	event_class_f2fs_truncate_data_blocks_range+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_truncate_data_blocks_range, 72

	.type	trace_event_type_funcs_f2fs_truncate_data_blocks_range,@object // @trace_event_type_funcs_f2fs_truncate_data_blocks_range
	.data
	.p2align	3
trace_event_type_funcs_f2fs_truncate_data_blocks_range:
	.xword	trace_raw_output_f2fs_truncate_data_blocks_range
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_truncate_data_blocks_range, 32

	.type	print_fmt_f2fs_truncate_data_blocks_range,@object // @print_fmt_f2fs_truncate_data_blocks_range
print_fmt_f2fs_truncate_data_blocks_range:
	.asciz	"\"dev = (%d,%d), ino = %lu, nid = %u, offset = %u, freed = %d\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, (unsigned int)REC->nid, REC->ofs, REC->free"
	.size	print_fmt_f2fs_truncate_data_blocks_range, 219

	.type	event_f2fs_truncate_data_blocks_range,@object // @event_f2fs_truncate_data_blocks_range
	.p2align	3
event_f2fs_truncate_data_blocks_range:
	.zero	16
	.xword	event_class_f2fs_truncate_data_blocks_range
	.xword	__tracepoint_f2fs_truncate_data_blocks_range
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_truncate_data_blocks_range
	.xword	print_fmt_f2fs_truncate_data_blocks_range
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_truncate_data_blocks_range, 144

	.type	__event_f2fs_truncate_data_blocks_range,@object // @__event_f2fs_truncate_data_blocks_range
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_truncate_data_blocks_range:
	.xword	event_f2fs_truncate_data_blocks_range
	.size	__event_f2fs_truncate_data_blocks_range, 8

	.type	event_class_f2fs__truncate_op,@object // @event_class_f2fs__truncate_op
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs__truncate_op:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs__truncate_op
	.xword	perf_trace_f2fs__truncate_op
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs__truncate_op
	.xword	0
	.xword	event_class_f2fs__truncate_op+48
	.xword	event_class_f2fs__truncate_op+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs__truncate_op, 72

	.type	trace_event_type_funcs_f2fs__truncate_op,@object // @trace_event_type_funcs_f2fs__truncate_op
	.data
	.p2align	3
trace_event_type_funcs_f2fs__truncate_op:
	.xword	trace_raw_output_f2fs__truncate_op
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs__truncate_op, 32

	.type	print_fmt_f2fs__truncate_op,@object // @print_fmt_f2fs__truncate_op
print_fmt_f2fs__truncate_op:
	.asciz	"\"dev = (%d,%d), ino = %lu, i_size = %lld, i_blocks = %llu, start file offset = %llu\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, REC->size, (unsigned long long)REC->blocks, (unsigned long long)REC->from"
	.size	print_fmt_f2fs__truncate_op, 272

	.type	event_f2fs_truncate_blocks_enter,@object // @event_f2fs_truncate_blocks_enter
	.p2align	3
event_f2fs_truncate_blocks_enter:
	.zero	16
	.xword	event_class_f2fs__truncate_op
	.xword	__tracepoint_f2fs_truncate_blocks_enter
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__truncate_op
	.xword	print_fmt_f2fs__truncate_op
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_truncate_blocks_enter, 144

	.type	__event_f2fs_truncate_blocks_enter,@object // @__event_f2fs_truncate_blocks_enter
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_truncate_blocks_enter:
	.xword	event_f2fs_truncate_blocks_enter
	.size	__event_f2fs_truncate_blocks_enter, 8

	.type	event_f2fs_truncate_blocks_exit,@object // @event_f2fs_truncate_blocks_exit
	.data
	.p2align	3
event_f2fs_truncate_blocks_exit:
	.zero	16
	.xword	event_class_f2fs__inode_exit
	.xword	__tracepoint_f2fs_truncate_blocks_exit
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__inode_exit
	.xword	print_fmt_f2fs__inode_exit
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_truncate_blocks_exit, 144

	.type	__event_f2fs_truncate_blocks_exit,@object // @__event_f2fs_truncate_blocks_exit
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_truncate_blocks_exit:
	.xword	event_f2fs_truncate_blocks_exit
	.size	__event_f2fs_truncate_blocks_exit, 8

	.type	event_f2fs_truncate_inode_blocks_enter,@object // @event_f2fs_truncate_inode_blocks_enter
	.data
	.p2align	3
event_f2fs_truncate_inode_blocks_enter:
	.zero	16
	.xword	event_class_f2fs__truncate_op
	.xword	__tracepoint_f2fs_truncate_inode_blocks_enter
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__truncate_op
	.xword	print_fmt_f2fs__truncate_op
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_truncate_inode_blocks_enter, 144

	.type	__event_f2fs_truncate_inode_blocks_enter,@object // @__event_f2fs_truncate_inode_blocks_enter
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_truncate_inode_blocks_enter:
	.xword	event_f2fs_truncate_inode_blocks_enter
	.size	__event_f2fs_truncate_inode_blocks_enter, 8

	.type	event_f2fs_truncate_inode_blocks_exit,@object // @event_f2fs_truncate_inode_blocks_exit
	.data
	.p2align	3
event_f2fs_truncate_inode_blocks_exit:
	.zero	16
	.xword	event_class_f2fs__inode_exit
	.xword	__tracepoint_f2fs_truncate_inode_blocks_exit
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__inode_exit
	.xword	print_fmt_f2fs__inode_exit
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_truncate_inode_blocks_exit, 144

	.type	__event_f2fs_truncate_inode_blocks_exit,@object // @__event_f2fs_truncate_inode_blocks_exit
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_truncate_inode_blocks_exit:
	.xword	event_f2fs_truncate_inode_blocks_exit
	.size	__event_f2fs_truncate_inode_blocks_exit, 8

	.type	event_class_f2fs__truncate_node,@object // @event_class_f2fs__truncate_node
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs__truncate_node:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs__truncate_node
	.xword	perf_trace_f2fs__truncate_node
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs__truncate_node
	.xword	0
	.xword	event_class_f2fs__truncate_node+48
	.xword	event_class_f2fs__truncate_node+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs__truncate_node, 72

	.type	trace_event_type_funcs_f2fs__truncate_node,@object // @trace_event_type_funcs_f2fs__truncate_node
	.data
	.p2align	3
trace_event_type_funcs_f2fs__truncate_node:
	.xword	trace_raw_output_f2fs__truncate_node
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs__truncate_node, 32

	.type	print_fmt_f2fs__truncate_node,@object // @print_fmt_f2fs__truncate_node
print_fmt_f2fs__truncate_node:
	.asciz	"\"dev = (%d,%d), ino = %lu, nid = %u, block_address = 0x%llx\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, (unsigned int)REC->nid, (unsigned long long)REC->blk_addr"
	.size	print_fmt_f2fs__truncate_node, 232

	.type	event_f2fs_truncate_nodes_enter,@object // @event_f2fs_truncate_nodes_enter
	.p2align	3
event_f2fs_truncate_nodes_enter:
	.zero	16
	.xword	event_class_f2fs__truncate_node
	.xword	__tracepoint_f2fs_truncate_nodes_enter
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__truncate_node
	.xword	print_fmt_f2fs__truncate_node
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_truncate_nodes_enter, 144

	.type	__event_f2fs_truncate_nodes_enter,@object // @__event_f2fs_truncate_nodes_enter
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_truncate_nodes_enter:
	.xword	event_f2fs_truncate_nodes_enter
	.size	__event_f2fs_truncate_nodes_enter, 8

	.type	event_f2fs_truncate_nodes_exit,@object // @event_f2fs_truncate_nodes_exit
	.data
	.p2align	3
event_f2fs_truncate_nodes_exit:
	.zero	16
	.xword	event_class_f2fs__inode_exit
	.xword	__tracepoint_f2fs_truncate_nodes_exit
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__inode_exit
	.xword	print_fmt_f2fs__inode_exit
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_truncate_nodes_exit, 144

	.type	__event_f2fs_truncate_nodes_exit,@object // @__event_f2fs_truncate_nodes_exit
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_truncate_nodes_exit:
	.xword	event_f2fs_truncate_nodes_exit
	.size	__event_f2fs_truncate_nodes_exit, 8

	.type	event_f2fs_truncate_node,@object // @event_f2fs_truncate_node
	.data
	.p2align	3
event_f2fs_truncate_node:
	.zero	16
	.xword	event_class_f2fs__truncate_node
	.xword	__tracepoint_f2fs_truncate_node
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__truncate_node
	.xword	print_fmt_f2fs__truncate_node
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_truncate_node, 144

	.type	__event_f2fs_truncate_node,@object // @__event_f2fs_truncate_node
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_truncate_node:
	.xword	event_f2fs_truncate_node
	.size	__event_f2fs_truncate_node, 8

	.type	event_class_f2fs_truncate_partial_nodes,@object // @event_class_f2fs_truncate_partial_nodes
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_truncate_partial_nodes:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_truncate_partial_nodes
	.xword	perf_trace_f2fs_truncate_partial_nodes
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_truncate_partial_nodes
	.xword	0
	.xword	event_class_f2fs_truncate_partial_nodes+48
	.xword	event_class_f2fs_truncate_partial_nodes+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_truncate_partial_nodes, 72

	.type	trace_event_type_funcs_f2fs_truncate_partial_nodes,@object // @trace_event_type_funcs_f2fs_truncate_partial_nodes
	.data
	.p2align	3
trace_event_type_funcs_f2fs_truncate_partial_nodes:
	.xword	trace_raw_output_f2fs_truncate_partial_nodes
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_truncate_partial_nodes, 32

	.type	print_fmt_f2fs_truncate_partial_nodes,@object // @print_fmt_f2fs_truncate_partial_nodes
print_fmt_f2fs_truncate_partial_nodes:
	.asciz	"\"dev = (%d,%d), ino = %lu, nid[0] = %u, nid[1] = %u, nid[2] = %u, depth = %d, err = %d\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, (unsigned int)REC->nid[0], (unsigned int)REC->nid[1], (unsigned int)REC->nid[2], REC->depth, REC->err"
	.size	print_fmt_f2fs_truncate_partial_nodes, 303

	.type	event_f2fs_truncate_partial_nodes,@object // @event_f2fs_truncate_partial_nodes
	.p2align	3
event_f2fs_truncate_partial_nodes:
	.zero	16
	.xword	event_class_f2fs_truncate_partial_nodes
	.xword	__tracepoint_f2fs_truncate_partial_nodes
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_truncate_partial_nodes
	.xword	print_fmt_f2fs_truncate_partial_nodes
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_truncate_partial_nodes, 144

	.type	__event_f2fs_truncate_partial_nodes,@object // @__event_f2fs_truncate_partial_nodes
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_truncate_partial_nodes:
	.xword	event_f2fs_truncate_partial_nodes
	.size	__event_f2fs_truncate_partial_nodes, 8

	.type	event_class_f2fs_file_write_iter,@object // @event_class_f2fs_file_write_iter
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_file_write_iter:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_file_write_iter
	.xword	perf_trace_f2fs_file_write_iter
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_file_write_iter
	.xword	0
	.xword	event_class_f2fs_file_write_iter+48
	.xword	event_class_f2fs_file_write_iter+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_file_write_iter, 72

	.type	trace_event_type_funcs_f2fs_file_write_iter,@object // @trace_event_type_funcs_f2fs_file_write_iter
	.data
	.p2align	3
trace_event_type_funcs_f2fs_file_write_iter:
	.xword	trace_raw_output_f2fs_file_write_iter
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_file_write_iter, 32

	.type	print_fmt_f2fs_file_write_iter,@object // @print_fmt_f2fs_file_write_iter
print_fmt_f2fs_file_write_iter:
	.asciz	"\"dev = (%d,%d), ino = %lu, offset = %lu, length = %lu, written(err) = %d\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, REC->offset, REC->length, REC->ret"
	.size	print_fmt_f2fs_file_write_iter, 222

	.type	event_f2fs_file_write_iter,@object // @event_f2fs_file_write_iter
	.p2align	3
event_f2fs_file_write_iter:
	.zero	16
	.xword	event_class_f2fs_file_write_iter
	.xword	__tracepoint_f2fs_file_write_iter
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_file_write_iter
	.xword	print_fmt_f2fs_file_write_iter
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_file_write_iter, 144

	.type	__event_f2fs_file_write_iter,@object // @__event_f2fs_file_write_iter
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_file_write_iter:
	.xword	event_f2fs_file_write_iter
	.size	__event_f2fs_file_write_iter, 8

	.type	event_class_f2fs_map_blocks,@object // @event_class_f2fs_map_blocks
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_map_blocks:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_map_blocks
	.xword	perf_trace_f2fs_map_blocks
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_map_blocks
	.xword	0
	.xword	event_class_f2fs_map_blocks+48
	.xword	event_class_f2fs_map_blocks+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_map_blocks, 72

	.type	trace_event_type_funcs_f2fs_map_blocks,@object // @trace_event_type_funcs_f2fs_map_blocks
	.data
	.p2align	3
trace_event_type_funcs_f2fs_map_blocks:
	.xword	trace_raw_output_f2fs_map_blocks
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_map_blocks, 32

	.type	print_fmt_f2fs_map_blocks,@object // @print_fmt_f2fs_map_blocks
print_fmt_f2fs_map_blocks:
	.asciz	"\"dev = (%d,%d), ino = %lu, file offset = %llu, start blkaddr = 0x%llx, len = 0x%llx, flags = %u,seg_type = %d, may_create = %d, err = %d\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, (unsigned long long)REC->m_lblk, (unsigned long long)REC->m_pblk, (unsigned long long)REC->m_len, REC->m_flags, REC->m_seg_type, REC->m_may_create, REC->ret"
	.size	print_fmt_f2fs_map_blocks, 408

	.type	event_f2fs_map_blocks,@object // @event_f2fs_map_blocks
	.p2align	3
event_f2fs_map_blocks:
	.zero	16
	.xword	event_class_f2fs_map_blocks
	.xword	__tracepoint_f2fs_map_blocks
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_map_blocks
	.xword	print_fmt_f2fs_map_blocks
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_map_blocks, 144

	.type	__event_f2fs_map_blocks,@object // @__event_f2fs_map_blocks
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_map_blocks:
	.xword	event_f2fs_map_blocks
	.size	__event_f2fs_map_blocks, 8

	.type	event_class_f2fs_background_gc,@object // @event_class_f2fs_background_gc
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_background_gc:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_background_gc
	.xword	perf_trace_f2fs_background_gc
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_background_gc
	.xword	0
	.xword	event_class_f2fs_background_gc+48
	.xword	event_class_f2fs_background_gc+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_background_gc, 72

	.type	trace_event_type_funcs_f2fs_background_gc,@object // @trace_event_type_funcs_f2fs_background_gc
	.data
	.p2align	3
trace_event_type_funcs_f2fs_background_gc:
	.xword	trace_raw_output_f2fs_background_gc
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_background_gc, 32

	.type	print_fmt_f2fs_background_gc,@object // @print_fmt_f2fs_background_gc
print_fmt_f2fs_background_gc:
	.asciz	"\"dev = (%d,%d), wait_ms = %u, prefree = %u, free = %u\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), REC->wait_ms, REC->prefree, REC->free"
	.size	print_fmt_f2fs_background_gc, 181

	.type	event_f2fs_background_gc,@object // @event_f2fs_background_gc
	.p2align	3
event_f2fs_background_gc:
	.zero	16
	.xword	event_class_f2fs_background_gc
	.xword	__tracepoint_f2fs_background_gc
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_background_gc
	.xword	print_fmt_f2fs_background_gc
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_background_gc, 144

	.type	__event_f2fs_background_gc,@object // @__event_f2fs_background_gc
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_background_gc:
	.xword	event_f2fs_background_gc
	.size	__event_f2fs_background_gc, 8

	.type	event_class_f2fs_gc_begin,@object // @event_class_f2fs_gc_begin
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_gc_begin:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_gc_begin
	.xword	perf_trace_f2fs_gc_begin
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_gc_begin
	.xword	0
	.xword	event_class_f2fs_gc_begin+48
	.xword	event_class_f2fs_gc_begin+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_gc_begin, 72

	.type	trace_event_type_funcs_f2fs_gc_begin,@object // @trace_event_type_funcs_f2fs_gc_begin
	.data
	.p2align	3
trace_event_type_funcs_f2fs_gc_begin:
	.xword	trace_raw_output_f2fs_gc_begin
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_gc_begin, 32

	.type	print_fmt_f2fs_gc_begin,@object // @print_fmt_f2fs_gc_begin
print_fmt_f2fs_gc_begin:
	.asciz	"\"dev = (%d,%d), sync = %d, background = %d, nodes = %lld, dents = %lld, imeta = %lld, free_sec:%u, free_seg:%u, rsv_seg:%d, prefree_seg:%u\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), REC->sync, REC->background, REC->dirty_nodes, REC->dirty_dents, REC->dirty_imeta, REC->free_sec, REC->free_seg, REC->reserved_seg, REC->prefree_seg"
	.size	print_fmt_f2fs_gc_begin, 376

	.type	event_f2fs_gc_begin,@object // @event_f2fs_gc_begin
	.p2align	3
event_f2fs_gc_begin:
	.zero	16
	.xword	event_class_f2fs_gc_begin
	.xword	__tracepoint_f2fs_gc_begin
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_gc_begin
	.xword	print_fmt_f2fs_gc_begin
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_gc_begin, 144

	.type	__event_f2fs_gc_begin,@object // @__event_f2fs_gc_begin
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_gc_begin:
	.xword	event_f2fs_gc_begin
	.size	__event_f2fs_gc_begin, 8

	.type	event_class_f2fs_gc_end,@object // @event_class_f2fs_gc_end
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_gc_end:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_gc_end
	.xword	perf_trace_f2fs_gc_end
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_gc_end
	.xword	0
	.xword	event_class_f2fs_gc_end+48
	.xword	event_class_f2fs_gc_end+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_gc_end, 72

	.type	trace_event_type_funcs_f2fs_gc_end,@object // @trace_event_type_funcs_f2fs_gc_end
	.data
	.p2align	3
trace_event_type_funcs_f2fs_gc_end:
	.xword	trace_raw_output_f2fs_gc_end
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_gc_end, 32

	.type	print_fmt_f2fs_gc_end,@object // @print_fmt_f2fs_gc_end
print_fmt_f2fs_gc_end:
	.asciz	"\"dev = (%d,%d), ret = %d, seg_freed = %d, sec_freed = %d, nodes = %lld, dents = %lld, imeta = %lld, free_sec:%u, free_seg:%u, rsv_seg:%d, prefree_seg:%u\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), REC->ret, REC->seg_freed, REC->sec_freed, REC->dirty_nodes, REC->dirty_dents, REC->dirty_imeta, REC->free_sec, REC->free_seg, REC->reserved_seg, REC->prefree_seg"
	.size	print_fmt_f2fs_gc_end, 404

	.type	event_f2fs_gc_end,@object // @event_f2fs_gc_end
	.p2align	3
event_f2fs_gc_end:
	.zero	16
	.xword	event_class_f2fs_gc_end
	.xword	__tracepoint_f2fs_gc_end
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_gc_end
	.xword	print_fmt_f2fs_gc_end
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_gc_end, 144

	.type	__event_f2fs_gc_end,@object // @__event_f2fs_gc_end
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_gc_end:
	.xword	event_f2fs_gc_end
	.size	__event_f2fs_gc_end, 8

	.type	event_class_f2fs_get_victim,@object // @event_class_f2fs_get_victim
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_get_victim:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_get_victim
	.xword	perf_trace_f2fs_get_victim
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_get_victim
	.xword	0
	.xword	event_class_f2fs_get_victim+48
	.xword	event_class_f2fs_get_victim+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_get_victim, 72

	.type	trace_event_type_funcs_f2fs_get_victim,@object // @trace_event_type_funcs_f2fs_get_victim
	.data
	.p2align	3
trace_event_type_funcs_f2fs_get_victim:
	.xword	trace_raw_output_f2fs_get_victim
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_get_victim, 32

	.type	print_fmt_f2fs_get_victim,@object // @print_fmt_f2fs_get_victim
print_fmt_f2fs_get_victim:
	.asciz	"\"dev = (%d,%d), type = %s, policy = (%s, %s, %s), victim = %u, cost = %u, ofs_unit = %u, pre_victim_secno = %d, prefree = %u, free = %u\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), __print_symbolic(REC->type, { CURSEG_HOT_DATA, \"Hot DATA\" }, { CURSEG_WARM_DATA, \"Warm DATA\" }, { CURSEG_COLD_DATA, \"Cold DATA\" }, { CURSEG_HOT_NODE, \"Hot NODE\" }, { CURSEG_WARM_NODE, \"Warm NODE\" }, { CURSEG_COLD_NODE, \"Cold NODE\" }, { NO_CHECK_TYPE, \"No TYPE\" }), __print_symbolic(REC->gc_type, { FG_GC, \"Foreground GC\" }, { BG_GC, \"Background GC\" }), __print_symbolic(REC->alloc_mode, { LFS, \"LFS-mode\" }, { SSR, \"SSR-mode\" }), __print_symbolic(REC->gc_mode, { GC_GREEDY, \"Greedy\" }, { GC_CB, \"Cost-Benefit\" }), REC->victim, REC->cost, REC->ofs_unit, (int)REC->pre_victim, REC->prefree, REC->free"
	.size	print_fmt_f2fs_get_victim, 824

	.type	event_f2fs_get_victim,@object // @event_f2fs_get_victim
	.p2align	3
event_f2fs_get_victim:
	.zero	16
	.xword	event_class_f2fs_get_victim
	.xword	__tracepoint_f2fs_get_victim
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_get_victim
	.xword	print_fmt_f2fs_get_victim
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_get_victim, 144

	.type	__event_f2fs_get_victim,@object // @__event_f2fs_get_victim
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_get_victim:
	.xword	event_f2fs_get_victim
	.size	__event_f2fs_get_victim, 8

	.type	event_class_f2fs_lookup_start,@object // @event_class_f2fs_lookup_start
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_lookup_start:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_lookup_start
	.xword	perf_trace_f2fs_lookup_start
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_lookup_start
	.xword	0
	.xword	event_class_f2fs_lookup_start+48
	.xword	event_class_f2fs_lookup_start+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_lookup_start, 72

	.type	trace_event_type_funcs_f2fs_lookup_start,@object // @trace_event_type_funcs_f2fs_lookup_start
	.data
	.p2align	3
trace_event_type_funcs_f2fs_lookup_start:
	.xword	trace_raw_output_f2fs_lookup_start
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_lookup_start, 32

	.type	print_fmt_f2fs_lookup_start,@object // @print_fmt_f2fs_lookup_start
print_fmt_f2fs_lookup_start:
	.asciz	"\"dev = (%d,%d), pino = %lu, name:%s, flags:%u\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, __get_str(name), REC->flags"
	.size	print_fmt_f2fs_lookup_start, 188

	.type	event_f2fs_lookup_start,@object // @event_f2fs_lookup_start
	.p2align	3
event_f2fs_lookup_start:
	.zero	16
	.xword	event_class_f2fs_lookup_start
	.xword	__tracepoint_f2fs_lookup_start
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_lookup_start
	.xword	print_fmt_f2fs_lookup_start
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_lookup_start, 144

	.type	__event_f2fs_lookup_start,@object // @__event_f2fs_lookup_start
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_lookup_start:
	.xword	event_f2fs_lookup_start
	.size	__event_f2fs_lookup_start, 8

	.type	event_class_f2fs_lookup_end,@object // @event_class_f2fs_lookup_end
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_lookup_end:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_lookup_end
	.xword	perf_trace_f2fs_lookup_end
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_lookup_end
	.xword	0
	.xword	event_class_f2fs_lookup_end+48
	.xword	event_class_f2fs_lookup_end+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_lookup_end, 72

	.type	trace_event_type_funcs_f2fs_lookup_end,@object // @trace_event_type_funcs_f2fs_lookup_end
	.data
	.p2align	3
trace_event_type_funcs_f2fs_lookup_end:
	.xword	trace_raw_output_f2fs_lookup_end
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_lookup_end, 32

	.type	print_fmt_f2fs_lookup_end,@object // @print_fmt_f2fs_lookup_end
print_fmt_f2fs_lookup_end:
	.asciz	"\"dev = (%d,%d), pino = %lu, name:%s, ino:%u, err:%d\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, __get_str(name), REC->cino, REC->err"
	.size	print_fmt_f2fs_lookup_end, 203

	.type	event_f2fs_lookup_end,@object // @event_f2fs_lookup_end
	.p2align	3
event_f2fs_lookup_end:
	.zero	16
	.xword	event_class_f2fs_lookup_end
	.xword	__tracepoint_f2fs_lookup_end
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_lookup_end
	.xword	print_fmt_f2fs_lookup_end
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_lookup_end, 144

	.type	__event_f2fs_lookup_end,@object // @__event_f2fs_lookup_end
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_lookup_end:
	.xword	event_f2fs_lookup_end
	.size	__event_f2fs_lookup_end, 8

	.type	event_class_f2fs_readdir,@object // @event_class_f2fs_readdir
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_readdir:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_readdir
	.xword	perf_trace_f2fs_readdir
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_readdir
	.xword	0
	.xword	event_class_f2fs_readdir+48
	.xword	event_class_f2fs_readdir+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_readdir, 72

	.type	trace_event_type_funcs_f2fs_readdir,@object // @trace_event_type_funcs_f2fs_readdir
	.data
	.p2align	3
trace_event_type_funcs_f2fs_readdir:
	.xword	trace_raw_output_f2fs_readdir
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_readdir, 32

	.type	print_fmt_f2fs_readdir,@object // @print_fmt_f2fs_readdir
print_fmt_f2fs_readdir:
	.asciz	"\"dev = (%d,%d), ino = %lu, start_pos:%llu, end_pos:%llu, err:%d\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, REC->start, REC->end, REC->err"
	.size	print_fmt_f2fs_readdir, 209

	.type	event_f2fs_readdir,@object // @event_f2fs_readdir
	.p2align	3
event_f2fs_readdir:
	.zero	16
	.xword	event_class_f2fs_readdir
	.xword	__tracepoint_f2fs_readdir
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_readdir
	.xword	print_fmt_f2fs_readdir
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_readdir, 144

	.type	__event_f2fs_readdir,@object // @__event_f2fs_readdir
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_readdir:
	.xword	event_f2fs_readdir
	.size	__event_f2fs_readdir, 8

	.type	event_class_f2fs_fallocate,@object // @event_class_f2fs_fallocate
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_fallocate:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_fallocate
	.xword	perf_trace_f2fs_fallocate
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_fallocate
	.xword	0
	.xword	event_class_f2fs_fallocate+48
	.xword	event_class_f2fs_fallocate+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_fallocate, 72

	.type	trace_event_type_funcs_f2fs_fallocate,@object // @trace_event_type_funcs_f2fs_fallocate
	.data
	.p2align	3
trace_event_type_funcs_f2fs_fallocate:
	.xword	trace_raw_output_f2fs_fallocate
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_fallocate, 32

	.type	print_fmt_f2fs_fallocate,@object // @print_fmt_f2fs_fallocate
print_fmt_f2fs_fallocate:
	.asciz	"\"dev = (%d,%d), ino = %lu, mode = %x, offset = %lld, len = %lld,  i_size = %lld, i_blocks = %llu, ret = %d\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, REC->mode, (unsigned long long)REC->offset, (unsigned long long)REC->len, (unsigned long long)REC->size, (unsigned long long)REC->blocks, REC->ret"
	.size	print_fmt_f2fs_fallocate, 368

	.type	event_f2fs_fallocate,@object // @event_f2fs_fallocate
	.p2align	3
event_f2fs_fallocate:
	.zero	16
	.xword	event_class_f2fs_fallocate
	.xword	__tracepoint_f2fs_fallocate
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_fallocate
	.xword	print_fmt_f2fs_fallocate
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_fallocate, 144

	.type	__event_f2fs_fallocate,@object // @__event_f2fs_fallocate
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_fallocate:
	.xword	event_f2fs_fallocate
	.size	__event_f2fs_fallocate, 8

	.type	event_class_f2fs_direct_IO_enter,@object // @event_class_f2fs_direct_IO_enter
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_direct_IO_enter:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_direct_IO_enter
	.xword	perf_trace_f2fs_direct_IO_enter
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_direct_IO_enter
	.xword	0
	.xword	event_class_f2fs_direct_IO_enter+48
	.xword	event_class_f2fs_direct_IO_enter+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_direct_IO_enter, 72

	.type	trace_event_type_funcs_f2fs_direct_IO_enter,@object // @trace_event_type_funcs_f2fs_direct_IO_enter
	.data
	.p2align	3
trace_event_type_funcs_f2fs_direct_IO_enter:
	.xword	trace_raw_output_f2fs_direct_IO_enter
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_direct_IO_enter, 32

	.type	print_fmt_f2fs_direct_IO_enter,@object // @print_fmt_f2fs_direct_IO_enter
print_fmt_f2fs_direct_IO_enter:
	.asciz	"\"dev = (%d,%d), ino = %lu pos = %lld len = %lu rw = %d\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, REC->pos, REC->len, REC->rw"
	.size	print_fmt_f2fs_direct_IO_enter, 197

	.type	event_f2fs_direct_IO_enter,@object // @event_f2fs_direct_IO_enter
	.p2align	3
event_f2fs_direct_IO_enter:
	.zero	16
	.xword	event_class_f2fs_direct_IO_enter
	.xword	__tracepoint_f2fs_direct_IO_enter
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_direct_IO_enter
	.xword	print_fmt_f2fs_direct_IO_enter
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_direct_IO_enter, 144

	.type	__event_f2fs_direct_IO_enter,@object // @__event_f2fs_direct_IO_enter
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_direct_IO_enter:
	.xword	event_f2fs_direct_IO_enter
	.size	__event_f2fs_direct_IO_enter, 8

	.type	event_class_f2fs_direct_IO_exit,@object // @event_class_f2fs_direct_IO_exit
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_direct_IO_exit:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_direct_IO_exit
	.xword	perf_trace_f2fs_direct_IO_exit
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_direct_IO_exit
	.xword	0
	.xword	event_class_f2fs_direct_IO_exit+48
	.xword	event_class_f2fs_direct_IO_exit+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_direct_IO_exit, 72

	.type	trace_event_type_funcs_f2fs_direct_IO_exit,@object // @trace_event_type_funcs_f2fs_direct_IO_exit
	.data
	.p2align	3
trace_event_type_funcs_f2fs_direct_IO_exit:
	.xword	trace_raw_output_f2fs_direct_IO_exit
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_direct_IO_exit, 32

	.type	print_fmt_f2fs_direct_IO_exit,@object // @print_fmt_f2fs_direct_IO_exit
print_fmt_f2fs_direct_IO_exit:
	.asciz	"\"dev = (%d,%d), ino = %lu pos = %lld len = %lu rw = %d ret = %d\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, REC->pos, REC->len, REC->rw, REC->ret"
	.size	print_fmt_f2fs_direct_IO_exit, 216

	.type	event_f2fs_direct_IO_exit,@object // @event_f2fs_direct_IO_exit
	.p2align	3
event_f2fs_direct_IO_exit:
	.zero	16
	.xword	event_class_f2fs_direct_IO_exit
	.xword	__tracepoint_f2fs_direct_IO_exit
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_direct_IO_exit
	.xword	print_fmt_f2fs_direct_IO_exit
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_direct_IO_exit, 144

	.type	__event_f2fs_direct_IO_exit,@object // @__event_f2fs_direct_IO_exit
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_direct_IO_exit:
	.xword	event_f2fs_direct_IO_exit
	.size	__event_f2fs_direct_IO_exit, 8

	.type	event_class_f2fs_reserve_new_blocks,@object // @event_class_f2fs_reserve_new_blocks
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_reserve_new_blocks:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_reserve_new_blocks
	.xword	perf_trace_f2fs_reserve_new_blocks
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_reserve_new_blocks
	.xword	0
	.xword	event_class_f2fs_reserve_new_blocks+48
	.xword	event_class_f2fs_reserve_new_blocks+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_reserve_new_blocks, 72

	.type	trace_event_type_funcs_f2fs_reserve_new_blocks,@object // @trace_event_type_funcs_f2fs_reserve_new_blocks
	.data
	.p2align	3
trace_event_type_funcs_f2fs_reserve_new_blocks:
	.xword	trace_raw_output_f2fs_reserve_new_blocks
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_reserve_new_blocks, 32

	.type	print_fmt_f2fs_reserve_new_blocks,@object // @print_fmt_f2fs_reserve_new_blocks
print_fmt_f2fs_reserve_new_blocks:
	.asciz	"\"dev = (%d,%d), nid = %u, ofs_in_node = %u, count = %llu\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned int)REC->nid, REC->ofs_in_node, (unsigned long long)REC->count"
	.size	print_fmt_f2fs_reserve_new_blocks, 219

	.type	event_f2fs_reserve_new_blocks,@object // @event_f2fs_reserve_new_blocks
	.p2align	3
event_f2fs_reserve_new_blocks:
	.zero	16
	.xword	event_class_f2fs_reserve_new_blocks
	.xword	__tracepoint_f2fs_reserve_new_blocks
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_reserve_new_blocks
	.xword	print_fmt_f2fs_reserve_new_blocks
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_reserve_new_blocks, 144

	.type	__event_f2fs_reserve_new_blocks,@object // @__event_f2fs_reserve_new_blocks
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_reserve_new_blocks:
	.xword	event_f2fs_reserve_new_blocks
	.size	__event_f2fs_reserve_new_blocks, 8

	.type	event_class_f2fs__submit_page_bio,@object // @event_class_f2fs__submit_page_bio
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs__submit_page_bio:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs__submit_page_bio
	.xword	perf_trace_f2fs__submit_page_bio
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs__submit_page_bio
	.xword	0
	.xword	event_class_f2fs__submit_page_bio+48
	.xword	event_class_f2fs__submit_page_bio+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs__submit_page_bio, 72

	.type	trace_event_type_funcs_f2fs__submit_page_bio,@object // @trace_event_type_funcs_f2fs__submit_page_bio
	.data
	.p2align	3
trace_event_type_funcs_f2fs__submit_page_bio:
	.xword	trace_raw_output_f2fs__submit_page_bio
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs__submit_page_bio, 32

	.type	print_fmt_f2fs__submit_page_bio,@object // @print_fmt_f2fs__submit_page_bio
print_fmt_f2fs__submit_page_bio:
	.asciz	"\"dev = (%d,%d), ino = %lu, page_index = 0x%lx, oldaddr = 0x%llx, newaddr = 0x%llx, rw = %s(%s), type = %s_%s\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, (unsigned long)REC->index, (unsigned long long)REC->old_blkaddr, (unsigned long long)REC->new_blkaddr, blk_op_str(REC->op), __print_flags((REC->op_flags & ((1ULL << __REQ_RAHEAD) | (1ULL << __REQ_SYNC) | (1ULL << __REQ_META) | (1ULL << __REQ_PRIO) | (1ULL << __REQ_PREFLUSH) | (1ULL << __REQ_FUA))), \"|\", { (1ULL << __REQ_RAHEAD), \"R\" }, { (1ULL << __REQ_SYNC), \"S\" }, { (1ULL << __REQ_META), \"M\" }, { (1ULL << __REQ_PRIO), \"P\" }, { (1ULL << __REQ_PREFLUSH), \"PF\" }, { (1ULL << __REQ_FUA), \"FUA\" }), __print_symbolic(REC->temp, { HOT, \"HOT\" }, { WARM, \"WARM\" }, { COLD, \"COLD\" }), __print_symbolic(REC->type, { NODE, \"NODE\" }, { DATA, \"DATA\" }, { META, \"META\" }, { META_FLUSH, \"META_FLUSH\" }, { INMEM, \"INMEM\" }, { INMEM_DROP, \"INMEM_DROP\" }, { INMEM_INVALIDATE, \"INMEM_INVALIDATE\" }, { INMEM_REVOKE, \"INMEM_REVOKE\" }, { IPU, \"IN-PLACE\" }, { OPU, \"OUT-OF-PLACE\" })"
	.size	print_fmt_f2fs__submit_page_bio, 1088

	.type	event_f2fs_submit_page_bio,@object // @event_f2fs_submit_page_bio
	.p2align	3
event_f2fs_submit_page_bio:
	.zero	16
	.xword	event_class_f2fs__submit_page_bio
	.xword	__tracepoint_f2fs_submit_page_bio
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__submit_page_bio
	.xword	print_fmt_f2fs__submit_page_bio
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_submit_page_bio, 144

	.type	__event_f2fs_submit_page_bio,@object // @__event_f2fs_submit_page_bio
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_submit_page_bio:
	.xword	event_f2fs_submit_page_bio
	.size	__event_f2fs_submit_page_bio, 8

	.type	event_f2fs_submit_page_write,@object // @event_f2fs_submit_page_write
	.data
	.p2align	3
event_f2fs_submit_page_write:
	.zero	16
	.xword	event_class_f2fs__submit_page_bio
	.xword	__tracepoint_f2fs_submit_page_write
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__submit_page_bio
	.xword	print_fmt_f2fs__submit_page_bio
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_submit_page_write, 144

	.type	__event_f2fs_submit_page_write,@object // @__event_f2fs_submit_page_write
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_submit_page_write:
	.xword	event_f2fs_submit_page_write
	.size	__event_f2fs_submit_page_write, 8

	.type	event_class_f2fs__bio,@object // @event_class_f2fs__bio
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs__bio:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs__bio
	.xword	perf_trace_f2fs__bio
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs__bio
	.xword	0
	.xword	event_class_f2fs__bio+48
	.xword	event_class_f2fs__bio+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs__bio, 72

	.type	trace_event_type_funcs_f2fs__bio,@object // @trace_event_type_funcs_f2fs__bio
	.data
	.p2align	3
trace_event_type_funcs_f2fs__bio:
	.xword	trace_raw_output_f2fs__bio
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs__bio, 32

	.type	print_fmt_f2fs__bio,@object // @print_fmt_f2fs__bio
print_fmt_f2fs__bio:
	.asciz	"\"dev = (%d,%d)/(%d,%d), rw = %s(%s), %s, sector = %lld, size = %u\", ((unsigned int) ((REC->target) >> 20)), ((unsigned int) ((REC->target) & ((1U << 20) - 1))), ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), blk_op_str(REC->op), __print_flags((REC->op_flags & ((1ULL << __REQ_RAHEAD) | (1ULL << __REQ_SYNC) | (1ULL << __REQ_META) | (1ULL << __REQ_PRIO) | (1ULL << __REQ_PREFLUSH) | (1ULL << __REQ_FUA))), \"|\", { (1ULL << __REQ_RAHEAD), \"R\" }, { (1ULL << __REQ_SYNC), \"S\" }, { (1ULL << __REQ_META), \"M\" }, { (1ULL << __REQ_PRIO), \"P\" }, { (1ULL << __REQ_PREFLUSH), \"PF\" }, { (1ULL << __REQ_FUA), \"FUA\" }), __print_symbolic(REC->type, { NODE, \"NODE\" }, { DATA, \"DATA\" }, { META, \"META\" }, { META_FLUSH, \"META_FLUSH\" }, { INMEM, \"INMEM\" }, { INMEM_DROP, \"INMEM_DROP\" }, { INMEM_INVALIDATE, \"INMEM_INVALIDATE\" }, { INMEM_REVOKE, \"INMEM_REVOKE\" }, { IPU, \"IN-PLACE\" }, { OPU, \"OUT-OF-PLACE\" }), (unsigned long long)REC->sector, REC->size"
	.size	print_fmt_f2fs__bio, 973

	.type	event_f2fs_prepare_write_bio,@object // @event_f2fs_prepare_write_bio
	.p2align	3
event_f2fs_prepare_write_bio:
	.zero	16
	.xword	event_class_f2fs__bio
	.xword	__tracepoint_f2fs_prepare_write_bio
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__bio
	.xword	print_fmt_f2fs__bio
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_prepare_write_bio, 144

	.type	__event_f2fs_prepare_write_bio,@object // @__event_f2fs_prepare_write_bio
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_prepare_write_bio:
	.xword	event_f2fs_prepare_write_bio
	.size	__event_f2fs_prepare_write_bio, 8

	.type	event_f2fs_prepare_read_bio,@object // @event_f2fs_prepare_read_bio
	.data
	.p2align	3
event_f2fs_prepare_read_bio:
	.zero	16
	.xword	event_class_f2fs__bio
	.xword	__tracepoint_f2fs_prepare_read_bio
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__bio
	.xword	print_fmt_f2fs__bio
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_prepare_read_bio, 144

	.type	__event_f2fs_prepare_read_bio,@object // @__event_f2fs_prepare_read_bio
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_prepare_read_bio:
	.xword	event_f2fs_prepare_read_bio
	.size	__event_f2fs_prepare_read_bio, 8

	.type	event_f2fs_submit_read_bio,@object // @event_f2fs_submit_read_bio
	.data
	.p2align	3
event_f2fs_submit_read_bio:
	.zero	16
	.xword	event_class_f2fs__bio
	.xword	__tracepoint_f2fs_submit_read_bio
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__bio
	.xword	print_fmt_f2fs__bio
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_submit_read_bio, 144

	.type	__event_f2fs_submit_read_bio,@object // @__event_f2fs_submit_read_bio
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_submit_read_bio:
	.xword	event_f2fs_submit_read_bio
	.size	__event_f2fs_submit_read_bio, 8

	.type	event_f2fs_submit_write_bio,@object // @event_f2fs_submit_write_bio
	.data
	.p2align	3
event_f2fs_submit_write_bio:
	.zero	16
	.xword	event_class_f2fs__bio
	.xword	__tracepoint_f2fs_submit_write_bio
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__bio
	.xword	print_fmt_f2fs__bio
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_submit_write_bio, 144

	.type	__event_f2fs_submit_write_bio,@object // @__event_f2fs_submit_write_bio
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_submit_write_bio:
	.xword	event_f2fs_submit_write_bio
	.size	__event_f2fs_submit_write_bio, 8

	.type	event_class_f2fs_write_begin,@object // @event_class_f2fs_write_begin
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_write_begin:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_write_begin
	.xword	perf_trace_f2fs_write_begin
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_write_begin
	.xword	0
	.xword	event_class_f2fs_write_begin+48
	.xword	event_class_f2fs_write_begin+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_write_begin, 72

	.type	trace_event_type_funcs_f2fs_write_begin,@object // @trace_event_type_funcs_f2fs_write_begin
	.data
	.p2align	3
trace_event_type_funcs_f2fs_write_begin:
	.xword	trace_raw_output_f2fs_write_begin
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_write_begin, 32

	.type	print_fmt_f2fs_write_begin,@object // @print_fmt_f2fs_write_begin
print_fmt_f2fs_write_begin:
	.asciz	"\"dev = (%d,%d), ino = %lu, pos = %llu, len = %u, flags = %u\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, (unsigned long long)REC->pos, REC->len, REC->flags"
	.size	print_fmt_f2fs_write_begin, 225

	.type	event_f2fs_write_begin,@object // @event_f2fs_write_begin
	.p2align	3
event_f2fs_write_begin:
	.zero	16
	.xword	event_class_f2fs_write_begin
	.xword	__tracepoint_f2fs_write_begin
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_write_begin
	.xword	print_fmt_f2fs_write_begin
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_write_begin, 144

	.type	__event_f2fs_write_begin,@object // @__event_f2fs_write_begin
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_write_begin:
	.xword	event_f2fs_write_begin
	.size	__event_f2fs_write_begin, 8

	.type	event_class_f2fs_write_end,@object // @event_class_f2fs_write_end
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_write_end:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_write_end
	.xword	perf_trace_f2fs_write_end
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_write_end
	.xword	0
	.xword	event_class_f2fs_write_end+48
	.xword	event_class_f2fs_write_end+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_write_end, 72

	.type	trace_event_type_funcs_f2fs_write_end,@object // @trace_event_type_funcs_f2fs_write_end
	.data
	.p2align	3
trace_event_type_funcs_f2fs_write_end:
	.xword	trace_raw_output_f2fs_write_end
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_write_end, 32

	.type	print_fmt_f2fs_write_end,@object // @print_fmt_f2fs_write_end
print_fmt_f2fs_write_end:
	.asciz	"\"dev = (%d,%d), ino = %lu, pos = %llu, len = %u, copied = %u\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, (unsigned long long)REC->pos, REC->len, REC->copied"
	.size	print_fmt_f2fs_write_end, 227

	.type	event_f2fs_write_end,@object // @event_f2fs_write_end
	.p2align	3
event_f2fs_write_end:
	.zero	16
	.xword	event_class_f2fs_write_end
	.xword	__tracepoint_f2fs_write_end
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_write_end
	.xword	print_fmt_f2fs_write_end
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_write_end, 144

	.type	__event_f2fs_write_end,@object // @__event_f2fs_write_end
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_write_end:
	.xword	event_f2fs_write_end
	.size	__event_f2fs_write_end, 8

	.type	event_class_f2fs__page,@object // @event_class_f2fs__page
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs__page:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs__page
	.xword	perf_trace_f2fs__page
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs__page
	.xword	0
	.xword	event_class_f2fs__page+48
	.xword	event_class_f2fs__page+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs__page, 72

	.type	trace_event_type_funcs_f2fs__page,@object // @trace_event_type_funcs_f2fs__page
	.data
	.p2align	3
trace_event_type_funcs_f2fs__page:
	.xword	trace_raw_output_f2fs__page
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs__page, 32

	.type	print_fmt_f2fs__page,@object // @print_fmt_f2fs__page
print_fmt_f2fs__page:
	.asciz	"\"dev = (%d,%d), ino = %lu, %s, %s, index = %lu, dirty = %d, uptodate = %d\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, __print_symbolic(REC->type, { NODE, \"NODE\" }, { DATA, \"DATA\" }, { META, \"META\" }, { META_FLUSH, \"META_FLUSH\" }, { INMEM, \"INMEM\" }, { INMEM_DROP, \"INMEM_DROP\" }, { INMEM_INVALIDATE, \"INMEM_INVALIDATE\" }, { INMEM_REVOKE, \"INMEM_REVOKE\" }, { IPU, \"IN-PLACE\" }, { OPU, \"OUT-OF-PLACE\" }), __print_symbolic(REC->dir, { 0, \"FILE\" }, { 1, \"DIR\" }), (unsigned long)REC->index, REC->dirty, REC->uptodate"
	.size	print_fmt_f2fs__page, 583

	.type	event_f2fs_writepage,@object // @event_f2fs_writepage
	.p2align	3
event_f2fs_writepage:
	.zero	16
	.xword	event_class_f2fs__page
	.xword	__tracepoint_f2fs_writepage
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__page
	.xword	print_fmt_f2fs__page
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_writepage, 144

	.type	__event_f2fs_writepage,@object // @__event_f2fs_writepage
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_writepage:
	.xword	event_f2fs_writepage
	.size	__event_f2fs_writepage, 8

	.type	event_f2fs_do_write_data_page,@object // @event_f2fs_do_write_data_page
	.data
	.p2align	3
event_f2fs_do_write_data_page:
	.zero	16
	.xword	event_class_f2fs__page
	.xword	__tracepoint_f2fs_do_write_data_page
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__page
	.xword	print_fmt_f2fs__page
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_do_write_data_page, 144

	.type	__event_f2fs_do_write_data_page,@object // @__event_f2fs_do_write_data_page
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_do_write_data_page:
	.xword	event_f2fs_do_write_data_page
	.size	__event_f2fs_do_write_data_page, 8

	.type	event_f2fs_readpage,@object // @event_f2fs_readpage
	.data
	.p2align	3
event_f2fs_readpage:
	.zero	16
	.xword	event_class_f2fs__page
	.xword	__tracepoint_f2fs_readpage
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__page
	.xword	print_fmt_f2fs__page
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_readpage, 144

	.type	__event_f2fs_readpage,@object // @__event_f2fs_readpage
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_readpage:
	.xword	event_f2fs_readpage
	.size	__event_f2fs_readpage, 8

	.type	event_f2fs_set_page_dirty,@object // @event_f2fs_set_page_dirty
	.data
	.p2align	3
event_f2fs_set_page_dirty:
	.zero	16
	.xword	event_class_f2fs__page
	.xword	__tracepoint_f2fs_set_page_dirty
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__page
	.xword	print_fmt_f2fs__page
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_set_page_dirty, 144

	.type	__event_f2fs_set_page_dirty,@object // @__event_f2fs_set_page_dirty
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_set_page_dirty:
	.xword	event_f2fs_set_page_dirty
	.size	__event_f2fs_set_page_dirty, 8

	.type	event_f2fs_vm_page_mkwrite,@object // @event_f2fs_vm_page_mkwrite
	.data
	.p2align	3
event_f2fs_vm_page_mkwrite:
	.zero	16
	.xword	event_class_f2fs__page
	.xword	__tracepoint_f2fs_vm_page_mkwrite
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__page
	.xword	print_fmt_f2fs__page
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_vm_page_mkwrite, 144

	.type	__event_f2fs_vm_page_mkwrite,@object // @__event_f2fs_vm_page_mkwrite
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_vm_page_mkwrite:
	.xword	event_f2fs_vm_page_mkwrite
	.size	__event_f2fs_vm_page_mkwrite, 8

	.type	event_f2fs_register_inmem_page,@object // @event_f2fs_register_inmem_page
	.data
	.p2align	3
event_f2fs_register_inmem_page:
	.zero	16
	.xword	event_class_f2fs__page
	.xword	__tracepoint_f2fs_register_inmem_page
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__page
	.xword	print_fmt_f2fs__page
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_register_inmem_page, 144

	.type	__event_f2fs_register_inmem_page,@object // @__event_f2fs_register_inmem_page
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_register_inmem_page:
	.xword	event_f2fs_register_inmem_page
	.size	__event_f2fs_register_inmem_page, 8

	.type	event_f2fs_commit_inmem_page,@object // @event_f2fs_commit_inmem_page
	.data
	.p2align	3
event_f2fs_commit_inmem_page:
	.zero	16
	.xword	event_class_f2fs__page
	.xword	__tracepoint_f2fs_commit_inmem_page
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__page
	.xword	print_fmt_f2fs__page
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_commit_inmem_page, 144

	.type	__event_f2fs_commit_inmem_page,@object // @__event_f2fs_commit_inmem_page
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_commit_inmem_page:
	.xword	event_f2fs_commit_inmem_page
	.size	__event_f2fs_commit_inmem_page, 8

	.type	event_class_f2fs_filemap_fault,@object // @event_class_f2fs_filemap_fault
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_filemap_fault:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_filemap_fault
	.xword	perf_trace_f2fs_filemap_fault
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_filemap_fault
	.xword	0
	.xword	event_class_f2fs_filemap_fault+48
	.xword	event_class_f2fs_filemap_fault+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_filemap_fault, 72

	.type	trace_event_type_funcs_f2fs_filemap_fault,@object // @trace_event_type_funcs_f2fs_filemap_fault
	.data
	.p2align	3
trace_event_type_funcs_f2fs_filemap_fault:
	.xword	trace_raw_output_f2fs_filemap_fault
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_filemap_fault, 32

	.type	print_fmt_f2fs_filemap_fault,@object // @print_fmt_f2fs_filemap_fault
print_fmt_f2fs_filemap_fault:
	.asciz	"\"dev = (%d,%d), ino = %lu, index = %lu, ret = %lx\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, (unsigned long)REC->index, REC->ret"
	.size	print_fmt_f2fs_filemap_fault, 200

	.type	event_f2fs_filemap_fault,@object // @event_f2fs_filemap_fault
	.p2align	3
event_f2fs_filemap_fault:
	.zero	16
	.xword	event_class_f2fs_filemap_fault
	.xword	__tracepoint_f2fs_filemap_fault
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_filemap_fault
	.xword	print_fmt_f2fs_filemap_fault
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_filemap_fault, 144

	.type	__event_f2fs_filemap_fault,@object // @__event_f2fs_filemap_fault
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_filemap_fault:
	.xword	event_f2fs_filemap_fault
	.size	__event_f2fs_filemap_fault, 8

	.type	event_class_f2fs_writepages,@object // @event_class_f2fs_writepages
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_writepages:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_writepages
	.xword	perf_trace_f2fs_writepages
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_writepages
	.xword	0
	.xword	event_class_f2fs_writepages+48
	.xword	event_class_f2fs_writepages+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_writepages, 72

	.type	trace_event_type_funcs_f2fs_writepages,@object // @trace_event_type_funcs_f2fs_writepages
	.data
	.p2align	3
trace_event_type_funcs_f2fs_writepages:
	.xword	trace_raw_output_f2fs_writepages
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_writepages, 32

	.type	print_fmt_f2fs_writepages,@object // @print_fmt_f2fs_writepages
print_fmt_f2fs_writepages:
	.asciz	"\"dev = (%d,%d), ino = %lu, %s, %s, nr_to_write %ld, skipped %ld, start %lld, end %lld, wb_idx %lu, sync_mode %d, kupdate %u background %u tagged %u reclaim %u cyclic %u sync %u\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, __print_symbolic(REC->type, { NODE, \"NODE\" }, { DATA, \"DATA\" }, { META, \"META\" }, { META_FLUSH, \"META_FLUSH\" }, { INMEM, \"INMEM\" }, { INMEM_DROP, \"INMEM_DROP\" }, { INMEM_INVALIDATE, \"INMEM_INVALIDATE\" }, { INMEM_REVOKE, \"INMEM_REVOKE\" }, { IPU, \"IN-PLACE\" }, { OPU, \"OUT-OF-PLACE\" }), __print_symbolic(REC->dir, { 0, \"FILE\" }, { 1, \"DIR\" }), REC->nr_to_write, REC->pages_skipped, REC->range_start, REC->range_end, (unsigned long)REC->writeback_index, REC->sync_mode, REC->for_kupdate, REC->for_background, REC->tagged_writepages, REC->for_reclaim, REC->range_cyclic, REC->for_sync"
	.size	print_fmt_f2fs_writepages, 872

	.type	event_f2fs_writepages,@object // @event_f2fs_writepages
	.p2align	3
event_f2fs_writepages:
	.zero	16
	.xword	event_class_f2fs_writepages
	.xword	__tracepoint_f2fs_writepages
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_writepages
	.xword	print_fmt_f2fs_writepages
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_writepages, 144

	.type	__event_f2fs_writepages,@object // @__event_f2fs_writepages
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_writepages:
	.xword	event_f2fs_writepages
	.size	__event_f2fs_writepages, 8

	.type	event_class_f2fs_readpages,@object // @event_class_f2fs_readpages
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_readpages:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_readpages
	.xword	perf_trace_f2fs_readpages
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_readpages
	.xword	0
	.xword	event_class_f2fs_readpages+48
	.xword	event_class_f2fs_readpages+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_readpages, 72

	.type	trace_event_type_funcs_f2fs_readpages,@object // @trace_event_type_funcs_f2fs_readpages
	.data
	.p2align	3
trace_event_type_funcs_f2fs_readpages:
	.xword	trace_raw_output_f2fs_readpages
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_readpages, 32

	.type	print_fmt_f2fs_readpages,@object // @print_fmt_f2fs_readpages
print_fmt_f2fs_readpages:
	.asciz	"\"dev = (%d,%d), ino = %lu, start = %lu nrpage = %u\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, (unsigned long)REC->start, REC->nrpage"
	.size	print_fmt_f2fs_readpages, 204

	.type	event_f2fs_readpages,@object // @event_f2fs_readpages
	.p2align	3
event_f2fs_readpages:
	.zero	16
	.xword	event_class_f2fs_readpages
	.xword	__tracepoint_f2fs_readpages
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_readpages
	.xword	print_fmt_f2fs_readpages
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_readpages, 144

	.type	__event_f2fs_readpages,@object // @__event_f2fs_readpages
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_readpages:
	.xword	event_f2fs_readpages
	.size	__event_f2fs_readpages, 8

	.type	event_class_f2fs_write_checkpoint,@object // @event_class_f2fs_write_checkpoint
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_write_checkpoint:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_write_checkpoint
	.xword	perf_trace_f2fs_write_checkpoint
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_write_checkpoint
	.xword	0
	.xword	event_class_f2fs_write_checkpoint+48
	.xword	event_class_f2fs_write_checkpoint+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_write_checkpoint, 72

	.type	trace_event_type_funcs_f2fs_write_checkpoint,@object // @trace_event_type_funcs_f2fs_write_checkpoint
	.data
	.p2align	3
trace_event_type_funcs_f2fs_write_checkpoint:
	.xword	trace_raw_output_f2fs_write_checkpoint
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_write_checkpoint, 32

	.type	print_fmt_f2fs_write_checkpoint,@object // @print_fmt_f2fs_write_checkpoint
print_fmt_f2fs_write_checkpoint:
	.asciz	"\"dev = (%d,%d), checkpoint for %s, state = %s\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), __print_flags(REC->reason, \"|\", { 0x00000001, \"Umount\" }, { 0x00000002, \"Fastboot\" }, { 0x00000004, \"Sync\" }, { 0x00000008, \"Recovery\" }, { 0x00000010, \"Discard\" }, { 0x00000040, \"Pause\" }, { 0x00000020, \"Trimmed\" }, { 0x00000080, \"Resize\" }), REC->msg"
	.size	print_fmt_f2fs_write_checkpoint, 388

	.type	event_f2fs_write_checkpoint,@object // @event_f2fs_write_checkpoint
	.p2align	3
event_f2fs_write_checkpoint:
	.zero	16
	.xword	event_class_f2fs_write_checkpoint
	.xword	__tracepoint_f2fs_write_checkpoint
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_write_checkpoint
	.xword	print_fmt_f2fs_write_checkpoint
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_write_checkpoint, 144

	.type	__event_f2fs_write_checkpoint,@object // @__event_f2fs_write_checkpoint
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_write_checkpoint:
	.xword	event_f2fs_write_checkpoint
	.size	__event_f2fs_write_checkpoint, 8

	.type	event_class_f2fs_discard,@object // @event_class_f2fs_discard
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_discard:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_discard
	.xword	perf_trace_f2fs_discard
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_discard
	.xword	0
	.xword	event_class_f2fs_discard+48
	.xword	event_class_f2fs_discard+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_discard, 72

	.type	trace_event_type_funcs_f2fs_discard,@object // @trace_event_type_funcs_f2fs_discard
	.data
	.p2align	3
trace_event_type_funcs_f2fs_discard:
	.xword	trace_raw_output_f2fs_discard
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_discard, 32

	.type	print_fmt_f2fs_discard,@object // @print_fmt_f2fs_discard
print_fmt_f2fs_discard:
	.asciz	"\"dev = (%d,%d), blkstart = 0x%llx, blklen = 0x%llx\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long long)REC->blkstart, (unsigned long long)REC->blklen"
	.size	print_fmt_f2fs_discard, 207

	.type	event_f2fs_queue_discard,@object // @event_f2fs_queue_discard
	.p2align	3
event_f2fs_queue_discard:
	.zero	16
	.xword	event_class_f2fs_discard
	.xword	__tracepoint_f2fs_queue_discard
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_discard
	.xword	print_fmt_f2fs_discard
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_queue_discard, 144

	.type	__event_f2fs_queue_discard,@object // @__event_f2fs_queue_discard
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_queue_discard:
	.xword	event_f2fs_queue_discard
	.size	__event_f2fs_queue_discard, 8

	.type	event_f2fs_issue_discard,@object // @event_f2fs_issue_discard
	.data
	.p2align	3
event_f2fs_issue_discard:
	.zero	16
	.xword	event_class_f2fs_discard
	.xword	__tracepoint_f2fs_issue_discard
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_discard
	.xword	print_fmt_f2fs_discard
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_issue_discard, 144

	.type	__event_f2fs_issue_discard,@object // @__event_f2fs_issue_discard
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_issue_discard:
	.xword	event_f2fs_issue_discard
	.size	__event_f2fs_issue_discard, 8

	.type	event_f2fs_remove_discard,@object // @event_f2fs_remove_discard
	.data
	.p2align	3
event_f2fs_remove_discard:
	.zero	16
	.xword	event_class_f2fs_discard
	.xword	__tracepoint_f2fs_remove_discard
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_discard
	.xword	print_fmt_f2fs_discard
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_remove_discard, 144

	.type	__event_f2fs_remove_discard,@object // @__event_f2fs_remove_discard
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_remove_discard:
	.xword	event_f2fs_remove_discard
	.size	__event_f2fs_remove_discard, 8

	.type	event_class_f2fs_issue_reset_zone,@object // @event_class_f2fs_issue_reset_zone
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_issue_reset_zone:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_issue_reset_zone
	.xword	perf_trace_f2fs_issue_reset_zone
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_issue_reset_zone
	.xword	0
	.xword	event_class_f2fs_issue_reset_zone+48
	.xword	event_class_f2fs_issue_reset_zone+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_issue_reset_zone, 72

	.type	trace_event_type_funcs_f2fs_issue_reset_zone,@object // @trace_event_type_funcs_f2fs_issue_reset_zone
	.data
	.p2align	3
trace_event_type_funcs_f2fs_issue_reset_zone:
	.xword	trace_raw_output_f2fs_issue_reset_zone
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_issue_reset_zone, 32

	.type	print_fmt_f2fs_issue_reset_zone,@object // @print_fmt_f2fs_issue_reset_zone
print_fmt_f2fs_issue_reset_zone:
	.asciz	"\"dev = (%d,%d), reset zone at block = 0x%llx\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long long)REC->blkstart"
	.size	print_fmt_f2fs_issue_reset_zone, 168

	.type	event_f2fs_issue_reset_zone,@object // @event_f2fs_issue_reset_zone
	.p2align	3
event_f2fs_issue_reset_zone:
	.zero	16
	.xword	event_class_f2fs_issue_reset_zone
	.xword	__tracepoint_f2fs_issue_reset_zone
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_issue_reset_zone
	.xword	print_fmt_f2fs_issue_reset_zone
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_issue_reset_zone, 144

	.type	__event_f2fs_issue_reset_zone,@object // @__event_f2fs_issue_reset_zone
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_issue_reset_zone:
	.xword	event_f2fs_issue_reset_zone
	.size	__event_f2fs_issue_reset_zone, 8

	.type	event_class_f2fs_issue_flush,@object // @event_class_f2fs_issue_flush
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_issue_flush:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_issue_flush
	.xword	perf_trace_f2fs_issue_flush
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_issue_flush
	.xword	0
	.xword	event_class_f2fs_issue_flush+48
	.xword	event_class_f2fs_issue_flush+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_issue_flush, 72

	.type	trace_event_type_funcs_f2fs_issue_flush,@object // @trace_event_type_funcs_f2fs_issue_flush
	.data
	.p2align	3
trace_event_type_funcs_f2fs_issue_flush:
	.xword	trace_raw_output_f2fs_issue_flush
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_issue_flush, 32

	.type	print_fmt_f2fs_issue_flush,@object // @print_fmt_f2fs_issue_flush
print_fmt_f2fs_issue_flush:
	.asciz	"\"dev = (%d,%d), %s %s, ret = %d\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), REC->nobarrier ? \"skip (nobarrier)\" : \"issue\", REC->flush_merge ? \" with flush_merge\" : \"\", REC->ret"
	.size	print_fmt_f2fs_issue_flush, 222

	.type	event_f2fs_issue_flush,@object // @event_f2fs_issue_flush
	.p2align	3
event_f2fs_issue_flush:
	.zero	16
	.xword	event_class_f2fs_issue_flush
	.xword	__tracepoint_f2fs_issue_flush
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_issue_flush
	.xword	print_fmt_f2fs_issue_flush
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_issue_flush, 144

	.type	__event_f2fs_issue_flush,@object // @__event_f2fs_issue_flush
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_issue_flush:
	.xword	event_f2fs_issue_flush
	.size	__event_f2fs_issue_flush, 8

	.type	event_class_f2fs_lookup_extent_tree_start,@object // @event_class_f2fs_lookup_extent_tree_start
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_lookup_extent_tree_start:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_lookup_extent_tree_start
	.xword	perf_trace_f2fs_lookup_extent_tree_start
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_lookup_extent_tree_start
	.xword	0
	.xword	event_class_f2fs_lookup_extent_tree_start+48
	.xword	event_class_f2fs_lookup_extent_tree_start+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_lookup_extent_tree_start, 72

	.type	trace_event_type_funcs_f2fs_lookup_extent_tree_start,@object // @trace_event_type_funcs_f2fs_lookup_extent_tree_start
	.data
	.p2align	3
trace_event_type_funcs_f2fs_lookup_extent_tree_start:
	.xword	trace_raw_output_f2fs_lookup_extent_tree_start
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_lookup_extent_tree_start, 32

	.type	print_fmt_f2fs_lookup_extent_tree_start,@object // @print_fmt_f2fs_lookup_extent_tree_start
print_fmt_f2fs_lookup_extent_tree_start:
	.asciz	"\"dev = (%d,%d), ino = %lu, pgofs = %u\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, REC->pgofs"
	.size	print_fmt_f2fs_lookup_extent_tree_start, 163

	.type	event_f2fs_lookup_extent_tree_start,@object // @event_f2fs_lookup_extent_tree_start
	.p2align	3
event_f2fs_lookup_extent_tree_start:
	.zero	16
	.xword	event_class_f2fs_lookup_extent_tree_start
	.xword	__tracepoint_f2fs_lookup_extent_tree_start
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_lookup_extent_tree_start
	.xword	print_fmt_f2fs_lookup_extent_tree_start
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_lookup_extent_tree_start, 144

	.type	__event_f2fs_lookup_extent_tree_start,@object // @__event_f2fs_lookup_extent_tree_start
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_lookup_extent_tree_start:
	.xword	event_f2fs_lookup_extent_tree_start
	.size	__event_f2fs_lookup_extent_tree_start, 8

	.type	event_class_f2fs_lookup_extent_tree_end,@object // @event_class_f2fs_lookup_extent_tree_end
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_lookup_extent_tree_end:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_lookup_extent_tree_end
	.xword	perf_trace_f2fs_lookup_extent_tree_end
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_lookup_extent_tree_end
	.xword	0
	.xword	event_class_f2fs_lookup_extent_tree_end+48
	.xword	event_class_f2fs_lookup_extent_tree_end+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_lookup_extent_tree_end, 72

	.type	trace_event_type_funcs_f2fs_lookup_extent_tree_end,@object // @trace_event_type_funcs_f2fs_lookup_extent_tree_end
	.data
	.p2align	3
trace_event_type_funcs_f2fs_lookup_extent_tree_end:
	.xword	trace_raw_output_f2fs_lookup_extent_tree_end
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_lookup_extent_tree_end, 32

	.type	print_fmt_f2fs_lookup_extent_tree_end,@object // @print_fmt_f2fs_lookup_extent_tree_end
print_fmt_f2fs_lookup_extent_tree_end:
	.asciz	"\"dev = (%d,%d), ino = %lu, pgofs = %u, ext_info(fofs: %u, blk: %u, len: %u)\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, REC->pgofs, REC->fofs, REC->blk, REC->len"
	.size	print_fmt_f2fs_lookup_extent_tree_end, 232

	.type	event_f2fs_lookup_extent_tree_end,@object // @event_f2fs_lookup_extent_tree_end
	.p2align	3
event_f2fs_lookup_extent_tree_end:
	.zero	16
	.xword	event_class_f2fs_lookup_extent_tree_end
	.xword	__tracepoint_f2fs_lookup_extent_tree_end
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_lookup_extent_tree_end
	.xword	print_fmt_f2fs_lookup_extent_tree_end
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_lookup_extent_tree_end, 144

	.type	__event_f2fs_lookup_extent_tree_end,@object // @__event_f2fs_lookup_extent_tree_end
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_lookup_extent_tree_end:
	.xword	event_f2fs_lookup_extent_tree_end
	.size	__event_f2fs_lookup_extent_tree_end, 8

	.type	event_class_f2fs_update_extent_tree_range,@object // @event_class_f2fs_update_extent_tree_range
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_update_extent_tree_range:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_update_extent_tree_range
	.xword	perf_trace_f2fs_update_extent_tree_range
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_update_extent_tree_range
	.xword	0
	.xword	event_class_f2fs_update_extent_tree_range+48
	.xword	event_class_f2fs_update_extent_tree_range+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_update_extent_tree_range, 72

	.type	trace_event_type_funcs_f2fs_update_extent_tree_range,@object // @trace_event_type_funcs_f2fs_update_extent_tree_range
	.data
	.p2align	3
trace_event_type_funcs_f2fs_update_extent_tree_range:
	.xword	trace_raw_output_f2fs_update_extent_tree_range
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_update_extent_tree_range, 32

	.type	print_fmt_f2fs_update_extent_tree_range,@object // @print_fmt_f2fs_update_extent_tree_range
print_fmt_f2fs_update_extent_tree_range:
	.asciz	"\"dev = (%d,%d), ino = %lu, pgofs = %u, blkaddr = %u, len = %u\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, REC->pgofs, REC->blk, REC->len"
	.size	print_fmt_f2fs_update_extent_tree_range, 207

	.type	event_f2fs_update_extent_tree_range,@object // @event_f2fs_update_extent_tree_range
	.p2align	3
event_f2fs_update_extent_tree_range:
	.zero	16
	.xword	event_class_f2fs_update_extent_tree_range
	.xword	__tracepoint_f2fs_update_extent_tree_range
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_update_extent_tree_range
	.xword	print_fmt_f2fs_update_extent_tree_range
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_update_extent_tree_range, 144

	.type	__event_f2fs_update_extent_tree_range,@object // @__event_f2fs_update_extent_tree_range
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_update_extent_tree_range:
	.xword	event_f2fs_update_extent_tree_range
	.size	__event_f2fs_update_extent_tree_range, 8

	.type	event_class_f2fs_shrink_extent_tree,@object // @event_class_f2fs_shrink_extent_tree
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_shrink_extent_tree:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_shrink_extent_tree
	.xword	perf_trace_f2fs_shrink_extent_tree
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_shrink_extent_tree
	.xword	0
	.xword	event_class_f2fs_shrink_extent_tree+48
	.xword	event_class_f2fs_shrink_extent_tree+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_shrink_extent_tree, 72

	.type	trace_event_type_funcs_f2fs_shrink_extent_tree,@object // @trace_event_type_funcs_f2fs_shrink_extent_tree
	.data
	.p2align	3
trace_event_type_funcs_f2fs_shrink_extent_tree:
	.xword	trace_raw_output_f2fs_shrink_extent_tree
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_shrink_extent_tree, 32

	.type	print_fmt_f2fs_shrink_extent_tree,@object // @print_fmt_f2fs_shrink_extent_tree
print_fmt_f2fs_shrink_extent_tree:
	.asciz	"\"dev = (%d,%d), shrunk: node_cnt = %u, tree_cnt = %u\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), REC->node_cnt, REC->tree_cnt"
	.size	print_fmt_f2fs_shrink_extent_tree, 171

	.type	event_f2fs_shrink_extent_tree,@object // @event_f2fs_shrink_extent_tree
	.p2align	3
event_f2fs_shrink_extent_tree:
	.zero	16
	.xword	event_class_f2fs_shrink_extent_tree
	.xword	__tracepoint_f2fs_shrink_extent_tree
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_shrink_extent_tree
	.xword	print_fmt_f2fs_shrink_extent_tree
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_shrink_extent_tree, 144

	.type	__event_f2fs_shrink_extent_tree,@object // @__event_f2fs_shrink_extent_tree
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_shrink_extent_tree:
	.xword	event_f2fs_shrink_extent_tree
	.size	__event_f2fs_shrink_extent_tree, 8

	.type	event_class_f2fs_destroy_extent_tree,@object // @event_class_f2fs_destroy_extent_tree
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_destroy_extent_tree:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_destroy_extent_tree
	.xword	perf_trace_f2fs_destroy_extent_tree
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_destroy_extent_tree
	.xword	0
	.xword	event_class_f2fs_destroy_extent_tree+48
	.xword	event_class_f2fs_destroy_extent_tree+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_destroy_extent_tree, 72

	.type	trace_event_type_funcs_f2fs_destroy_extent_tree,@object // @trace_event_type_funcs_f2fs_destroy_extent_tree
	.data
	.p2align	3
trace_event_type_funcs_f2fs_destroy_extent_tree:
	.xword	trace_raw_output_f2fs_destroy_extent_tree
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_destroy_extent_tree, 32

	.type	print_fmt_f2fs_destroy_extent_tree,@object // @print_fmt_f2fs_destroy_extent_tree
print_fmt_f2fs_destroy_extent_tree:
	.asciz	"\"dev = (%d,%d), ino = %lu, destroyed: node_cnt = %u\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, REC->node_cnt"
	.size	print_fmt_f2fs_destroy_extent_tree, 180

	.type	event_f2fs_destroy_extent_tree,@object // @event_f2fs_destroy_extent_tree
	.p2align	3
event_f2fs_destroy_extent_tree:
	.zero	16
	.xword	event_class_f2fs_destroy_extent_tree
	.xword	__tracepoint_f2fs_destroy_extent_tree
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_destroy_extent_tree
	.xword	print_fmt_f2fs_destroy_extent_tree
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_destroy_extent_tree, 144

	.type	__event_f2fs_destroy_extent_tree,@object // @__event_f2fs_destroy_extent_tree
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_destroy_extent_tree:
	.xword	event_f2fs_destroy_extent_tree
	.size	__event_f2fs_destroy_extent_tree, 8

	.type	event_class_f2fs_sync_dirty_inodes,@object // @event_class_f2fs_sync_dirty_inodes
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_sync_dirty_inodes:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_sync_dirty_inodes
	.xword	perf_trace_f2fs_sync_dirty_inodes
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_sync_dirty_inodes
	.xword	0
	.xword	event_class_f2fs_sync_dirty_inodes+48
	.xword	event_class_f2fs_sync_dirty_inodes+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_sync_dirty_inodes, 72

	.type	trace_event_type_funcs_f2fs_sync_dirty_inodes,@object // @trace_event_type_funcs_f2fs_sync_dirty_inodes
	.data
	.p2align	3
trace_event_type_funcs_f2fs_sync_dirty_inodes:
	.xword	trace_raw_output_f2fs_sync_dirty_inodes
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_sync_dirty_inodes, 32

	.type	print_fmt_f2fs_sync_dirty_inodes,@object // @print_fmt_f2fs_sync_dirty_inodes
print_fmt_f2fs_sync_dirty_inodes:
	.asciz	"\"dev = (%d,%d), %s, dirty count = %lld\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), __print_symbolic(REC->type, { 0, \"FILE\" }, { 1, \"DIR\" }), REC->count"
	.size	print_fmt_f2fs_sync_dirty_inodes, 197

	.type	event_f2fs_sync_dirty_inodes_enter,@object // @event_f2fs_sync_dirty_inodes_enter
	.p2align	3
event_f2fs_sync_dirty_inodes_enter:
	.zero	16
	.xword	event_class_f2fs_sync_dirty_inodes
	.xword	__tracepoint_f2fs_sync_dirty_inodes_enter
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_sync_dirty_inodes
	.xword	print_fmt_f2fs_sync_dirty_inodes
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_sync_dirty_inodes_enter, 144

	.type	__event_f2fs_sync_dirty_inodes_enter,@object // @__event_f2fs_sync_dirty_inodes_enter
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_sync_dirty_inodes_enter:
	.xword	event_f2fs_sync_dirty_inodes_enter
	.size	__event_f2fs_sync_dirty_inodes_enter, 8

	.type	event_f2fs_sync_dirty_inodes_exit,@object // @event_f2fs_sync_dirty_inodes_exit
	.data
	.p2align	3
event_f2fs_sync_dirty_inodes_exit:
	.zero	16
	.xword	event_class_f2fs_sync_dirty_inodes
	.xword	__tracepoint_f2fs_sync_dirty_inodes_exit
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_sync_dirty_inodes
	.xword	print_fmt_f2fs_sync_dirty_inodes
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_sync_dirty_inodes_exit, 144

	.type	__event_f2fs_sync_dirty_inodes_exit,@object // @__event_f2fs_sync_dirty_inodes_exit
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_sync_dirty_inodes_exit:
	.xword	event_f2fs_sync_dirty_inodes_exit
	.size	__event_f2fs_sync_dirty_inodes_exit, 8

	.type	event_class_f2fs_shutdown,@object // @event_class_f2fs_shutdown
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_shutdown:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_shutdown
	.xword	perf_trace_f2fs_shutdown
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_shutdown
	.xword	0
	.xword	event_class_f2fs_shutdown+48
	.xword	event_class_f2fs_shutdown+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_shutdown, 72

	.type	trace_event_type_funcs_f2fs_shutdown,@object // @trace_event_type_funcs_f2fs_shutdown
	.data
	.p2align	3
trace_event_type_funcs_f2fs_shutdown:
	.xword	trace_raw_output_f2fs_shutdown
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_shutdown, 32

	.type	print_fmt_f2fs_shutdown,@object // @print_fmt_f2fs_shutdown
print_fmt_f2fs_shutdown:
	.asciz	"\"dev = (%d,%d), mode: %s, ret:%d\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), __print_symbolic(REC->mode, { 0x0, \"full sync\" }, { 0x1, \"meta sync\" }, { 0x2, \"no sync\" }, { 0x3, \"meta flush\" }, { 0x4, \"need fsck\" }), REC->ret"
	.size	print_fmt_f2fs_shutdown, 269

	.type	event_f2fs_shutdown,@object // @event_f2fs_shutdown
	.p2align	3
event_f2fs_shutdown:
	.zero	16
	.xword	event_class_f2fs_shutdown
	.xword	__tracepoint_f2fs_shutdown
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_shutdown
	.xword	print_fmt_f2fs_shutdown
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_shutdown, 144

	.type	__event_f2fs_shutdown,@object // @__event_f2fs_shutdown
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_shutdown:
	.xword	event_f2fs_shutdown
	.size	__event_f2fs_shutdown, 8

	.type	event_class_f2fs_zip_start,@object // @event_class_f2fs_zip_start
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_zip_start:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_zip_start
	.xword	perf_trace_f2fs_zip_start
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_zip_start
	.xword	0
	.xword	event_class_f2fs_zip_start+48
	.xword	event_class_f2fs_zip_start+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_zip_start, 72

	.type	event_class_f2fs_zip_end,@object // @event_class_f2fs_zip_end
	.p2align	3
event_class_f2fs_zip_end:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_zip_end
	.xword	perf_trace_f2fs_zip_end
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_zip_end
	.xword	0
	.xword	event_class_f2fs_zip_end+48
	.xword	event_class_f2fs_zip_end+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_zip_end, 72

	.type	trace_event_type_funcs_f2fs_zip_start,@object // @trace_event_type_funcs_f2fs_zip_start
	.data
	.p2align	3
trace_event_type_funcs_f2fs_zip_start:
	.xword	trace_raw_output_f2fs_zip_start
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_zip_start, 32

	.type	print_fmt_f2fs_zip_start,@object // @print_fmt_f2fs_zip_start
print_fmt_f2fs_zip_start:
	.asciz	"\"dev = (%d,%d), ino = %lu, cluster_idx:%lu, cluster_size = %u, algorithm = %s\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, REC->idx, REC->size, __print_symbolic(REC->algtype, { COMPRESS_LZO, \"LZO\" }, { COMPRESS_LZ4, \"LZ4\" }, { COMPRESS_ZSTD, \"ZSTD\" }, { COMPRESS_LZORLE, \"LZO-RLE\" })"
	.size	print_fmt_f2fs_zip_start, 353

	.type	event_f2fs_compress_pages_start,@object // @event_f2fs_compress_pages_start
	.p2align	3
event_f2fs_compress_pages_start:
	.zero	16
	.xword	event_class_f2fs_zip_start
	.xword	__tracepoint_f2fs_compress_pages_start
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_zip_start
	.xword	print_fmt_f2fs_zip_start
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_compress_pages_start, 144

	.type	__event_f2fs_compress_pages_start,@object // @__event_f2fs_compress_pages_start
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_compress_pages_start:
	.xword	event_f2fs_compress_pages_start
	.size	__event_f2fs_compress_pages_start, 8

	.type	event_f2fs_decompress_pages_start,@object // @event_f2fs_decompress_pages_start
	.data
	.p2align	3
event_f2fs_decompress_pages_start:
	.zero	16
	.xword	event_class_f2fs_zip_start
	.xword	__tracepoint_f2fs_decompress_pages_start
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_zip_start
	.xword	print_fmt_f2fs_zip_start
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_decompress_pages_start, 144

	.type	__event_f2fs_decompress_pages_start,@object // @__event_f2fs_decompress_pages_start
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_decompress_pages_start:
	.xword	event_f2fs_decompress_pages_start
	.size	__event_f2fs_decompress_pages_start, 8

	.type	trace_event_type_funcs_f2fs_zip_end,@object // @trace_event_type_funcs_f2fs_zip_end
	.data
	.p2align	3
trace_event_type_funcs_f2fs_zip_end:
	.xword	trace_raw_output_f2fs_zip_end
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_zip_end, 32

	.type	print_fmt_f2fs_zip_end,@object // @print_fmt_f2fs_zip_end
print_fmt_f2fs_zip_end:
	.asciz	"\"dev = (%d,%d), ino = %lu, cluster_idx:%lu, compressed_size = %u, ret = %d\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, REC->idx, REC->size, REC->ret"
	.size	print_fmt_f2fs_zip_end, 219

	.type	event_f2fs_compress_pages_end,@object // @event_f2fs_compress_pages_end
	.p2align	3
event_f2fs_compress_pages_end:
	.zero	16
	.xword	event_class_f2fs_zip_end
	.xword	__tracepoint_f2fs_compress_pages_end
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_zip_end
	.xword	print_fmt_f2fs_zip_end
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_compress_pages_end, 144

	.type	__event_f2fs_compress_pages_end,@object // @__event_f2fs_compress_pages_end
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_compress_pages_end:
	.xword	event_f2fs_compress_pages_end
	.size	__event_f2fs_compress_pages_end, 8

	.type	event_f2fs_decompress_pages_end,@object // @event_f2fs_decompress_pages_end
	.data
	.p2align	3
event_f2fs_decompress_pages_end:
	.zero	16
	.xword	event_class_f2fs_zip_end
	.xword	__tracepoint_f2fs_decompress_pages_end
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_zip_end
	.xword	print_fmt_f2fs_zip_end
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_decompress_pages_end, 144

	.type	__event_f2fs_decompress_pages_end,@object // @__event_f2fs_decompress_pages_end
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_decompress_pages_end:
	.xword	event_f2fs_decompress_pages_end
	.size	__event_f2fs_decompress_pages_end, 8

	.type	event_class_f2fs_iostat,@object // @event_class_f2fs_iostat
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_iostat:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_iostat
	.xword	perf_trace_f2fs_iostat
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_iostat
	.xword	0
	.xword	event_class_f2fs_iostat+48
	.xword	event_class_f2fs_iostat+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_iostat, 72

	.type	trace_event_type_funcs_f2fs_iostat,@object // @trace_event_type_funcs_f2fs_iostat
	.data
	.p2align	3
trace_event_type_funcs_f2fs_iostat:
	.xword	trace_raw_output_f2fs_iostat
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_iostat, 32

	.type	print_fmt_f2fs_iostat,@object // @print_fmt_f2fs_iostat
print_fmt_f2fs_iostat:
	.asciz	"\"dev = (%d,%d), app [write=%llu (direct=%llu, buffered=%llu), mapped=%llu], fs [data=%llu, node=%llu, meta=%llu, discard=%llu], gc [data=%llu, node=%llu], cp [data=%llu, node=%llu, meta=%llu], app [read=%llu (direct=%llu, buffered=%llu), mapped=%llu], fs [data=%llu, (gc_data=%llu, compr_data=%llu), node=%llu, meta=%llu]\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), REC->app_wio, REC->app_dio, REC->app_bio, REC->app_mio, REC->fs_dio, REC->fs_nio, REC->fs_mio, REC->fs_discard, REC->fs_gc_dio, REC->fs_gc_nio, REC->fs_cp_dio, REC->fs_cp_nio, REC->fs_cp_mio, REC->app_rio, REC->app_drio, REC->app_brio, REC->app_mrio, REC->fs_drio, REC->fs_gdrio, REC->fs_cdrio, REC->fs_nrio, REC->fs_mrio"
	.size	print_fmt_f2fs_iostat, 733

	.type	event_f2fs_iostat,@object // @event_f2fs_iostat
	.p2align	3
event_f2fs_iostat:
	.zero	16
	.xword	event_class_f2fs_iostat
	.xword	__tracepoint_f2fs_iostat
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_iostat
	.xword	print_fmt_f2fs_iostat
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_iostat, 144

	.type	__event_f2fs_iostat,@object // @__event_f2fs_iostat
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_iostat:
	.xword	event_f2fs_iostat
	.size	__event_f2fs_iostat, 8

	.type	event_class_f2fs_grading_ssr,@object // @event_class_f2fs_grading_ssr
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs_grading_ssr:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs_grading_ssr
	.xword	perf_trace_f2fs_grading_ssr
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs_grading_ssr
	.xword	0
	.xword	event_class_f2fs_grading_ssr+48
	.xword	event_class_f2fs_grading_ssr+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs_grading_ssr, 72

	.type	trace_event_type_funcs_f2fs_grading_ssr,@object // @trace_event_type_funcs_f2fs_grading_ssr
	.data
	.p2align	3
trace_event_type_funcs_f2fs_grading_ssr:
	.xword	trace_raw_output_f2fs_grading_ssr
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs_grading_ssr, 32

	.type	print_fmt_f2fs_grading_ssr,@object // @print_fmt_f2fs_grading_ssr
print_fmt_f2fs_grading_ssr:
	.asciz	"\"ssr :left_space %u free_segments: %u is_seq: %u \", REC->left, REC->free, REC->seq"
	.size	print_fmt_f2fs_grading_ssr, 83

	.type	event_f2fs_grading_ssr_allocate,@object // @event_f2fs_grading_ssr_allocate
	.p2align	3
event_f2fs_grading_ssr_allocate:
	.zero	16
	.xword	event_class_f2fs_grading_ssr
	.xword	__tracepoint_f2fs_grading_ssr_allocate
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs_grading_ssr
	.xword	print_fmt_f2fs_grading_ssr
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_grading_ssr_allocate, 144

	.type	__event_f2fs_grading_ssr_allocate,@object // @__event_f2fs_grading_ssr_allocate
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_grading_ssr_allocate:
	.xword	event_f2fs_grading_ssr_allocate
	.size	__event_f2fs_grading_ssr_allocate, 8

	.type	event_class_f2fs__dedup_inode,@object // @event_class_f2fs__dedup_inode
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs__dedup_inode:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs__dedup_inode
	.xword	perf_trace_f2fs__dedup_inode
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs__dedup_inode
	.xword	0
	.xword	event_class_f2fs__dedup_inode+48
	.xword	event_class_f2fs__dedup_inode+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs__dedup_inode, 72

	.type	trace_event_type_funcs_f2fs__dedup_inode,@object // @trace_event_type_funcs_f2fs__dedup_inode
	.data
	.p2align	3
trace_event_type_funcs_f2fs__dedup_inode:
	.xword	trace_raw_output_f2fs__dedup_inode
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs__dedup_inode, 32

	.type	print_fmt_f2fs__dedup_inode,@object // @print_fmt_f2fs__dedup_inode
print_fmt_f2fs__dedup_inode:
	.asciz	"\"dev = (%d,%d), ino = %lu, pino = %lu, i_size = %lld, i_nlink = %u, inner = %lu, inner i_nlink = %u\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, (unsigned long)REC->pino, REC->size, (unsigned int)REC->nlink, (unsigned long)REC->inner_ino, (unsigned int)REC->inner_nlink"
	.size	print_fmt_f2fs__dedup_inode, 339

	.type	event_f2fs_dedup_ioc_create_layered_inode,@object // @event_f2fs_dedup_ioc_create_layered_inode
	.p2align	3
event_f2fs_dedup_ioc_create_layered_inode:
	.zero	16
	.xword	event_class_f2fs__dedup_inode
	.xword	__tracepoint_f2fs_dedup_ioc_create_layered_inode
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__dedup_inode
	.xword	print_fmt_f2fs__dedup_inode
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_dedup_ioc_create_layered_inode, 144

	.type	__event_f2fs_dedup_ioc_create_layered_inode,@object // @__event_f2fs_dedup_ioc_create_layered_inode
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_dedup_ioc_create_layered_inode:
	.xword	event_f2fs_dedup_ioc_create_layered_inode
	.size	__event_f2fs_dedup_ioc_create_layered_inode, 8

	.type	event_f2fs_dedup_ioc_dedup_inode,@object // @event_f2fs_dedup_ioc_dedup_inode
	.data
	.p2align	3
event_f2fs_dedup_ioc_dedup_inode:
	.zero	16
	.xword	event_class_f2fs__dedup_inode
	.xword	__tracepoint_f2fs_dedup_ioc_dedup_inode
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__dedup_inode
	.xword	print_fmt_f2fs__dedup_inode
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_dedup_ioc_dedup_inode, 144

	.type	__event_f2fs_dedup_ioc_dedup_inode,@object // @__event_f2fs_dedup_ioc_dedup_inode
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_dedup_ioc_dedup_inode:
	.xword	event_f2fs_dedup_ioc_dedup_inode
	.size	__event_f2fs_dedup_ioc_dedup_inode, 8

	.type	event_f2fs_dedup_revoke_inode,@object // @event_f2fs_dedup_revoke_inode
	.data
	.p2align	3
event_f2fs_dedup_revoke_inode:
	.zero	16
	.xword	event_class_f2fs__dedup_inode
	.xword	__tracepoint_f2fs_dedup_revoke_inode
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__dedup_inode
	.xword	print_fmt_f2fs__dedup_inode
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_dedup_revoke_inode, 144

	.type	__event_f2fs_dedup_revoke_inode,@object // @__event_f2fs_dedup_revoke_inode
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_dedup_revoke_inode:
	.xword	event_f2fs_dedup_revoke_inode
	.size	__event_f2fs_dedup_revoke_inode, 8

	.type	event_f2fs_dedup_revoke_fail,@object // @event_f2fs_dedup_revoke_fail
	.data
	.p2align	3
event_f2fs_dedup_revoke_fail:
	.zero	16
	.xword	event_class_f2fs__dedup_inode
	.xword	__tracepoint_f2fs_dedup_revoke_fail
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__dedup_inode
	.xword	print_fmt_f2fs__dedup_inode
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_dedup_revoke_fail, 144

	.type	__event_f2fs_dedup_revoke_fail,@object // @__event_f2fs_dedup_revoke_fail
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_dedup_revoke_fail:
	.xword	event_f2fs_dedup_revoke_fail
	.size	__event_f2fs_dedup_revoke_fail, 8

	.type	event_f2fs_dedup_dec_inner_link,@object // @event_f2fs_dedup_dec_inner_link
	.data
	.p2align	3
event_f2fs_dedup_dec_inner_link:
	.zero	16
	.xword	event_class_f2fs__dedup_inode
	.xword	__tracepoint_f2fs_dedup_dec_inner_link
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__dedup_inode
	.xword	print_fmt_f2fs__dedup_inode
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_dedup_dec_inner_link, 144

	.type	__event_f2fs_dedup_dec_inner_link,@object // @__event_f2fs_dedup_dec_inner_link
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_dedup_dec_inner_link:
	.xword	event_f2fs_dedup_dec_inner_link
	.size	__event_f2fs_dedup_dec_inner_link, 8

	.type	event_class_f2fs__dedup_map,@object // @event_class_f2fs__dedup_map
	.section	.ref.data,"aw",@progbits
	.p2align	3
event_class_f2fs__dedup_map:
	.xword	.L.str.320
	.xword	trace_event_raw_event_f2fs__dedup_map
	.xword	perf_trace_f2fs__dedup_map
	.xword	trace_event_reg
	.xword	trace_event_define_fields_f2fs__dedup_map
	.xword	0
	.xword	event_class_f2fs__dedup_map+48
	.xword	event_class_f2fs__dedup_map+48
	.xword	trace_event_raw_init
	.size	event_class_f2fs__dedup_map, 72

	.type	trace_event_type_funcs_f2fs__dedup_map,@object // @trace_event_type_funcs_f2fs__dedup_map
	.data
	.p2align	3
trace_event_type_funcs_f2fs__dedup_map:
	.xword	trace_raw_output_f2fs__dedup_map
	.xword	0
	.xword	0
	.xword	0
	.size	trace_event_type_funcs_f2fs__dedup_map, 32

	.type	print_fmt_f2fs__dedup_map,@object // @print_fmt_f2fs__dedup_map
print_fmt_f2fs__dedup_map:
	.asciz	"\"dev = (%d,%d), outer ino = %lu, i_size = %lld, map to inner ino = %lu, inner i_nlink = %u\", ((unsigned int) ((REC->dev) >> 20)), ((unsigned int) ((REC->dev) & ((1U << 20) - 1))), (unsigned long)REC->ino, REC->size, (unsigned long)REC->inner_ino, (unsigned int)REC->inner_nlink"
	.size	print_fmt_f2fs__dedup_map, 278

	.type	event_f2fs_dedup_map_readpage,@object // @event_f2fs_dedup_map_readpage
	.p2align	3
event_f2fs_dedup_map_readpage:
	.zero	16
	.xword	event_class_f2fs__dedup_map
	.xword	__tracepoint_f2fs_dedup_map_readpage
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__dedup_map
	.xword	print_fmt_f2fs__dedup_map
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_dedup_map_readpage, 144

	.type	__event_f2fs_dedup_map_readpage,@object // @__event_f2fs_dedup_map_readpage
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_dedup_map_readpage:
	.xword	event_f2fs_dedup_map_readpage
	.size	__event_f2fs_dedup_map_readpage, 8

	.type	event_f2fs_dedup_map_blocks,@object // @event_f2fs_dedup_map_blocks
	.data
	.p2align	3
event_f2fs_dedup_map_blocks:
	.zero	16
	.xword	event_class_f2fs__dedup_map
	.xword	__tracepoint_f2fs_dedup_map_blocks
	.zero	16
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	trace_event_type_funcs_f2fs__dedup_map
	.xword	print_fmt_f2fs__dedup_map
	.xword	0
	.xword	0
	.xword	0
	.word	16                      // 0x10
	.word	0                       // 0x0
	.xword	0
	.xword	0
	.xword	0
	.size	event_f2fs_dedup_map_blocks, 144

	.type	__event_f2fs_dedup_map_blocks,@object // @__event_f2fs_dedup_map_blocks
	.section	_ftrace_events,"aw",@progbits
	.p2align	3
__event_f2fs_dedup_map_blocks:
	.xword	event_f2fs_dedup_map_blocks
	.size	__event_f2fs_dedup_map_blocks, 8

	.type	__bpf_trace_tp_map_f2fs_sync_file_enter,@object // @__bpf_trace_tp_map_f2fs_sync_file_enter
	.section	__bpf_raw_tp_map,"aw",@progbits
	.p2align	5
__bpf_trace_tp_map_f2fs_sync_file_enter:
	.xword	__tracepoint_f2fs_sync_file_enter
	.xword	__bpf_trace_f2fs__inode
	.word	1                       // 0x1
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_sync_file_enter, 32

	.type	__bpf_trace_tp_map_f2fs_sync_file_exit,@object // @__bpf_trace_tp_map_f2fs_sync_file_exit
	.p2align	5
__bpf_trace_tp_map_f2fs_sync_file_exit:
	.xword	__tracepoint_f2fs_sync_file_exit
	.xword	__bpf_trace_f2fs_sync_file_exit
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_sync_file_exit, 32

	.type	__bpf_trace_tp_map_f2fs_sync_fs,@object // @__bpf_trace_tp_map_f2fs_sync_fs
	.p2align	5
__bpf_trace_tp_map_f2fs_sync_fs:
	.xword	__tracepoint_f2fs_sync_fs
	.xword	__bpf_trace_f2fs_sync_fs
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_sync_fs, 32

	.type	__bpf_trace_tp_map_f2fs_iget,@object // @__bpf_trace_tp_map_f2fs_iget
	.p2align	5
__bpf_trace_tp_map_f2fs_iget:
	.xword	__tracepoint_f2fs_iget
	.xword	__bpf_trace_f2fs__inode
	.word	1                       // 0x1
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_iget, 32

	.type	__bpf_trace_tp_map_f2fs_iget_exit,@object // @__bpf_trace_tp_map_f2fs_iget_exit
	.p2align	5
__bpf_trace_tp_map_f2fs_iget_exit:
	.xword	__tracepoint_f2fs_iget_exit
	.xword	__bpf_trace_f2fs__inode_exit
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_iget_exit, 32

	.type	__bpf_trace_tp_map_f2fs_evict_inode,@object // @__bpf_trace_tp_map_f2fs_evict_inode
	.p2align	5
__bpf_trace_tp_map_f2fs_evict_inode:
	.xword	__tracepoint_f2fs_evict_inode
	.xword	__bpf_trace_f2fs__inode
	.word	1                       // 0x1
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_evict_inode, 32

	.type	__bpf_trace_tp_map_f2fs_new_inode,@object // @__bpf_trace_tp_map_f2fs_new_inode
	.p2align	5
__bpf_trace_tp_map_f2fs_new_inode:
	.xword	__tracepoint_f2fs_new_inode
	.xword	__bpf_trace_f2fs__inode_exit
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_new_inode, 32

	.type	__bpf_trace_tp_map_f2fs_unlink_enter,@object // @__bpf_trace_tp_map_f2fs_unlink_enter
	.p2align	5
__bpf_trace_tp_map_f2fs_unlink_enter:
	.xword	__tracepoint_f2fs_unlink_enter
	.xword	__bpf_trace_f2fs_unlink_enter
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_unlink_enter, 32

	.type	__bpf_trace_tp_map_f2fs_unlink_exit,@object // @__bpf_trace_tp_map_f2fs_unlink_exit
	.p2align	5
__bpf_trace_tp_map_f2fs_unlink_exit:
	.xword	__tracepoint_f2fs_unlink_exit
	.xword	__bpf_trace_f2fs__inode_exit
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_unlink_exit, 32

	.type	__bpf_trace_tp_map_f2fs_drop_inode,@object // @__bpf_trace_tp_map_f2fs_drop_inode
	.p2align	5
__bpf_trace_tp_map_f2fs_drop_inode:
	.xword	__tracepoint_f2fs_drop_inode
	.xword	__bpf_trace_f2fs__inode_exit
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_drop_inode, 32

	.type	__bpf_trace_tp_map_f2fs_truncate,@object // @__bpf_trace_tp_map_f2fs_truncate
	.p2align	5
__bpf_trace_tp_map_f2fs_truncate:
	.xword	__tracepoint_f2fs_truncate
	.xword	__bpf_trace_f2fs__inode
	.word	1                       // 0x1
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_truncate, 32

	.type	__bpf_trace_tp_map_f2fs_truncate_data_blocks_range,@object // @__bpf_trace_tp_map_f2fs_truncate_data_blocks_range
	.p2align	5
__bpf_trace_tp_map_f2fs_truncate_data_blocks_range:
	.xword	__tracepoint_f2fs_truncate_data_blocks_range
	.xword	__bpf_trace_f2fs_truncate_data_blocks_range
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_truncate_data_blocks_range, 32

	.type	__bpf_trace_tp_map_f2fs_truncate_blocks_enter,@object // @__bpf_trace_tp_map_f2fs_truncate_blocks_enter
	.p2align	5
__bpf_trace_tp_map_f2fs_truncate_blocks_enter:
	.xword	__tracepoint_f2fs_truncate_blocks_enter
	.xword	__bpf_trace_f2fs__truncate_op
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_truncate_blocks_enter, 32

	.type	__bpf_trace_tp_map_f2fs_truncate_blocks_exit,@object // @__bpf_trace_tp_map_f2fs_truncate_blocks_exit
	.p2align	5
__bpf_trace_tp_map_f2fs_truncate_blocks_exit:
	.xword	__tracepoint_f2fs_truncate_blocks_exit
	.xword	__bpf_trace_f2fs__inode_exit
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_truncate_blocks_exit, 32

	.type	__bpf_trace_tp_map_f2fs_truncate_inode_blocks_enter,@object // @__bpf_trace_tp_map_f2fs_truncate_inode_blocks_enter
	.p2align	5
__bpf_trace_tp_map_f2fs_truncate_inode_blocks_enter:
	.xword	__tracepoint_f2fs_truncate_inode_blocks_enter
	.xword	__bpf_trace_f2fs__truncate_op
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_truncate_inode_blocks_enter, 32

	.type	__bpf_trace_tp_map_f2fs_truncate_inode_blocks_exit,@object // @__bpf_trace_tp_map_f2fs_truncate_inode_blocks_exit
	.p2align	5
__bpf_trace_tp_map_f2fs_truncate_inode_blocks_exit:
	.xword	__tracepoint_f2fs_truncate_inode_blocks_exit
	.xword	__bpf_trace_f2fs__inode_exit
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_truncate_inode_blocks_exit, 32

	.type	__bpf_trace_tp_map_f2fs_truncate_nodes_enter,@object // @__bpf_trace_tp_map_f2fs_truncate_nodes_enter
	.p2align	5
__bpf_trace_tp_map_f2fs_truncate_nodes_enter:
	.xword	__tracepoint_f2fs_truncate_nodes_enter
	.xword	__bpf_trace_f2fs__truncate_node
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_truncate_nodes_enter, 32

	.type	__bpf_trace_tp_map_f2fs_truncate_nodes_exit,@object // @__bpf_trace_tp_map_f2fs_truncate_nodes_exit
	.p2align	5
__bpf_trace_tp_map_f2fs_truncate_nodes_exit:
	.xword	__tracepoint_f2fs_truncate_nodes_exit
	.xword	__bpf_trace_f2fs__inode_exit
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_truncate_nodes_exit, 32

	.type	__bpf_trace_tp_map_f2fs_truncate_node,@object // @__bpf_trace_tp_map_f2fs_truncate_node
	.p2align	5
__bpf_trace_tp_map_f2fs_truncate_node:
	.xword	__tracepoint_f2fs_truncate_node
	.xword	__bpf_trace_f2fs__truncate_node
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_truncate_node, 32

	.type	__bpf_trace_tp_map_f2fs_truncate_partial_nodes,@object // @__bpf_trace_tp_map_f2fs_truncate_partial_nodes
	.p2align	5
__bpf_trace_tp_map_f2fs_truncate_partial_nodes:
	.xword	__tracepoint_f2fs_truncate_partial_nodes
	.xword	__bpf_trace_f2fs_truncate_partial_nodes
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_truncate_partial_nodes, 32

	.type	__bpf_trace_tp_map_f2fs_file_write_iter,@object // @__bpf_trace_tp_map_f2fs_file_write_iter
	.p2align	5
__bpf_trace_tp_map_f2fs_file_write_iter:
	.xword	__tracepoint_f2fs_file_write_iter
	.xword	__bpf_trace_f2fs_file_write_iter
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_file_write_iter, 32

	.type	__bpf_trace_tp_map_f2fs_map_blocks,@object // @__bpf_trace_tp_map_f2fs_map_blocks
	.p2align	5
__bpf_trace_tp_map_f2fs_map_blocks:
	.xword	__tracepoint_f2fs_map_blocks
	.xword	__bpf_trace_f2fs_map_blocks
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_map_blocks, 32

	.type	__bpf_trace_tp_map_f2fs_background_gc,@object // @__bpf_trace_tp_map_f2fs_background_gc
	.p2align	5
__bpf_trace_tp_map_f2fs_background_gc:
	.xword	__tracepoint_f2fs_background_gc
	.xword	__bpf_trace_f2fs_background_gc
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_background_gc, 32

	.type	__bpf_trace_tp_map_f2fs_gc_begin,@object // @__bpf_trace_tp_map_f2fs_gc_begin
	.p2align	5
__bpf_trace_tp_map_f2fs_gc_begin:
	.xword	__tracepoint_f2fs_gc_begin
	.xword	__bpf_trace_f2fs_gc_begin
	.word	10                      // 0xa
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_gc_begin, 32

	.type	__bpf_trace_tp_map_f2fs_gc_end,@object // @__bpf_trace_tp_map_f2fs_gc_end
	.p2align	5
__bpf_trace_tp_map_f2fs_gc_end:
	.xword	__tracepoint_f2fs_gc_end
	.xword	__bpf_trace_f2fs_gc_end
	.word	11                      // 0xb
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_gc_end, 32

	.type	__bpf_trace_tp_map_f2fs_get_victim,@object // @__bpf_trace_tp_map_f2fs_get_victim
	.p2align	5
__bpf_trace_tp_map_f2fs_get_victim:
	.xword	__tracepoint_f2fs_get_victim
	.xword	__bpf_trace_f2fs_get_victim
	.word	7                       // 0x7
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_get_victim, 32

	.type	__bpf_trace_tp_map_f2fs_lookup_start,@object // @__bpf_trace_tp_map_f2fs_lookup_start
	.p2align	5
__bpf_trace_tp_map_f2fs_lookup_start:
	.xword	__tracepoint_f2fs_lookup_start
	.xword	__bpf_trace_f2fs_lookup_start
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_lookup_start, 32

	.type	__bpf_trace_tp_map_f2fs_lookup_end,@object // @__bpf_trace_tp_map_f2fs_lookup_end
	.p2align	5
__bpf_trace_tp_map_f2fs_lookup_end:
	.xword	__tracepoint_f2fs_lookup_end
	.xword	__bpf_trace_f2fs_lookup_end
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_lookup_end, 32

	.type	__bpf_trace_tp_map_f2fs_readdir,@object // @__bpf_trace_tp_map_f2fs_readdir
	.p2align	5
__bpf_trace_tp_map_f2fs_readdir:
	.xword	__tracepoint_f2fs_readdir
	.xword	__bpf_trace_f2fs_readdir
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_readdir, 32

	.type	__bpf_trace_tp_map_f2fs_fallocate,@object // @__bpf_trace_tp_map_f2fs_fallocate
	.p2align	5
__bpf_trace_tp_map_f2fs_fallocate:
	.xword	__tracepoint_f2fs_fallocate
	.xword	__bpf_trace_f2fs_fallocate
	.word	5                       // 0x5
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_fallocate, 32

	.type	__bpf_trace_tp_map_f2fs_direct_IO_enter,@object // @__bpf_trace_tp_map_f2fs_direct_IO_enter
	.p2align	5
__bpf_trace_tp_map_f2fs_direct_IO_enter:
	.xword	__tracepoint_f2fs_direct_IO_enter
	.xword	__bpf_trace_f2fs_direct_IO_enter
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_direct_IO_enter, 32

	.type	__bpf_trace_tp_map_f2fs_direct_IO_exit,@object // @__bpf_trace_tp_map_f2fs_direct_IO_exit
	.p2align	5
__bpf_trace_tp_map_f2fs_direct_IO_exit:
	.xword	__tracepoint_f2fs_direct_IO_exit
	.xword	__bpf_trace_f2fs_direct_IO_exit
	.word	5                       // 0x5
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_direct_IO_exit, 32

	.type	__bpf_trace_tp_map_f2fs_reserve_new_blocks,@object // @__bpf_trace_tp_map_f2fs_reserve_new_blocks
	.p2align	5
__bpf_trace_tp_map_f2fs_reserve_new_blocks:
	.xword	__tracepoint_f2fs_reserve_new_blocks
	.xword	__bpf_trace_f2fs_reserve_new_blocks
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_reserve_new_blocks, 32

	.type	__bpf_trace_tp_map_f2fs_submit_page_bio,@object // @__bpf_trace_tp_map_f2fs_submit_page_bio
	.p2align	5
__bpf_trace_tp_map_f2fs_submit_page_bio:
	.xword	__tracepoint_f2fs_submit_page_bio
	.xword	__bpf_trace_f2fs__submit_page_bio
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_submit_page_bio, 32

	.type	__bpf_trace_tp_map_f2fs_submit_page_write,@object // @__bpf_trace_tp_map_f2fs_submit_page_write
	.p2align	5
__bpf_trace_tp_map_f2fs_submit_page_write:
	.xword	__tracepoint_f2fs_submit_page_write
	.xword	__bpf_trace_f2fs__submit_page_bio
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_submit_page_write, 32

	.type	__bpf_trace_tp_map_f2fs_prepare_write_bio,@object // @__bpf_trace_tp_map_f2fs_prepare_write_bio
	.p2align	5
__bpf_trace_tp_map_f2fs_prepare_write_bio:
	.xword	__tracepoint_f2fs_prepare_write_bio
	.xword	__bpf_trace_f2fs__bio
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_prepare_write_bio, 32

	.type	__bpf_trace_tp_map_f2fs_prepare_read_bio,@object // @__bpf_trace_tp_map_f2fs_prepare_read_bio
	.p2align	5
__bpf_trace_tp_map_f2fs_prepare_read_bio:
	.xword	__tracepoint_f2fs_prepare_read_bio
	.xword	__bpf_trace_f2fs__bio
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_prepare_read_bio, 32

	.type	__bpf_trace_tp_map_f2fs_submit_read_bio,@object // @__bpf_trace_tp_map_f2fs_submit_read_bio
	.p2align	5
__bpf_trace_tp_map_f2fs_submit_read_bio:
	.xword	__tracepoint_f2fs_submit_read_bio
	.xword	__bpf_trace_f2fs__bio
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_submit_read_bio, 32

	.type	__bpf_trace_tp_map_f2fs_submit_write_bio,@object // @__bpf_trace_tp_map_f2fs_submit_write_bio
	.p2align	5
__bpf_trace_tp_map_f2fs_submit_write_bio:
	.xword	__tracepoint_f2fs_submit_write_bio
	.xword	__bpf_trace_f2fs__bio
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_submit_write_bio, 32

	.type	__bpf_trace_tp_map_f2fs_write_begin,@object // @__bpf_trace_tp_map_f2fs_write_begin
	.p2align	5
__bpf_trace_tp_map_f2fs_write_begin:
	.xword	__tracepoint_f2fs_write_begin
	.xword	__bpf_trace_f2fs_write_begin
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_write_begin, 32

	.type	__bpf_trace_tp_map_f2fs_write_end,@object // @__bpf_trace_tp_map_f2fs_write_end
	.p2align	5
__bpf_trace_tp_map_f2fs_write_end:
	.xword	__tracepoint_f2fs_write_end
	.xword	__bpf_trace_f2fs_write_end
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_write_end, 32

	.type	__bpf_trace_tp_map_f2fs_writepage,@object // @__bpf_trace_tp_map_f2fs_writepage
	.p2align	5
__bpf_trace_tp_map_f2fs_writepage:
	.xword	__tracepoint_f2fs_writepage
	.xword	__bpf_trace_f2fs__page
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_writepage, 32

	.type	__bpf_trace_tp_map_f2fs_do_write_data_page,@object // @__bpf_trace_tp_map_f2fs_do_write_data_page
	.p2align	5
__bpf_trace_tp_map_f2fs_do_write_data_page:
	.xword	__tracepoint_f2fs_do_write_data_page
	.xword	__bpf_trace_f2fs__page
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_do_write_data_page, 32

	.type	__bpf_trace_tp_map_f2fs_readpage,@object // @__bpf_trace_tp_map_f2fs_readpage
	.p2align	5
__bpf_trace_tp_map_f2fs_readpage:
	.xword	__tracepoint_f2fs_readpage
	.xword	__bpf_trace_f2fs__page
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_readpage, 32

	.type	__bpf_trace_tp_map_f2fs_set_page_dirty,@object // @__bpf_trace_tp_map_f2fs_set_page_dirty
	.p2align	5
__bpf_trace_tp_map_f2fs_set_page_dirty:
	.xword	__tracepoint_f2fs_set_page_dirty
	.xword	__bpf_trace_f2fs__page
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_set_page_dirty, 32

	.type	__bpf_trace_tp_map_f2fs_vm_page_mkwrite,@object // @__bpf_trace_tp_map_f2fs_vm_page_mkwrite
	.p2align	5
__bpf_trace_tp_map_f2fs_vm_page_mkwrite:
	.xword	__tracepoint_f2fs_vm_page_mkwrite
	.xword	__bpf_trace_f2fs__page
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_vm_page_mkwrite, 32

	.type	__bpf_trace_tp_map_f2fs_register_inmem_page,@object // @__bpf_trace_tp_map_f2fs_register_inmem_page
	.p2align	5
__bpf_trace_tp_map_f2fs_register_inmem_page:
	.xword	__tracepoint_f2fs_register_inmem_page
	.xword	__bpf_trace_f2fs__page
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_register_inmem_page, 32

	.type	__bpf_trace_tp_map_f2fs_commit_inmem_page,@object // @__bpf_trace_tp_map_f2fs_commit_inmem_page
	.p2align	5
__bpf_trace_tp_map_f2fs_commit_inmem_page:
	.xword	__tracepoint_f2fs_commit_inmem_page
	.xword	__bpf_trace_f2fs__page
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_commit_inmem_page, 32

	.type	__bpf_trace_tp_map_f2fs_filemap_fault,@object // @__bpf_trace_tp_map_f2fs_filemap_fault
	.p2align	5
__bpf_trace_tp_map_f2fs_filemap_fault:
	.xword	__tracepoint_f2fs_filemap_fault
	.xword	__bpf_trace_f2fs_filemap_fault
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_filemap_fault, 32

	.type	__bpf_trace_tp_map_f2fs_writepages,@object // @__bpf_trace_tp_map_f2fs_writepages
	.p2align	5
__bpf_trace_tp_map_f2fs_writepages:
	.xword	__tracepoint_f2fs_writepages
	.xword	__bpf_trace_f2fs_writepages
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_writepages, 32

	.type	__bpf_trace_tp_map_f2fs_readpages,@object // @__bpf_trace_tp_map_f2fs_readpages
	.p2align	5
__bpf_trace_tp_map_f2fs_readpages:
	.xword	__tracepoint_f2fs_readpages
	.xword	__bpf_trace_f2fs_readpages
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_readpages, 32

	.type	__bpf_trace_tp_map_f2fs_write_checkpoint,@object // @__bpf_trace_tp_map_f2fs_write_checkpoint
	.p2align	5
__bpf_trace_tp_map_f2fs_write_checkpoint:
	.xword	__tracepoint_f2fs_write_checkpoint
	.xword	__bpf_trace_f2fs_write_checkpoint
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_write_checkpoint, 32

	.type	__bpf_trace_tp_map_f2fs_queue_discard,@object // @__bpf_trace_tp_map_f2fs_queue_discard
	.p2align	5
__bpf_trace_tp_map_f2fs_queue_discard:
	.xword	__tracepoint_f2fs_queue_discard
	.xword	__bpf_trace_f2fs_discard
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_queue_discard, 32

	.type	__bpf_trace_tp_map_f2fs_issue_discard,@object // @__bpf_trace_tp_map_f2fs_issue_discard
	.p2align	5
__bpf_trace_tp_map_f2fs_issue_discard:
	.xword	__tracepoint_f2fs_issue_discard
	.xword	__bpf_trace_f2fs_discard
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_issue_discard, 32

	.type	__bpf_trace_tp_map_f2fs_remove_discard,@object // @__bpf_trace_tp_map_f2fs_remove_discard
	.p2align	5
__bpf_trace_tp_map_f2fs_remove_discard:
	.xword	__tracepoint_f2fs_remove_discard
	.xword	__bpf_trace_f2fs_discard
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_remove_discard, 32

	.type	__bpf_trace_tp_map_f2fs_issue_reset_zone,@object // @__bpf_trace_tp_map_f2fs_issue_reset_zone
	.p2align	5
__bpf_trace_tp_map_f2fs_issue_reset_zone:
	.xword	__tracepoint_f2fs_issue_reset_zone
	.xword	__bpf_trace_f2fs_issue_reset_zone
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_issue_reset_zone, 32

	.type	__bpf_trace_tp_map_f2fs_issue_flush,@object // @__bpf_trace_tp_map_f2fs_issue_flush
	.p2align	5
__bpf_trace_tp_map_f2fs_issue_flush:
	.xword	__tracepoint_f2fs_issue_flush
	.xword	__bpf_trace_f2fs_issue_flush
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_issue_flush, 32

	.type	__bpf_trace_tp_map_f2fs_lookup_extent_tree_start,@object // @__bpf_trace_tp_map_f2fs_lookup_extent_tree_start
	.p2align	5
__bpf_trace_tp_map_f2fs_lookup_extent_tree_start:
	.xword	__tracepoint_f2fs_lookup_extent_tree_start
	.xword	__bpf_trace_f2fs_lookup_extent_tree_start
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_lookup_extent_tree_start, 32

	.type	__bpf_trace_tp_map_f2fs_lookup_extent_tree_end,@object // @__bpf_trace_tp_map_f2fs_lookup_extent_tree_end
	.p2align	5
__bpf_trace_tp_map_f2fs_lookup_extent_tree_end:
	.xword	__tracepoint_f2fs_lookup_extent_tree_end
	.xword	__bpf_trace_f2fs_lookup_extent_tree_end
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_lookup_extent_tree_end, 32

	.type	__bpf_trace_tp_map_f2fs_update_extent_tree_range,@object // @__bpf_trace_tp_map_f2fs_update_extent_tree_range
	.p2align	5
__bpf_trace_tp_map_f2fs_update_extent_tree_range:
	.xword	__tracepoint_f2fs_update_extent_tree_range
	.xword	__bpf_trace_f2fs_update_extent_tree_range
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_update_extent_tree_range, 32

	.type	__bpf_trace_tp_map_f2fs_shrink_extent_tree,@object // @__bpf_trace_tp_map_f2fs_shrink_extent_tree
	.p2align	5
__bpf_trace_tp_map_f2fs_shrink_extent_tree:
	.xword	__tracepoint_f2fs_shrink_extent_tree
	.xword	__bpf_trace_f2fs_shrink_extent_tree
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_shrink_extent_tree, 32

	.type	__bpf_trace_tp_map_f2fs_destroy_extent_tree,@object // @__bpf_trace_tp_map_f2fs_destroy_extent_tree
	.p2align	5
__bpf_trace_tp_map_f2fs_destroy_extent_tree:
	.xword	__tracepoint_f2fs_destroy_extent_tree
	.xword	__bpf_trace_f2fs_destroy_extent_tree
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_destroy_extent_tree, 32

	.type	__bpf_trace_tp_map_f2fs_sync_dirty_inodes_enter,@object // @__bpf_trace_tp_map_f2fs_sync_dirty_inodes_enter
	.p2align	5
__bpf_trace_tp_map_f2fs_sync_dirty_inodes_enter:
	.xword	__tracepoint_f2fs_sync_dirty_inodes_enter
	.xword	__bpf_trace_f2fs_sync_dirty_inodes
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_sync_dirty_inodes_enter, 32

	.type	__bpf_trace_tp_map_f2fs_sync_dirty_inodes_exit,@object // @__bpf_trace_tp_map_f2fs_sync_dirty_inodes_exit
	.p2align	5
__bpf_trace_tp_map_f2fs_sync_dirty_inodes_exit:
	.xword	__tracepoint_f2fs_sync_dirty_inodes_exit
	.xword	__bpf_trace_f2fs_sync_dirty_inodes
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_sync_dirty_inodes_exit, 32

	.type	__bpf_trace_tp_map_f2fs_shutdown,@object // @__bpf_trace_tp_map_f2fs_shutdown
	.p2align	5
__bpf_trace_tp_map_f2fs_shutdown:
	.xword	__tracepoint_f2fs_shutdown
	.xword	__bpf_trace_f2fs_shutdown
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_shutdown, 32

	.type	__bpf_trace_tp_map_f2fs_compress_pages_start,@object // @__bpf_trace_tp_map_f2fs_compress_pages_start
	.p2align	5
__bpf_trace_tp_map_f2fs_compress_pages_start:
	.xword	__tracepoint_f2fs_compress_pages_start
	.xword	__bpf_trace_f2fs_zip_start
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_compress_pages_start, 32

	.type	__bpf_trace_tp_map_f2fs_decompress_pages_start,@object // @__bpf_trace_tp_map_f2fs_decompress_pages_start
	.p2align	5
__bpf_trace_tp_map_f2fs_decompress_pages_start:
	.xword	__tracepoint_f2fs_decompress_pages_start
	.xword	__bpf_trace_f2fs_zip_start
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_decompress_pages_start, 32

	.type	__bpf_trace_tp_map_f2fs_compress_pages_end,@object // @__bpf_trace_tp_map_f2fs_compress_pages_end
	.p2align	5
__bpf_trace_tp_map_f2fs_compress_pages_end:
	.xword	__tracepoint_f2fs_compress_pages_end
	.xword	__bpf_trace_f2fs_zip_end
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_compress_pages_end, 32

	.type	__bpf_trace_tp_map_f2fs_decompress_pages_end,@object // @__bpf_trace_tp_map_f2fs_decompress_pages_end
	.p2align	5
__bpf_trace_tp_map_f2fs_decompress_pages_end:
	.xword	__tracepoint_f2fs_decompress_pages_end
	.xword	__bpf_trace_f2fs_zip_end
	.word	4                       // 0x4
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_decompress_pages_end, 32

	.type	__bpf_trace_tp_map_f2fs_iostat,@object // @__bpf_trace_tp_map_f2fs_iostat
	.p2align	5
__bpf_trace_tp_map_f2fs_iostat:
	.xword	__tracepoint_f2fs_iostat
	.xword	__bpf_trace_f2fs_iostat
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_iostat, 32

	.type	__bpf_trace_tp_map_f2fs_grading_ssr_allocate,@object // @__bpf_trace_tp_map_f2fs_grading_ssr_allocate
	.p2align	5
__bpf_trace_tp_map_f2fs_grading_ssr_allocate:
	.xword	__tracepoint_f2fs_grading_ssr_allocate
	.xword	__bpf_trace_f2fs_grading_ssr
	.word	3                       // 0x3
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_grading_ssr_allocate, 32

	.type	__bpf_trace_tp_map_f2fs_dedup_ioc_create_layered_inode,@object // @__bpf_trace_tp_map_f2fs_dedup_ioc_create_layered_inode
	.p2align	5
__bpf_trace_tp_map_f2fs_dedup_ioc_create_layered_inode:
	.xword	__tracepoint_f2fs_dedup_ioc_create_layered_inode
	.xword	__bpf_trace_f2fs__dedup_inode
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_dedup_ioc_create_layered_inode, 32

	.type	__bpf_trace_tp_map_f2fs_dedup_ioc_dedup_inode,@object // @__bpf_trace_tp_map_f2fs_dedup_ioc_dedup_inode
	.p2align	5
__bpf_trace_tp_map_f2fs_dedup_ioc_dedup_inode:
	.xword	__tracepoint_f2fs_dedup_ioc_dedup_inode
	.xword	__bpf_trace_f2fs__dedup_inode
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_dedup_ioc_dedup_inode, 32

	.type	__bpf_trace_tp_map_f2fs_dedup_revoke_inode,@object // @__bpf_trace_tp_map_f2fs_dedup_revoke_inode
	.p2align	5
__bpf_trace_tp_map_f2fs_dedup_revoke_inode:
	.xword	__tracepoint_f2fs_dedup_revoke_inode
	.xword	__bpf_trace_f2fs__dedup_inode
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_dedup_revoke_inode, 32

	.type	__bpf_trace_tp_map_f2fs_dedup_revoke_fail,@object // @__bpf_trace_tp_map_f2fs_dedup_revoke_fail
	.p2align	5
__bpf_trace_tp_map_f2fs_dedup_revoke_fail:
	.xword	__tracepoint_f2fs_dedup_revoke_fail
	.xword	__bpf_trace_f2fs__dedup_inode
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_dedup_revoke_fail, 32

	.type	__bpf_trace_tp_map_f2fs_dedup_dec_inner_link,@object // @__bpf_trace_tp_map_f2fs_dedup_dec_inner_link
	.p2align	5
__bpf_trace_tp_map_f2fs_dedup_dec_inner_link:
	.xword	__tracepoint_f2fs_dedup_dec_inner_link
	.xword	__bpf_trace_f2fs__dedup_inode
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_dedup_dec_inner_link, 32

	.type	__bpf_trace_tp_map_f2fs_dedup_map_readpage,@object // @__bpf_trace_tp_map_f2fs_dedup_map_readpage
	.p2align	5
__bpf_trace_tp_map_f2fs_dedup_map_readpage:
	.xword	__tracepoint_f2fs_dedup_map_readpage
	.xword	__bpf_trace_f2fs__dedup_map
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_dedup_map_readpage, 32

	.type	__bpf_trace_tp_map_f2fs_dedup_map_blocks,@object // @__bpf_trace_tp_map_f2fs_dedup_map_blocks
	.p2align	5
__bpf_trace_tp_map_f2fs_dedup_map_blocks:
	.xword	__tracepoint_f2fs_dedup_map_blocks
	.xword	__bpf_trace_f2fs__dedup_map
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	8
	.size	__bpf_trace_tp_map_f2fs_dedup_map_blocks, 32

	.type	.L.str.41,@object       // @.str.41
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.41:
	.asciz	"dsm_f2fs"
	.size	.L.str.41, 9

	.type	dsm_f2fs,@object        // @dsm_f2fs
	.data
	.globl	dsm_f2fs
	.p2align	3
dsm_f2fs:
.Ldsm_f2fs$local:
	.xword	.L.str.41
	.xword	0
	.xword	0
	.xword	0
	.xword	0
	.xword	1024                    // 0x400
	.size	dsm_f2fs, 48

	.type	f2fs_dclient,@object    // @f2fs_dclient
	.bss
	.globl	f2fs_dclient
	.p2align	3
f2fs_dclient:
.Lf2fs_dclient$local:
	.xword	0
	.size	f2fs_dclient, 8

	.type	write_opt,@object       // @write_opt
	.globl	write_opt
	.p2align	2
write_opt:
.Lwrite_opt$local:
	.word	0                       // 0x0
	.size	write_opt, 4

	.type	.L.str.42,@object       // @.str.42
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.42:
	.asciz	"%c%cF2FS-fs (%s): %pV\n"
	.size	.L.str.42, 23

	.type	.L.str.43,@object       // @.str.43
.L.str.43:
	.asciz	"\0013Cannot turn on quota_ino: %d"
	.size	.L.str.43, 31

	.type	.L.str.44,@object       // @.str.44
.L.str.44:
	.asciz	"\0013Cannot turn on quotas: %d on %d"
	.size	.L.str.44, 34

	.type	.L.str.45,@object       // @.str.45
.L.str.45:
	.asciz	"\0013Failed to sync quota file (type=%d, err=%d)"
	.size	.L.str.45, 46

	.type	.L.str.46,@object       // @.str.46
.L.str.46:
	.asciz	"\0013Fail to turn off disk quota (type: %d, err: %d, ret:%d), Please run fsck to fix it."
	.size	.L.str.46, 86

	.type	.L.str.47,@object       // @.str.47
.L.str.47:
	.asciz	"\0013Wrong layout: check mkfs.f2fs version"
	.size	.L.str.47, 40

	.type	.L.str.48,@object       // @.str.48
.L.str.48:
	.asciz	"\0013Wrong user_block_count: %u"
	.size	.L.str.48, 29

	.type	.L.str.49,@object       // @.str.49
.L.str.49:
	.asciz	"\0013Wrong valid_user_blocks: %u, user_block_count: %u"
	.size	.L.str.49, 52

	.type	.L.str.50,@object       // @.str.50
.L.str.50:
	.asciz	"\0013Wrong valid_node_count: %u, avail_node_count: %u"
	.size	.L.str.50, 51

	.type	.L.str.51,@object       // @.str.51
.L.str.51:
	.asciz	"\0013Node segment (%u, %u) has the same segno: %u"
	.size	.L.str.51, 47

	.type	.L.str.52,@object       // @.str.52
.L.str.52:
	.asciz	"\0013Data segment (%u, %u) has the same segno: %u"
	.size	.L.str.52, 47

	.type	.L.str.53,@object       // @.str.53
.L.str.53:
	.asciz	"\0013Node segment (%u) and Data segment (%u) has the same segno: %u"
	.size	.L.str.53, 65

	.type	.L.str.54,@object       // @.str.54
.L.str.54:
	.asciz	"\0013Wrong bitmap size: sit: %u, nat:%u"
	.size	.L.str.54, 37

	.type	.L.str.55,@object       // @.str.55
.L.str.55:
	.asciz	"\0013Wrong cp_pack_start_sum: %u"
	.size	.L.str.55, 30

	.type	.L.str.56,@object       // @.str.56
.L.str.56:
	.asciz	"\0014using deprecated layout of large_nat_bitmap, please run fsck v1.13.0 or higher to repair, chksum_offset: %u, fixed with patch: \"f2fs-tools: relocate chksum_offset for large_nat_bitmap feature\""
	.size	.L.str.56, 195

	.type	.L.str.57,@object       // @.str.57
.L.str.57:
	.asciz	"\0013A bug case: need to run fsck"
	.size	.L.str.57, 31

	.type	.L.str.58,@object       // @.str.58
.L.str.58:
	.asciz	"c"
	.size	.L.str.58, 2

	.type	f2fs_fill_super_done,@object // @f2fs_fill_super_done
	.bss
	.globl	f2fs_fill_super_done
	.p2align	2
f2fs_fill_super_done:
.Lf2fs_fill_super_done$local:
	.word	0                       // 0x0
	.size	f2fs_fill_super_done, 4

	.type	__UNIQUE_ID_alias242,@object // @__UNIQUE_ID_alias242
	.section	.modinfo,"a",@progbits
__UNIQUE_ID_alias242:
	.asciz	"f2fs.alias=fs-f2fs"
	.size	__UNIQUE_ID_alias242, 19

	.type	f2fs_fs_type,@object    // @f2fs_fs_type
	.data
	.p2align	3
f2fs_fs_type:
	.xword	.L.str.320
	.word	1                       // 0x1
	.zero	4
	.xword	0
	.xword	0
	.xword	f2fs_mount
	.xword	0
	.xword	kill_f2fs_super
	.xword	0
	.xword	0
	.zero	8
	.xword	0                       // 0x0
	.xword	0                       // 0x0
	.xword	0                       // 0x0
	.xword	0                       // 0x0
	.size	f2fs_fs_type, 112

	.type	f2fs_shrinker_info,@object // @f2fs_shrinker_info
	.p2align	3
f2fs_shrinker_info:
	.xword	f2fs_shrink_count
	.xword	f2fs_shrink_scan
	.xword	0                       // 0x0
	.word	2                       // 0x2
	.word	0                       // 0x0
	.zero	16
	.word	0                       // 0x0
	.zero	4
	.xword	0
	.size	f2fs_shrinker_info, 64

	.type	__addressable_init_f2fs_fs5813,@object // @__addressable_init_f2fs_fs5813
	.section	.discard.addressable,"aw",@progbits
	.p2align	3
__addressable_init_f2fs_fs5813:
	.xword	init_f2fs_fs
	.size	__addressable_init_f2fs_fs5813, 8

	.type	__exitcall_exit_f2fs_fs,@object // @__exitcall_exit_f2fs_fs
	.section	.exitcall.exit,"aw",@progbits
	.p2align	3
__exitcall_exit_f2fs_fs:
	.xword	exit_f2fs_fs
	.size	__exitcall_exit_f2fs_fs, 8

	.type	__addressable_pw_init5817,@object // @__addressable_pw_init5817
	.section	.discard.addressable,"aw",@progbits
	.p2align	3
__addressable_pw_init5817:
	.xword	pw_init
	.size	__addressable_pw_init5817, 8

	.type	__UNIQUE_ID_author243,@object // @__UNIQUE_ID_author243
	.section	.modinfo,"a",@progbits
__UNIQUE_ID_author243:
	.asciz	"f2fs.author=Samsung Electronics's Praesto Team"
	.size	__UNIQUE_ID_author243, 47

	.type	__UNIQUE_ID_description244,@object // @__UNIQUE_ID_description244
__UNIQUE_ID_description244:
	.asciz	"f2fs.description=Flash Friendly File System"
	.size	__UNIQUE_ID_description244, 44

	.type	__UNIQUE_ID_license245,@object // @__UNIQUE_ID_license245
__UNIQUE_ID_license245:
	.asciz	"f2fs.license=GPL"
	.size	__UNIQUE_ID_license245, 17

	.type	__UNIQUE_ID_softdep246,@object // @__UNIQUE_ID_softdep246
__UNIQUE_ID_softdep246:
	.asciz	"f2fs.softdep=pre: crc32"
	.size	__UNIQUE_ID_softdep246, 24

	.type	f2fs_cf_name_slab,@object // @f2fs_cf_name_slab
	.bss
	.globl	f2fs_cf_name_slab
	.p2align	3
f2fs_cf_name_slab:
.Lf2fs_cf_name_slab$local:
	.xword	0
	.size	f2fs_cf_name_slab, 8

	.type	.L.str.59,@object       // @.str.59
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.59:
	.asciz	"dev_t"
	.size	.L.str.59, 6

	.type	.L.str.60,@object       // @.str.60
.L.str.60:
	.asciz	"dev"
	.size	.L.str.60, 4

	.type	.L.str.61,@object       // @.str.61
.L.str.61:
	.asciz	"ino_t"
	.size	.L.str.61, 6

	.type	.L.str.62,@object       // @.str.62
.L.str.62:
	.asciz	"ino"
	.size	.L.str.62, 4

	.type	.L.str.63,@object       // @.str.63
.L.str.63:
	.asciz	"pino"
	.size	.L.str.63, 5

	.type	.L.str.64,@object       // @.str.64
.L.str.64:
	.asciz	"umode_t"
	.size	.L.str.64, 8

	.type	.L.str.65,@object       // @.str.65
.L.str.65:
	.asciz	"mode"
	.size	.L.str.65, 5

	.type	.L.str.66,@object       // @.str.66
.L.str.66:
	.asciz	"loff_t"
	.size	.L.str.66, 7

	.type	.L.str.67,@object       // @.str.67
.L.str.67:
	.asciz	"size"
	.size	.L.str.67, 5

	.type	.L.str.68,@object       // @.str.68
.L.str.68:
	.asciz	"unsigned int"
	.size	.L.str.68, 13

	.type	.L.str.69,@object       // @.str.69
.L.str.69:
	.asciz	"nlink"
	.size	.L.str.69, 6

	.type	.L.str.70,@object       // @.str.70
.L.str.70:
	.asciz	"blkcnt_t"
	.size	.L.str.70, 9

	.type	.L.str.71,@object       // @.str.71
.L.str.71:
	.asciz	"blocks"
	.size	.L.str.71, 7

	.type	.L.str.72,@object       // @.str.72
.L.str.72:
	.asciz	"__u8"
	.size	.L.str.72, 5

	.type	.L.str.73,@object       // @.str.73
.L.str.73:
	.asciz	"advise"
	.size	.L.str.73, 7

	.type	.L.str.74,@object       // @.str.74
.L.str.74:
	.asciz	"int"
	.size	.L.str.74, 4

	.type	.L.str.75,@object       // @.str.75
.L.str.75:
	.asciz	"ret"
	.size	.L.str.75, 4

	.type	.L.str.76,@object       // @.str.76
.L.str.76:
	.asciz	"dev = (%d,%d), ino = %lu, pino = %lu, i_mode = 0x%hx, i_size = %lld, i_nlink = %u, i_blocks = %llu, i_advise = 0x%x\n"
	.size	.L.str.76, 117

	.type	.L.str.77,@object       // @.str.77
.L.str.77:
	.asciz	"cp_reason"
	.size	.L.str.77, 10

	.type	.L.str.78,@object       // @.str.78
.L.str.78:
	.asciz	"datasync"
	.size	.L.str.78, 9

	.type	.L.str.79,@object       // @.str.79
.L.str.79:
	.asciz	"dev = (%d,%d), ino = %lu, cp_reason: %s, datasync = %d, ret = %d\n"
	.size	.L.str.79, 66

	.type	trace_raw_output_f2fs_sync_file_exit.symbols,@object // @trace_raw_output_f2fs_sync_file_exit.symbols
	.section	.rodata,"a",@progbits
	.p2align	3
trace_raw_output_f2fs_sync_file_exit.symbols:
	.xword	0                       // 0x0
	.xword	.L.str.80
	.xword	1                       // 0x1
	.xword	.L.str.81
	.xword	2                       // 0x2
	.xword	.L.str.82
	.xword	3                       // 0x3
	.xword	.L.str.83
	.xword	4                       // 0x4
	.xword	.L.str.84
	.xword	5                       // 0x5
	.xword	.L.str.85
	.xword	6                       // 0x6
	.xword	.L.str.86
	.xword	7                       // 0x7
	.xword	.L.str.87
	.xword	8                       // 0x8
	.xword	.L.str.88
	.xword	9                       // 0x9
	.xword	.L.str.89
	.xword	10                      // 0xa
	.xword	.L.str.90
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs_sync_file_exit.symbols, 192

	.type	.L.str.80,@object       // @.str.80
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.80:
	.asciz	"no needed"
	.size	.L.str.80, 10

	.type	.L.str.81,@object       // @.str.81
.L.str.81:
	.asciz	"non regular"
	.size	.L.str.81, 12

	.type	.L.str.82,@object       // @.str.82
.L.str.82:
	.asciz	"compressed"
	.size	.L.str.82, 11

	.type	.L.str.83,@object       // @.str.83
.L.str.83:
	.asciz	"hardlink"
	.size	.L.str.83, 9

	.type	.L.str.84,@object       // @.str.84
.L.str.84:
	.asciz	"sb needs cp"
	.size	.L.str.84, 12

	.type	.L.str.85,@object       // @.str.85
.L.str.85:
	.asciz	"wrong pino"
	.size	.L.str.85, 11

	.type	.L.str.86,@object       // @.str.86
.L.str.86:
	.asciz	"no space roll forward"
	.size	.L.str.86, 22

	.type	.L.str.87,@object       // @.str.87
.L.str.87:
	.asciz	"node needs cp"
	.size	.L.str.87, 14

	.type	.L.str.88,@object       // @.str.88
.L.str.88:
	.asciz	"fastboot mode"
	.size	.L.str.88, 14

	.type	.L.str.89,@object       // @.str.89
.L.str.89:
	.asciz	"log type is 2"
	.size	.L.str.89, 14

	.type	.L.str.90,@object       // @.str.90
.L.str.90:
	.asciz	"dir needs recovery"
	.size	.L.str.90, 19

	.type	.L.str.91,@object       // @.str.91
.L.str.91:
	.asciz	"dirty"
	.size	.L.str.91, 6

	.type	.L.str.92,@object       // @.str.92
.L.str.92:
	.asciz	"wait"
	.size	.L.str.92, 5

	.type	.L.str.93,@object       // @.str.93
.L.str.93:
	.asciz	"dev = (%d,%d), superblock is %s, wait = %d\n"
	.size	.L.str.93, 44

	.type	.L.str.94,@object       // @.str.94
.L.str.94:
	.asciz	"not dirty"
	.size	.L.str.94, 10

	.type	.L.str.95,@object       // @.str.95
.L.str.95:
	.asciz	"dev = (%d,%d), ino = %lu, ret = %d\n"
	.size	.L.str.95, 36

	.type	.L.str.96,@object       // @.str.96
.L.str.96:
	.asciz	"(null)"
	.size	.L.str.96, 7

	.type	.L.str.97,@object       // @.str.97
.L.str.97:
	.asciz	"__data_loc char[]"
	.size	.L.str.97, 18

	.type	.L.str.98,@object       // @.str.98
.L.str.98:
	.asciz	"name"
	.size	.L.str.98, 5

	.type	.L.str.99,@object       // @.str.99
.L.str.99:
	.asciz	"dev = (%d,%d), dir ino = %lu, i_size = %lld, i_blocks = %llu, name = %s\n"
	.size	.L.str.99, 73

	.type	.L.str.100,@object      // @.str.100
.L.str.100:
	.asciz	"nid_t"
	.size	.L.str.100, 6

	.type	.L.str.101,@object      // @.str.101
.L.str.101:
	.asciz	"nid"
	.size	.L.str.101, 4

	.type	.L.str.102,@object      // @.str.102
.L.str.102:
	.asciz	"ofs"
	.size	.L.str.102, 4

	.type	.L.str.103,@object      // @.str.103
.L.str.103:
	.asciz	"free"
	.size	.L.str.103, 5

	.type	.L.str.104,@object      // @.str.104
.L.str.104:
	.asciz	"dev = (%d,%d), ino = %lu, nid = %u, offset = %u, freed = %d\n"
	.size	.L.str.104, 61

	.type	.L.str.105,@object      // @.str.105
.L.str.105:
	.asciz	"u64"
	.size	.L.str.105, 4

	.type	.L.str.106,@object      // @.str.106
.L.str.106:
	.asciz	"from"
	.size	.L.str.106, 5

	.type	.L.str.107,@object      // @.str.107
.L.str.107:
	.asciz	"dev = (%d,%d), ino = %lu, i_size = %lld, i_blocks = %llu, start file offset = %llu\n"
	.size	.L.str.107, 84

	.type	.L.str.108,@object      // @.str.108
.L.str.108:
	.asciz	"block_t"
	.size	.L.str.108, 8

	.type	.L.str.109,@object      // @.str.109
.L.str.109:
	.asciz	"blk_addr"
	.size	.L.str.109, 9

	.type	.L.str.110,@object      // @.str.110
.L.str.110:
	.asciz	"dev = (%d,%d), ino = %lu, nid = %u, block_address = 0x%llx\n"
	.size	.L.str.110, 60

	.type	.L.str.111,@object      // @.str.111
.L.str.111:
	.asciz	"nid[3]"
	.size	.L.str.111, 7

	.type	.L.str.112,@object      // @.str.112
.L.str.112:
	.asciz	"depth"
	.size	.L.str.112, 6

	.type	.L.str.113,@object      // @.str.113
.L.str.113:
	.asciz	"err"
	.size	.L.str.113, 4

	.type	.L.str.114,@object      // @.str.114
.L.str.114:
	.asciz	"dev = (%d,%d), ino = %lu, nid[0] = %u, nid[1] = %u, nid[2] = %u, depth = %d, err = %d\n"
	.size	.L.str.114, 87

	.type	.L.str.115,@object      // @.str.115
.L.str.115:
	.asciz	"unsigned long"
	.size	.L.str.115, 14

	.type	.L.str.116,@object      // @.str.116
.L.str.116:
	.asciz	"offset"
	.size	.L.str.116, 7

	.type	.L.str.117,@object      // @.str.117
.L.str.117:
	.asciz	"length"
	.size	.L.str.117, 7

	.type	.L.str.118,@object      // @.str.118
.L.str.118:
	.asciz	"dev = (%d,%d), ino = %lu, offset = %lu, length = %lu, written(err) = %d\n"
	.size	.L.str.118, 73

	.type	.L.str.119,@object      // @.str.119
.L.str.119:
	.asciz	"m_lblk"
	.size	.L.str.119, 7

	.type	.L.str.120,@object      // @.str.120
.L.str.120:
	.asciz	"m_pblk"
	.size	.L.str.120, 7

	.type	.L.str.121,@object      // @.str.121
.L.str.121:
	.asciz	"m_len"
	.size	.L.str.121, 6

	.type	.L.str.122,@object      // @.str.122
.L.str.122:
	.asciz	"m_flags"
	.size	.L.str.122, 8

	.type	.L.str.123,@object      // @.str.123
.L.str.123:
	.asciz	"m_seg_type"
	.size	.L.str.123, 11

	.type	.L.str.124,@object      // @.str.124
.L.str.124:
	.asciz	"bool"
	.size	.L.str.124, 5

	.type	.L.str.125,@object      // @.str.125
.L.str.125:
	.asciz	"m_may_create"
	.size	.L.str.125, 13

	.type	.L.str.126,@object      // @.str.126
.L.str.126:
	.asciz	"dev = (%d,%d), ino = %lu, file offset = %llu, start blkaddr = 0x%llx, len = 0x%llx, flags = %u,seg_type = %d, may_create = %d, err = %d\n"
	.size	.L.str.126, 137

	.type	.L.str.127,@object      // @.str.127
.L.str.127:
	.asciz	"wait_ms"
	.size	.L.str.127, 8

	.type	.L.str.128,@object      // @.str.128
.L.str.128:
	.asciz	"prefree"
	.size	.L.str.128, 8

	.type	.L.str.129,@object      // @.str.129
.L.str.129:
	.asciz	"dev = (%d,%d), wait_ms = %u, prefree = %u, free = %u\n"
	.size	.L.str.129, 54

	.type	.L.str.130,@object      // @.str.130
.L.str.130:
	.asciz	"sync"
	.size	.L.str.130, 5

	.type	.L.str.131,@object      // @.str.131
.L.str.131:
	.asciz	"background"
	.size	.L.str.131, 11

	.type	.L.str.132,@object      // @.str.132
.L.str.132:
	.asciz	"long long"
	.size	.L.str.132, 10

	.type	.L.str.133,@object      // @.str.133
.L.str.133:
	.asciz	"dirty_nodes"
	.size	.L.str.133, 12

	.type	.L.str.134,@object      // @.str.134
.L.str.134:
	.asciz	"dirty_dents"
	.size	.L.str.134, 12

	.type	.L.str.135,@object      // @.str.135
.L.str.135:
	.asciz	"dirty_imeta"
	.size	.L.str.135, 12

	.type	.L.str.136,@object      // @.str.136
.L.str.136:
	.asciz	"free_sec"
	.size	.L.str.136, 9

	.type	.L.str.137,@object      // @.str.137
.L.str.137:
	.asciz	"free_seg"
	.size	.L.str.137, 9

	.type	.L.str.138,@object      // @.str.138
.L.str.138:
	.asciz	"reserved_seg"
	.size	.L.str.138, 13

	.type	.L.str.139,@object      // @.str.139
.L.str.139:
	.asciz	"prefree_seg"
	.size	.L.str.139, 12

	.type	.L.str.140,@object      // @.str.140
.L.str.140:
	.asciz	"dev = (%d,%d), sync = %d, background = %d, nodes = %lld, dents = %lld, imeta = %lld, free_sec:%u, free_seg:%u, rsv_seg:%d, prefree_seg:%u\n"
	.size	.L.str.140, 139

	.type	.L.str.141,@object      // @.str.141
.L.str.141:
	.asciz	"seg_freed"
	.size	.L.str.141, 10

	.type	.L.str.142,@object      // @.str.142
.L.str.142:
	.asciz	"sec_freed"
	.size	.L.str.142, 10

	.type	.L.str.143,@object      // @.str.143
.L.str.143:
	.asciz	"dev = (%d,%d), ret = %d, seg_freed = %d, sec_freed = %d, nodes = %lld, dents = %lld, imeta = %lld, free_sec:%u, free_seg:%u, rsv_seg:%d, prefree_seg:%u\n"
	.size	.L.str.143, 153

	.type	.L.str.144,@object      // @.str.144
.L.str.144:
	.asciz	"type"
	.size	.L.str.144, 5

	.type	.L.str.145,@object      // @.str.145
.L.str.145:
	.asciz	"gc_type"
	.size	.L.str.145, 8

	.type	.L.str.146,@object      // @.str.146
.L.str.146:
	.asciz	"alloc_mode"
	.size	.L.str.146, 11

	.type	.L.str.147,@object      // @.str.147
.L.str.147:
	.asciz	"gc_mode"
	.size	.L.str.147, 8

	.type	.L.str.148,@object      // @.str.148
.L.str.148:
	.asciz	"victim"
	.size	.L.str.148, 7

	.type	.L.str.149,@object      // @.str.149
.L.str.149:
	.asciz	"cost"
	.size	.L.str.149, 5

	.type	.L.str.150,@object      // @.str.150
.L.str.150:
	.asciz	"ofs_unit"
	.size	.L.str.150, 9

	.type	.L.str.151,@object      // @.str.151
.L.str.151:
	.asciz	"pre_victim"
	.size	.L.str.151, 11

	.type	.L.str.152,@object      // @.str.152
.L.str.152:
	.asciz	"dev = (%d,%d), type = %s, policy = (%s, %s, %s), victim = %u, cost = %u, ofs_unit = %u, pre_victim_secno = %d, prefree = %u, free = %u\n"
	.size	.L.str.152, 136

	.type	trace_raw_output_f2fs_get_victim.symbols,@object // @trace_raw_output_f2fs_get_victim.symbols
	.section	.rodata,"a",@progbits
	.p2align	3
trace_raw_output_f2fs_get_victim.symbols:
	.xword	0                       // 0x0
	.xword	.L.str.153
	.xword	1                       // 0x1
	.xword	.L.str.154
	.xword	2                       // 0x2
	.xword	.L.str.155
	.xword	3                       // 0x3
	.xword	.L.str.156
	.xword	4                       // 0x4
	.xword	.L.str.157
	.xword	5                       // 0x5
	.xword	.L.str.158
	.xword	8                       // 0x8
	.xword	.L.str.159
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs_get_victim.symbols, 128

	.type	.L.str.153,@object      // @.str.153
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.153:
	.asciz	"Hot DATA"
	.size	.L.str.153, 9

	.type	.L.str.154,@object      // @.str.154
.L.str.154:
	.asciz	"Warm DATA"
	.size	.L.str.154, 10

	.type	.L.str.155,@object      // @.str.155
.L.str.155:
	.asciz	"Cold DATA"
	.size	.L.str.155, 10

	.type	.L.str.156,@object      // @.str.156
.L.str.156:
	.asciz	"Hot NODE"
	.size	.L.str.156, 9

	.type	.L.str.157,@object      // @.str.157
.L.str.157:
	.asciz	"Warm NODE"
	.size	.L.str.157, 10

	.type	.L.str.158,@object      // @.str.158
.L.str.158:
	.asciz	"Cold NODE"
	.size	.L.str.158, 10

	.type	.L.str.159,@object      // @.str.159
.L.str.159:
	.asciz	"No TYPE"
	.size	.L.str.159, 8

	.type	trace_raw_output_f2fs_get_victim.symbols.160,@object // @trace_raw_output_f2fs_get_victim.symbols.160
	.section	.rodata,"a",@progbits
	.p2align	3
trace_raw_output_f2fs_get_victim.symbols.160:
	.xword	1                       // 0x1
	.xword	.L.str.161
	.xword	0                       // 0x0
	.xword	.L.str.162
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs_get_victim.symbols.160, 48

	.type	.L.str.161,@object      // @.str.161
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.161:
	.asciz	"Foreground GC"
	.size	.L.str.161, 14

	.type	.L.str.162,@object      // @.str.162
.L.str.162:
	.asciz	"Background GC"
	.size	.L.str.162, 14

	.type	trace_raw_output_f2fs_get_victim.symbols.163,@object // @trace_raw_output_f2fs_get_victim.symbols.163
	.section	.rodata,"a",@progbits
	.p2align	3
trace_raw_output_f2fs_get_victim.symbols.163:
	.xword	0                       // 0x0
	.xword	.L.str.164
	.xword	1                       // 0x1
	.xword	.L.str.165
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs_get_victim.symbols.163, 48

	.type	.L.str.164,@object      // @.str.164
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.164:
	.asciz	"LFS-mode"
	.size	.L.str.164, 9

	.type	.L.str.165,@object      // @.str.165
.L.str.165:
	.asciz	"SSR-mode"
	.size	.L.str.165, 9

	.type	trace_raw_output_f2fs_get_victim.symbols.166,@object // @trace_raw_output_f2fs_get_victim.symbols.166
	.section	.rodata,"a",@progbits
	.p2align	3
trace_raw_output_f2fs_get_victim.symbols.166:
	.xword	1                       // 0x1
	.xword	.L.str.167
	.xword	0                       // 0x0
	.xword	.L.str.168
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs_get_victim.symbols.166, 48

	.type	.L.str.167,@object      // @.str.167
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.167:
	.asciz	"Greedy"
	.size	.L.str.167, 7

	.type	.L.str.168,@object      // @.str.168
.L.str.168:
	.asciz	"Cost-Benefit"
	.size	.L.str.168, 13

	.type	.L.str.169,@object      // @.str.169
.L.str.169:
	.asciz	"flags"
	.size	.L.str.169, 6

	.type	.L.str.170,@object      // @.str.170
.L.str.170:
	.asciz	"dev = (%d,%d), pino = %lu, name:%s, flags:%u\n"
	.size	.L.str.170, 46

	.type	.L.str.171,@object      // @.str.171
.L.str.171:
	.asciz	"cino"
	.size	.L.str.171, 5

	.type	.L.str.172,@object      // @.str.172
.L.str.172:
	.asciz	"dev = (%d,%d), pino = %lu, name:%s, ino:%u, err:%d\n"
	.size	.L.str.172, 52

	.type	.L.str.173,@object      // @.str.173
.L.str.173:
	.asciz	"start"
	.size	.L.str.173, 6

	.type	.L.str.174,@object      // @.str.174
.L.str.174:
	.asciz	"end"
	.size	.L.str.174, 4

	.type	.L.str.175,@object      // @.str.175
.L.str.175:
	.asciz	"dev = (%d,%d), ino = %lu, start_pos:%llu, end_pos:%llu, err:%d\n"
	.size	.L.str.175, 64

	.type	.L.str.176,@object      // @.str.176
.L.str.176:
	.asciz	"len"
	.size	.L.str.176, 4

	.type	.L.str.177,@object      // @.str.177
.L.str.177:
	.asciz	"dev = (%d,%d), ino = %lu, mode = %x, offset = %lld, len = %lld,  i_size = %lld, i_blocks = %llu, ret = %d\n"
	.size	.L.str.177, 107

	.type	.L.str.178,@object      // @.str.178
.L.str.178:
	.asciz	"pos"
	.size	.L.str.178, 4

	.type	.L.str.179,@object      // @.str.179
.L.str.179:
	.asciz	"rw"
	.size	.L.str.179, 3

	.type	.L.str.180,@object      // @.str.180
.L.str.180:
	.asciz	"dev = (%d,%d), ino = %lu pos = %lld len = %lu rw = %d\n"
	.size	.L.str.180, 55

	.type	.L.str.181,@object      // @.str.181
.L.str.181:
	.asciz	"dev = (%d,%d), ino = %lu pos = %lld len = %lu rw = %d ret = %d\n"
	.size	.L.str.181, 64

	.type	.L.str.182,@object      // @.str.182
.L.str.182:
	.asciz	"ofs_in_node"
	.size	.L.str.182, 12

	.type	.L.str.183,@object      // @.str.183
.L.str.183:
	.asciz	"count"
	.size	.L.str.183, 6

	.type	.L.str.184,@object      // @.str.184
.L.str.184:
	.asciz	"dev = (%d,%d), nid = %u, ofs_in_node = %u, count = %llu\n"
	.size	.L.str.184, 57

	.type	.L.str.185,@object      // @.str.185
.L.str.185:
	.asciz	"index"
	.size	.L.str.185, 6

	.type	.L.str.186,@object      // @.str.186
.L.str.186:
	.asciz	"old_blkaddr"
	.size	.L.str.186, 12

	.type	.L.str.187,@object      // @.str.187
.L.str.187:
	.asciz	"new_blkaddr"
	.size	.L.str.187, 12

	.type	.L.str.188,@object      // @.str.188
.L.str.188:
	.asciz	"op"
	.size	.L.str.188, 3

	.type	.L.str.189,@object      // @.str.189
.L.str.189:
	.asciz	"op_flags"
	.size	.L.str.189, 9

	.type	.L.str.190,@object      // @.str.190
.L.str.190:
	.asciz	"temp"
	.size	.L.str.190, 5

	.type	.L.str.191,@object      // @.str.191
.L.str.191:
	.asciz	"dev = (%d,%d), ino = %lu, page_index = 0x%lx, oldaddr = 0x%llx, newaddr = 0x%llx, rw = %s(%s), type = %s_%s\n"
	.size	.L.str.191, 109

	.type	trace_raw_output_f2fs__submit_page_bio.__flags,@object // @trace_raw_output_f2fs__submit_page_bio.__flags
	.section	.rodata,"a",@progbits
	.p2align	3
trace_raw_output_f2fs__submit_page_bio.__flags:
	.xword	1048576                 // 0x100000
	.xword	.L.str.192
	.xword	2048                    // 0x800
	.xword	.L.str.193
	.xword	4096                    // 0x1000
	.xword	.L.str.194
	.xword	8192                    // 0x2000
	.xword	.L.str.195
	.xword	524288                  // 0x80000
	.xword	.L.str.196
	.xword	262144                  // 0x40000
	.xword	.L.str.197
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs__submit_page_bio.__flags, 112

	.type	.L.str.192,@object      // @.str.192
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.192:
	.asciz	"R"
	.size	.L.str.192, 2

	.type	.L.str.193,@object      // @.str.193
.L.str.193:
	.asciz	"S"
	.size	.L.str.193, 2

	.type	.L.str.194,@object      // @.str.194
.L.str.194:
	.asciz	"M"
	.size	.L.str.194, 2

	.type	.L.str.195,@object      // @.str.195
.L.str.195:
	.asciz	"P"
	.size	.L.str.195, 2

	.type	.L.str.196,@object      // @.str.196
.L.str.196:
	.asciz	"PF"
	.size	.L.str.196, 3

	.type	.L.str.197,@object      // @.str.197
.L.str.197:
	.asciz	"FUA"
	.size	.L.str.197, 4

	.type	.L.str.198,@object      // @.str.198
.L.str.198:
	.asciz	"|"
	.size	.L.str.198, 2

	.type	trace_raw_output_f2fs__submit_page_bio.symbols,@object // @trace_raw_output_f2fs__submit_page_bio.symbols
	.section	.rodata,"a",@progbits
	.p2align	3
trace_raw_output_f2fs__submit_page_bio.symbols:
	.xword	0                       // 0x0
	.xword	.L.str.10
	.xword	1                       // 0x1
	.xword	.L.str.11
	.xword	2                       // 0x2
	.xword	.L.str.12
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs__submit_page_bio.symbols, 64

	.type	trace_raw_output_f2fs__submit_page_bio.symbols.199,@object // @trace_raw_output_f2fs__submit_page_bio.symbols.199
	.p2align	3
trace_raw_output_f2fs__submit_page_bio.symbols.199:
	.xword	1                       // 0x1
	.xword	.L.str
	.xword	0                       // 0x0
	.xword	.L.str.1
	.xword	2                       // 0x2
	.xword	.L.str.2
	.xword	4                       // 0x4
	.xword	.L.str.3
	.xword	5                       // 0x5
	.xword	.L.str.4
	.xword	6                       // 0x6
	.xword	.L.str.5
	.xword	7                       // 0x7
	.xword	.L.str.6
	.xword	8                       // 0x8
	.xword	.L.str.7
	.xword	9                       // 0x9
	.xword	.L.str.200
	.xword	10                      // 0xa
	.xword	.L.str.201
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs__submit_page_bio.symbols.199, 176

	.type	.L.str.200,@object      // @.str.200
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.200:
	.asciz	"IN-PLACE"
	.size	.L.str.200, 9

	.type	.L.str.201,@object      // @.str.201
.L.str.201:
	.asciz	"OUT-OF-PLACE"
	.size	.L.str.201, 13

	.type	.L.str.202,@object      // @.str.202
.L.str.202:
	.asciz	"target"
	.size	.L.str.202, 7

	.type	.L.str.203,@object      // @.str.203
.L.str.203:
	.asciz	"sector_t"
	.size	.L.str.203, 9

	.type	.L.str.204,@object      // @.str.204
.L.str.204:
	.asciz	"sector"
	.size	.L.str.204, 7

	.type	.L.str.205,@object      // @.str.205
.L.str.205:
	.asciz	"dev = (%d,%d)/(%d,%d), rw = %s(%s), %s, sector = %lld, size = %u\n"
	.size	.L.str.205, 66

	.type	trace_raw_output_f2fs__bio.__flags,@object // @trace_raw_output_f2fs__bio.__flags
	.section	.rodata,"a",@progbits
	.p2align	3
trace_raw_output_f2fs__bio.__flags:
	.xword	1048576                 // 0x100000
	.xword	.L.str.192
	.xword	2048                    // 0x800
	.xword	.L.str.193
	.xword	4096                    // 0x1000
	.xword	.L.str.194
	.xword	8192                    // 0x2000
	.xword	.L.str.195
	.xword	524288                  // 0x80000
	.xword	.L.str.196
	.xword	262144                  // 0x40000
	.xword	.L.str.197
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs__bio.__flags, 112

	.type	trace_raw_output_f2fs__bio.symbols,@object // @trace_raw_output_f2fs__bio.symbols
	.p2align	3
trace_raw_output_f2fs__bio.symbols:
	.xword	1                       // 0x1
	.xword	.L.str
	.xword	0                       // 0x0
	.xword	.L.str.1
	.xword	2                       // 0x2
	.xword	.L.str.2
	.xword	4                       // 0x4
	.xword	.L.str.3
	.xword	5                       // 0x5
	.xword	.L.str.4
	.xword	6                       // 0x6
	.xword	.L.str.5
	.xword	7                       // 0x7
	.xword	.L.str.6
	.xword	8                       // 0x8
	.xword	.L.str.7
	.xword	9                       // 0x9
	.xword	.L.str.200
	.xword	10                      // 0xa
	.xword	.L.str.201
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs__bio.symbols, 176

	.type	.L.str.206,@object      // @.str.206
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.206:
	.asciz	"dev = (%d,%d), ino = %lu, pos = %llu, len = %u, flags = %u\n"
	.size	.L.str.206, 60

	.type	.L.str.207,@object      // @.str.207
.L.str.207:
	.asciz	"copied"
	.size	.L.str.207, 7

	.type	.L.str.208,@object      // @.str.208
.L.str.208:
	.asciz	"dev = (%d,%d), ino = %lu, pos = %llu, len = %u, copied = %u\n"
	.size	.L.str.208, 61

	.type	.L.str.209,@object      // @.str.209
.L.str.209:
	.asciz	"dir"
	.size	.L.str.209, 4

	.type	.L.str.210,@object      // @.str.210
.L.str.210:
	.asciz	"uptodate"
	.size	.L.str.210, 9

	.type	.L.str.211,@object      // @.str.211
.L.str.211:
	.asciz	"dev = (%d,%d), ino = %lu, %s, %s, index = %lu, dirty = %d, uptodate = %d\n"
	.size	.L.str.211, 74

	.type	trace_raw_output_f2fs__page.symbols,@object // @trace_raw_output_f2fs__page.symbols
	.section	.rodata,"a",@progbits
	.p2align	3
trace_raw_output_f2fs__page.symbols:
	.xword	1                       // 0x1
	.xword	.L.str
	.xword	0                       // 0x0
	.xword	.L.str.1
	.xword	2                       // 0x2
	.xword	.L.str.2
	.xword	4                       // 0x4
	.xword	.L.str.3
	.xword	5                       // 0x5
	.xword	.L.str.4
	.xword	6                       // 0x6
	.xword	.L.str.5
	.xword	7                       // 0x7
	.xword	.L.str.6
	.xword	8                       // 0x8
	.xword	.L.str.7
	.xword	9                       // 0x9
	.xword	.L.str.200
	.xword	10                      // 0xa
	.xword	.L.str.201
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs__page.symbols, 176

	.type	trace_raw_output_f2fs__page.symbols.212,@object // @trace_raw_output_f2fs__page.symbols.212
	.p2align	3
trace_raw_output_f2fs__page.symbols.212:
	.xword	0                       // 0x0
	.xword	.L.str.213
	.xword	1                       // 0x1
	.xword	.L.str.214
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs__page.symbols.212, 48

	.type	.L.str.213,@object      // @.str.213
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.213:
	.asciz	"FILE"
	.size	.L.str.213, 5

	.type	.L.str.214,@object      // @.str.214
.L.str.214:
	.asciz	"DIR"
	.size	.L.str.214, 4

	.type	.L.str.215,@object      // @.str.215
.L.str.215:
	.asciz	"dev = (%d,%d), ino = %lu, index = %lu, ret = %lx\n"
	.size	.L.str.215, 50

	.type	.L.str.216,@object      // @.str.216
.L.str.216:
	.asciz	"long"
	.size	.L.str.216, 5

	.type	.L.str.217,@object      // @.str.217
.L.str.217:
	.asciz	"nr_to_write"
	.size	.L.str.217, 12

	.type	.L.str.218,@object      // @.str.218
.L.str.218:
	.asciz	"pages_skipped"
	.size	.L.str.218, 14

	.type	.L.str.219,@object      // @.str.219
.L.str.219:
	.asciz	"range_start"
	.size	.L.str.219, 12

	.type	.L.str.220,@object      // @.str.220
.L.str.220:
	.asciz	"range_end"
	.size	.L.str.220, 10

	.type	.L.str.221,@object      // @.str.221
.L.str.221:
	.asciz	"writeback_index"
	.size	.L.str.221, 16

	.type	.L.str.222,@object      // @.str.222
.L.str.222:
	.asciz	"sync_mode"
	.size	.L.str.222, 10

	.type	.L.str.223,@object      // @.str.223
.L.str.223:
	.asciz	"char"
	.size	.L.str.223, 5

	.type	.L.str.224,@object      // @.str.224
.L.str.224:
	.asciz	"for_kupdate"
	.size	.L.str.224, 12

	.type	.L.str.225,@object      // @.str.225
.L.str.225:
	.asciz	"for_background"
	.size	.L.str.225, 15

	.type	.L.str.226,@object      // @.str.226
.L.str.226:
	.asciz	"tagged_writepages"
	.size	.L.str.226, 18

	.type	.L.str.227,@object      // @.str.227
.L.str.227:
	.asciz	"for_reclaim"
	.size	.L.str.227, 12

	.type	.L.str.228,@object      // @.str.228
.L.str.228:
	.asciz	"range_cyclic"
	.size	.L.str.228, 13

	.type	.L.str.229,@object      // @.str.229
.L.str.229:
	.asciz	"for_sync"
	.size	.L.str.229, 9

	.type	.L.str.230,@object      // @.str.230
.L.str.230:
	.asciz	"dev = (%d,%d), ino = %lu, %s, %s, nr_to_write %ld, skipped %ld, start %lld, end %lld, wb_idx %lu, sync_mode %d, kupdate %u background %u tagged %u reclaim %u cyclic %u sync %u\n"
	.size	.L.str.230, 177

	.type	trace_raw_output_f2fs_writepages.symbols,@object // @trace_raw_output_f2fs_writepages.symbols
	.section	.rodata,"a",@progbits
	.p2align	3
trace_raw_output_f2fs_writepages.symbols:
	.xword	1                       // 0x1
	.xword	.L.str
	.xword	0                       // 0x0
	.xword	.L.str.1
	.xword	2                       // 0x2
	.xword	.L.str.2
	.xword	4                       // 0x4
	.xword	.L.str.3
	.xword	5                       // 0x5
	.xword	.L.str.4
	.xword	6                       // 0x6
	.xword	.L.str.5
	.xword	7                       // 0x7
	.xword	.L.str.6
	.xword	8                       // 0x8
	.xword	.L.str.7
	.xword	9                       // 0x9
	.xword	.L.str.200
	.xword	10                      // 0xa
	.xword	.L.str.201
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs_writepages.symbols, 176

	.type	trace_raw_output_f2fs_writepages.symbols.231,@object // @trace_raw_output_f2fs_writepages.symbols.231
	.p2align	3
trace_raw_output_f2fs_writepages.symbols.231:
	.xword	0                       // 0x0
	.xword	.L.str.213
	.xword	1                       // 0x1
	.xword	.L.str.214
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs_writepages.symbols.231, 48

	.type	.L.str.232,@object      // @.str.232
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.232:
	.asciz	"nrpage"
	.size	.L.str.232, 7

	.type	.L.str.233,@object      // @.str.233
.L.str.233:
	.asciz	"dev = (%d,%d), ino = %lu, start = %lu nrpage = %u\n"
	.size	.L.str.233, 51

	.type	.L.str.234,@object      // @.str.234
.L.str.234:
	.asciz	"reason"
	.size	.L.str.234, 7

	.type	.L.str.235,@object      // @.str.235
.L.str.235:
	.asciz	"char *"
	.size	.L.str.235, 7

	.type	.L.str.236,@object      // @.str.236
.L.str.236:
	.asciz	"msg"
	.size	.L.str.236, 4

	.type	.L.str.237,@object      // @.str.237
.L.str.237:
	.asciz	"dev = (%d,%d), checkpoint for %s, state = %s\n"
	.size	.L.str.237, 46

	.type	trace_raw_output_f2fs_write_checkpoint.__flags,@object // @trace_raw_output_f2fs_write_checkpoint.__flags
	.section	.rodata,"a",@progbits
	.p2align	3
trace_raw_output_f2fs_write_checkpoint.__flags:
	.xword	1                       // 0x1
	.xword	.L.str.238
	.xword	2                       // 0x2
	.xword	.L.str.239
	.xword	4                       // 0x4
	.xword	.L.str.240
	.xword	8                       // 0x8
	.xword	.L.str.241
	.xword	16                      // 0x10
	.xword	.L.str.242
	.xword	64                      // 0x40
	.xword	.L.str.243
	.xword	32                      // 0x20
	.xword	.L.str.244
	.xword	128                     // 0x80
	.xword	.L.str.245
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs_write_checkpoint.__flags, 144

	.type	.L.str.238,@object      // @.str.238
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.238:
	.asciz	"Umount"
	.size	.L.str.238, 7

	.type	.L.str.239,@object      // @.str.239
.L.str.239:
	.asciz	"Fastboot"
	.size	.L.str.239, 9

	.type	.L.str.240,@object      // @.str.240
.L.str.240:
	.asciz	"Sync"
	.size	.L.str.240, 5

	.type	.L.str.241,@object      // @.str.241
.L.str.241:
	.asciz	"Recovery"
	.size	.L.str.241, 9

	.type	.L.str.242,@object      // @.str.242
.L.str.242:
	.asciz	"Discard"
	.size	.L.str.242, 8

	.type	.L.str.243,@object      // @.str.243
.L.str.243:
	.asciz	"Pause"
	.size	.L.str.243, 6

	.type	.L.str.244,@object      // @.str.244
.L.str.244:
	.asciz	"Trimmed"
	.size	.L.str.244, 8

	.type	.L.str.245,@object      // @.str.245
.L.str.245:
	.asciz	"Resize"
	.size	.L.str.245, 7

	.type	.L.str.246,@object      // @.str.246
.L.str.246:
	.asciz	"blkstart"
	.size	.L.str.246, 9

	.type	.L.str.247,@object      // @.str.247
.L.str.247:
	.asciz	"blklen"
	.size	.L.str.247, 7

	.type	.L.str.248,@object      // @.str.248
.L.str.248:
	.asciz	"dev = (%d,%d), blkstart = 0x%llx, blklen = 0x%llx\n"
	.size	.L.str.248, 51

	.type	.L.str.249,@object      // @.str.249
.L.str.249:
	.asciz	"dev = (%d,%d), reset zone at block = 0x%llx\n"
	.size	.L.str.249, 45

	.type	.L.str.250,@object      // @.str.250
.L.str.250:
	.asciz	"nobarrier"
	.size	.L.str.250, 10

	.type	.L.str.251,@object      // @.str.251
.L.str.251:
	.asciz	"flush_merge"
	.size	.L.str.251, 12

	.type	.L.str.252,@object      // @.str.252
.L.str.252:
	.asciz	"dev = (%d,%d), %s %s, ret = %d\n"
	.size	.L.str.252, 32

	.type	.L.str.253,@object      // @.str.253
.L.str.253:
	.asciz	"skip (nobarrier)"
	.size	.L.str.253, 17

	.type	.L.str.254,@object      // @.str.254
.L.str.254:
	.asciz	"issue"
	.size	.L.str.254, 6

	.type	.L.str.255,@object      // @.str.255
.L.str.255:
	.asciz	" with flush_merge"
	.size	.L.str.255, 18

	.type	.L.str.256,@object      // @.str.256
.L.str.256:
	.zero	1
	.size	.L.str.256, 1

	.type	.L.str.257,@object      // @.str.257
.L.str.257:
	.asciz	"pgofs"
	.size	.L.str.257, 6

	.type	.L.str.258,@object      // @.str.258
.L.str.258:
	.asciz	"dev = (%d,%d), ino = %lu, pgofs = %u\n"
	.size	.L.str.258, 38

	.type	.L.str.259,@object      // @.str.259
.L.str.259:
	.asciz	"fofs"
	.size	.L.str.259, 5

	.type	.L.str.260,@object      // @.str.260
.L.str.260:
	.asciz	"u32"
	.size	.L.str.260, 4

	.type	.L.str.261,@object      // @.str.261
.L.str.261:
	.asciz	"blk"
	.size	.L.str.261, 4

	.type	.L.str.262,@object      // @.str.262
.L.str.262:
	.asciz	"dev = (%d,%d), ino = %lu, pgofs = %u, ext_info(fofs: %u, blk: %u, len: %u)\n"
	.size	.L.str.262, 76

	.type	.L.str.263,@object      // @.str.263
.L.str.263:
	.asciz	"dev = (%d,%d), ino = %lu, pgofs = %u, blkaddr = %u, len = %u\n"
	.size	.L.str.263, 62

	.type	.L.str.264,@object      // @.str.264
.L.str.264:
	.asciz	"node_cnt"
	.size	.L.str.264, 9

	.type	.L.str.265,@object      // @.str.265
.L.str.265:
	.asciz	"tree_cnt"
	.size	.L.str.265, 9

	.type	.L.str.266,@object      // @.str.266
.L.str.266:
	.asciz	"dev = (%d,%d), shrunk: node_cnt = %u, tree_cnt = %u\n"
	.size	.L.str.266, 53

	.type	.L.str.267,@object      // @.str.267
.L.str.267:
	.asciz	"dev = (%d,%d), ino = %lu, destroyed: node_cnt = %u\n"
	.size	.L.str.267, 52

	.type	.L.str.268,@object      // @.str.268
.L.str.268:
	.asciz	"s64"
	.size	.L.str.268, 4

	.type	.L.str.269,@object      // @.str.269
.L.str.269:
	.asciz	"dev = (%d,%d), %s, dirty count = %lld\n"
	.size	.L.str.269, 39

	.type	trace_raw_output_f2fs_sync_dirty_inodes.symbols,@object // @trace_raw_output_f2fs_sync_dirty_inodes.symbols
	.section	.rodata,"a",@progbits
	.p2align	3
trace_raw_output_f2fs_sync_dirty_inodes.symbols:
	.xword	0                       // 0x0
	.xword	.L.str.213
	.xword	1                       // 0x1
	.xword	.L.str.214
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs_sync_dirty_inodes.symbols, 48

	.type	.L.str.270,@object      // @.str.270
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.270:
	.asciz	"dev = (%d,%d), mode: %s, ret:%d\n"
	.size	.L.str.270, 33

	.type	trace_raw_output_f2fs_shutdown.symbols,@object // @trace_raw_output_f2fs_shutdown.symbols
	.section	.rodata,"a",@progbits
	.p2align	3
trace_raw_output_f2fs_shutdown.symbols:
	.xword	0                       // 0x0
	.xword	.L.str.271
	.xword	1                       // 0x1
	.xword	.L.str.272
	.xword	2                       // 0x2
	.xword	.L.str.273
	.xword	3                       // 0x3
	.xword	.L.str.274
	.xword	4                       // 0x4
	.xword	.L.str.275
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs_shutdown.symbols, 96

	.type	.L.str.271,@object      // @.str.271
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.271:
	.asciz	"full sync"
	.size	.L.str.271, 10

	.type	.L.str.272,@object      // @.str.272
.L.str.272:
	.asciz	"meta sync"
	.size	.L.str.272, 10

	.type	.L.str.273,@object      // @.str.273
.L.str.273:
	.asciz	"no sync"
	.size	.L.str.273, 8

	.type	.L.str.274,@object      // @.str.274
.L.str.274:
	.asciz	"meta flush"
	.size	.L.str.274, 11

	.type	.L.str.275,@object      // @.str.275
.L.str.275:
	.asciz	"need fsck"
	.size	.L.str.275, 10

	.type	.L.str.276,@object      // @.str.276
.L.str.276:
	.asciz	"idx"
	.size	.L.str.276, 4

	.type	.L.str.277,@object      // @.str.277
.L.str.277:
	.asciz	"algtype"
	.size	.L.str.277, 8

	.type	.L.str.278,@object      // @.str.278
.L.str.278:
	.asciz	"dev = (%d,%d), ino = %lu, cluster_idx:%lu, cluster_size = %u, algorithm = %s\n"
	.size	.L.str.278, 78

	.type	trace_raw_output_f2fs_zip_start.symbols,@object // @trace_raw_output_f2fs_zip_start.symbols
	.section	.rodata,"a",@progbits
	.p2align	3
trace_raw_output_f2fs_zip_start.symbols:
	.xword	0                       // 0x0
	.xword	.L.str.279
	.xword	1                       // 0x1
	.xword	.L.str.280
	.xword	2                       // 0x2
	.xword	.L.str.281
	.xword	3                       // 0x3
	.xword	.L.str.282
	.xword	-1                      // 0xffffffffffffffff
	.xword	0
	.size	trace_raw_output_f2fs_zip_start.symbols, 80

	.type	.L.str.279,@object      // @.str.279
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.279:
	.asciz	"LZO"
	.size	.L.str.279, 4

	.type	.L.str.280,@object      // @.str.280
.L.str.280:
	.asciz	"LZ4"
	.size	.L.str.280, 4

	.type	.L.str.281,@object      // @.str.281
.L.str.281:
	.asciz	"ZSTD"
	.size	.L.str.281, 5

	.type	.L.str.282,@object      // @.str.282
.L.str.282:
	.asciz	"LZO-RLE"
	.size	.L.str.282, 8

	.type	.L.str.283,@object      // @.str.283
.L.str.283:
	.asciz	"dev = (%d,%d), ino = %lu, cluster_idx:%lu, compressed_size = %u, ret = %d\n"
	.size	.L.str.283, 75

	.type	.L.str.284,@object      // @.str.284
.L.str.284:
	.asciz	"unsigned long long"
	.size	.L.str.284, 19

	.type	.L.str.285,@object      // @.str.285
.L.str.285:
	.asciz	"app_dio"
	.size	.L.str.285, 8

	.type	.L.str.286,@object      // @.str.286
.L.str.286:
	.asciz	"app_bio"
	.size	.L.str.286, 8

	.type	.L.str.287,@object      // @.str.287
.L.str.287:
	.asciz	"app_wio"
	.size	.L.str.287, 8

	.type	.L.str.288,@object      // @.str.288
.L.str.288:
	.asciz	"app_mio"
	.size	.L.str.288, 8

	.type	.L.str.289,@object      // @.str.289
.L.str.289:
	.asciz	"fs_dio"
	.size	.L.str.289, 7

	.type	.L.str.290,@object      // @.str.290
.L.str.290:
	.asciz	"fs_nio"
	.size	.L.str.290, 7

	.type	.L.str.291,@object      // @.str.291
.L.str.291:
	.asciz	"fs_mio"
	.size	.L.str.291, 7

	.type	.L.str.292,@object      // @.str.292
.L.str.292:
	.asciz	"fs_gc_dio"
	.size	.L.str.292, 10

	.type	.L.str.293,@object      // @.str.293
.L.str.293:
	.asciz	"fs_gc_nio"
	.size	.L.str.293, 10

	.type	.L.str.294,@object      // @.str.294
.L.str.294:
	.asciz	"fs_cp_dio"
	.size	.L.str.294, 10

	.type	.L.str.295,@object      // @.str.295
.L.str.295:
	.asciz	"fs_cp_nio"
	.size	.L.str.295, 10

	.type	.L.str.296,@object      // @.str.296
.L.str.296:
	.asciz	"fs_cp_mio"
	.size	.L.str.296, 10

	.type	.L.str.297,@object      // @.str.297
.L.str.297:
	.asciz	"app_drio"
	.size	.L.str.297, 9

	.type	.L.str.298,@object      // @.str.298
.L.str.298:
	.asciz	"app_brio"
	.size	.L.str.298, 9

	.type	.L.str.299,@object      // @.str.299
.L.str.299:
	.asciz	"app_rio"
	.size	.L.str.299, 8

	.type	.L.str.300,@object      // @.str.300
.L.str.300:
	.asciz	"app_mrio"
	.size	.L.str.300, 9

	.type	.L.str.301,@object      // @.str.301
.L.str.301:
	.asciz	"fs_drio"
	.size	.L.str.301, 8

	.type	.L.str.302,@object      // @.str.302
.L.str.302:
	.asciz	"fs_gdrio"
	.size	.L.str.302, 9

	.type	.L.str.303,@object      // @.str.303
.L.str.303:
	.asciz	"fs_cdrio"
	.size	.L.str.303, 9

	.type	.L.str.304,@object      // @.str.304
.L.str.304:
	.asciz	"fs_nrio"
	.size	.L.str.304, 8

	.type	.L.str.305,@object      // @.str.305
.L.str.305:
	.asciz	"fs_mrio"
	.size	.L.str.305, 8

	.type	.L.str.306,@object      // @.str.306
.L.str.306:
	.asciz	"fs_discard"
	.size	.L.str.306, 11

	.type	.L.str.307,@object      // @.str.307
.L.str.307:
	.asciz	"dev = (%d,%d), app [write=%llu (direct=%llu, buffered=%llu), mapped=%llu], fs [data=%llu, node=%llu, meta=%llu, discard=%llu], gc [data=%llu, node=%llu], cp [data=%llu, node=%llu, meta=%llu], app [read=%llu (direct=%llu, buffered=%llu), mapped=%llu], fs [data=%llu, (gc_data=%llu, compr_data=%llu), node=%llu, meta=%llu]\n"
	.size	.L.str.307, 322

	.type	.L.str.308,@object      // @.str.308
.L.str.308:
	.asciz	"left"
	.size	.L.str.308, 5

	.type	.L.str.309,@object      // @.str.309
.L.str.309:
	.asciz	"seq"
	.size	.L.str.309, 4

	.type	.L.str.310,@object      // @.str.310
.L.str.310:
	.asciz	"ssr :left_space %u free_segments: %u is_seq: %u \n"
	.size	.L.str.310, 50

	.type	.L.str.311,@object      // @.str.311
.L.str.311:
	.asciz	"inner_ino"
	.size	.L.str.311, 10

	.type	.L.str.312,@object      // @.str.312
.L.str.312:
	.asciz	"inner_nlink"
	.size	.L.str.312, 12

	.type	.L.str.313,@object      // @.str.313
.L.str.313:
	.asciz	"dev = (%d,%d), ino = %lu, pino = %lu, i_size = %lld, i_nlink = %u, inner = %lu, inner i_nlink = %u\n"
	.size	.L.str.313, 100

	.type	.L.str.314,@object      // @.str.314
.L.str.314:
	.asciz	"dev = (%d,%d), outer ino = %lu, i_size = %lld, map to inner ino = %lu, inner i_nlink = %u\n"
	.size	.L.str.314, 91

	.type	.L.str.315,@object      // @.str.315
.L.str.315:
	.asciz	"\0013Cannot get buffer_head of extra_flags_block\n"
	.size	.L.str.315, 47

	.type	.L.str.316,@object      // @.str.316
.L.str.316:
	.asciz	"\0013quota sysfile may be corrupted, skip loading it"
	.size	.L.str.316, 50

	.type	.L.str.317,@object      // @.str.317
.L.str.317:
	.asciz	"\0013quota file may be corrupted, skip loading it"
	.size	.L.str.317, 47

	.type	.L.str.318,@object      // @.str.318
.L.str.318:
	.asciz	"\0013Failed to enable quota tracking (type=%d, err=%d). Please run fsck to fix."
	.size	.L.str.318, 77

	.type	.L.str.319,@object      // @.str.319
.L.str.319:
	.asciz	"\0013Bad quota inode %u:%lu"
	.size	.L.str.319, 25

	.type	.L.str.320,@object      // @.str.320
	.section	.rodata,"a",@progbits
.L.str.320:
	.asciz	"f2fs"
	.size	.L.str.320, 5

	.type	f2fs_fill_super.__key,@object // @f2fs_fill_super.__key
	.local	f2fs_fill_super.__key
	.comm	f2fs_fill_super.__key,1,1
	.type	.L.str.321,@object      // @.str.321
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.321:
	.asciz	"&sbi->bd_mutex"
	.size	.L.str.321, 15

	.type	.L.str.322,@object      // @.str.322
.L.str.322:
	.asciz	"crc32"
	.size	.L.str.322, 6

	.type	.L.str.323,@object      // @.str.323
.L.str.323:
	.asciz	"\0013Cannot load crc32 driver."
	.size	.L.str.323, 28

	.type	.L.str.324,@object      // @.str.324
.L.str.324:
	.asciz	"\0013unable to set blocksize"
	.size	.L.str.324, 26

	.type	f2fs_quota_operations,@object // @f2fs_quota_operations
	.section	.rodata,"a",@progbits
	.p2align	3
f2fs_quota_operations:
	.xword	f2fs_dquot_commit
	.xword	dquot_alloc
	.xword	dquot_destroy
	.xword	f2fs_dquot_acquire
	.xword	f2fs_dquot_release
	.xword	f2fs_dquot_mark_dquot_dirty
	.xword	f2fs_dquot_commit_info
	.xword	f2fs_get_reserved_space
	.xword	f2fs_get_projid
	.xword	0
	.xword	dquot_get_next_id
	.xword	0                       // 0x0
	.xword	0                       // 0x0
	.size	f2fs_quota_operations, 104

	.type	f2fs_quotactl_ops,@object // @f2fs_quotactl_ops
	.p2align	3
f2fs_quotactl_ops:
	.xword	f2fs_quota_on
	.xword	f2fs_quota_off
	.xword	0
	.xword	0
	.xword	f2fs_quota_sync
	.xword	dquot_set_dqinfo
	.xword	dquot_get_dqblk
	.xword	dquot_get_next_dqblk
	.xword	dquot_set_dqblk
	.xword	dquot_get_state
	.xword	0
	.xword	0                       // 0x0
	.xword	0                       // 0x0
	.size	f2fs_quotactl_ops, 104

	.type	f2fs_sops,@object       // @f2fs_sops
	.p2align	3
f2fs_sops:
	.xword	f2fs_alloc_inode
	.xword	0
	.xword	f2fs_free_inode
	.xword	f2fs_dirty_inode
	.xword	f2fs_write_inode
	.xword	f2fs_drop_inode
	.xword	f2fs_evict_inode
	.xword	f2fs_put_super
	.xword	__f2fs_sync_fs
	.xword	0
	.xword	f2fs_freeze
	.xword	0
	.xword	f2fs_unfreeze
	.xword	f2fs_statfs
	.xword	f2fs_remount
	.xword	0
	.xword	0
	.xword	0
	.xword	0
	.xword	f2fs_show_options
	.xword	0
	.xword	0
	.xword	0
	.xword	0
	.xword	f2fs_quota_read
	.xword	f2fs_quota_write
	.xword	f2fs_get_dquots
	.xword	0
	.xword	0
	.xword	0
	.xword	f2fs_flush_mbio
	.xword	0                       // 0x0
	.xword	0                       // 0x0
	.xword	0                       // 0x0
	.xword	0                       // 0x0
	.size	f2fs_sops, 280

	.type	f2fs_cryptops,@object   // @f2fs_cryptops
	.data
	.p2align	3
f2fs_cryptops:
	.word	0                       // 0x0
	.zero	4
	.xword	.L.str.617
	.xword	f2fs_get_context
	.xword	f2fs_set_context
	.xword	f2fs_get_dummy_context
	.xword	f2fs_empty_dir
	.word	255                     // 0xff
	.zero	4
	.xword	f2fs_has_stable_inodes
	.xword	f2fs_get_ino_and_lblk_bits
	.xword	f2fs_inline_crypt_enabled
	.xword	f2fs_get_num_devices
	.xword	f2fs_get_devices
	.xword	f2fs_get_crypt_keyinfo
	.xword	f2fs_is_file_sdp_encrypted
	.xword	f2fs_get_sdp_context
	.xword	f2fs_set_sdp_context
	.xword	f2fs_get_sdp_encrypt_flags
	.xword	f2fs_set_sdp_encrypt_flags
	.xword	f2fs_set_hwdps_flags
	.xword	f2fs_get_hwdps_flags
	.size	f2fs_cryptops, 160

	.type	f2fs_export_ops,@object // @f2fs_export_ops
	.section	.rodata,"a",@progbits
	.p2align	3
f2fs_export_ops:
	.xword	0
	.xword	f2fs_fh_to_dentry
	.xword	f2fs_fh_to_parent
	.xword	0
	.xword	f2fs_get_parent
	.xword	0
	.xword	0
	.xword	0
	.xword	0
	.size	f2fs_export_ops, 72

	.type	f2fs_fill_super.__key.325,@object // @f2fs_fill_super.__key.325
	.local	f2fs_fill_super.__key.325
	.comm	f2fs_fill_super.__key.325,1,1
	.type	.L.str.326,@object      // @.str.326
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.326:
	.asciz	"&sbi->gc_lock"
	.size	.L.str.326, 14

	.type	f2fs_fill_super.__key.327,@object // @f2fs_fill_super.__key.327
	.local	f2fs_fill_super.__key.327
	.comm	f2fs_fill_super.__key.327,1,1
	.type	.L.str.328,@object      // @.str.328
.L.str.328:
	.asciz	"&sbi->writepages"
	.size	.L.str.328, 17

	.type	f2fs_fill_super.__key.329,@object // @f2fs_fill_super.__key.329
	.local	f2fs_fill_super.__key.329
	.comm	f2fs_fill_super.__key.329,1,1
	.type	.L.str.330,@object      // @.str.330
.L.str.330:
	.asciz	"&sbi->cp_global_sem"
	.size	.L.str.330, 20

	.type	f2fs_fill_super.__key.331,@object // @f2fs_fill_super.__key.331
	.local	f2fs_fill_super.__key.331
	.comm	f2fs_fill_super.__key.331,1,1
	.type	.L.str.332,@object      // @.str.332
.L.str.332:
	.asciz	"&sbi->node_write"
	.size	.L.str.332, 17

	.type	f2fs_fill_super.__key.333,@object // @f2fs_fill_super.__key.333
	.local	f2fs_fill_super.__key.333
	.comm	f2fs_fill_super.__key.333,1,1
	.type	.L.str.334,@object      // @.str.334
.L.str.334:
	.asciz	"&sbi->node_change"
	.size	.L.str.334, 18

	.type	f2fs_fill_super.__key.335,@object // @f2fs_fill_super.__key.335
	.local	f2fs_fill_super.__key.335
	.comm	f2fs_fill_super.__key.335,1,1
	.type	.L.str.336,@object      // @.str.336
.L.str.336:
	.asciz	"&sbi->write_io[i][j].io_rwsem"
	.size	.L.str.336, 30

	.type	f2fs_fill_super.__key.337,@object // @f2fs_fill_super.__key.337
	.local	f2fs_fill_super.__key.337
	.comm	f2fs_fill_super.__key.337,1,1
	.type	.L.str.338,@object      // @.str.338
.L.str.338:
	.asciz	"&sbi->write_io[i][j].bio_list_lock"
	.size	.L.str.338, 35

	.type	f2fs_fill_super.__key.339,@object // @f2fs_fill_super.__key.339
	.local	f2fs_fill_super.__key.339
	.comm	f2fs_fill_super.__key.339,1,1
	.type	.L.str.340,@object      // @.str.340
.L.str.340:
	.asciz	"&sbi->cp_rwsem"
	.size	.L.str.340, 15

	.type	f2fs_fill_super.__key.341,@object // @f2fs_fill_super.__key.341
	.local	f2fs_fill_super.__key.341
	.comm	f2fs_fill_super.__key.341,1,1
	.type	.L.str.342,@object      // @.str.342
.L.str.342:
	.asciz	"&sbi->cp_wait"
	.size	.L.str.342, 14

	.type	.L.str.343,@object      // @.str.343
.L.str.343:
	.asciz	"\0013Failed to read F2FS meta data inode"
	.size	.L.str.343, 38

	.type	.L.str.344,@object      // @.str.344
.L.str.344:
	.asciz	"\0013Failed to get valid F2FS checkpoint"
	.size	.L.str.344, 38

	.type	.L.str.345,@object      // @.str.345
.L.str.345:
	.asciz	"\0013Failed to find devices"
	.size	.L.str.345, 25

	.type	.L.str.346,@object      // @.str.346
.L.str.346:
	.asciz	"\0013Failed to initialize post read workqueue"
	.size	.L.str.346, 43

	.type	f2fs_fill_super.__key.347,@object // @f2fs_fill_super.__key.347
	.local	f2fs_fill_super.__key.347
	.comm	f2fs_fill_super.__key.347,1,1
	.type	.L.str.348,@object      // @.str.348
.L.str.348:
	.asciz	"&sbi->flush_lock"
	.size	.L.str.348, 17

	.type	.L.str.349,@object      // @.str.349
.L.str.349:
	.asciz	"\0013Failed to start F2FS issue_checkpoint_thread (%d)"
	.size	.L.str.349, 52

	.type	.L.str.350,@object      // @.str.350
.L.str.350:
	.asciz	"\0013Failed to initialize F2FS segment manager (%d)"
	.size	.L.str.350, 49

	.type	.L.str.351,@object      // @.str.351
.L.str.351:
	.asciz	"\0013Failed to initialize F2FS node manager (%d)"
	.size	.L.str.351, 46

	.type	.L.str.352,@object      // @.str.352
.L.str.352:
	.asciz	"\0013Failed to read node inode"
	.size	.L.str.352, 28

	.type	.L.str.353,@object      // @.str.353
.L.str.353:
	.asciz	"\0013Failed to read root inode"
	.size	.L.str.353, 28

	.type	.L.str.354,@object      // @.str.354
.L.str.354:
	.asciz	"\0013Cannot turn on quotas: error %d"
	.size	.L.str.354, 34

	.type	.L.str.355,@object      // @.str.355
.L.str.355:
	.asciz	"\0013Need to recover fsync data, but write access unavailable, please try mount w/ disable_roll_forward or norecovery"
	.size	.L.str.355, 115

	.type	.L.str.356,@object      // @.str.356
.L.str.356:
	.asciz	"\0016write access unavailable, skipping recovery"
	.size	.L.str.356, 46

	.type	.L.str.357,@object      // @.str.357
.L.str.357:
	.asciz	"SBI_NEED_FSCK:%s:%d\n"
	.size	.L.str.357, 21

	.type	.L__func__.f2fs_fill_super,@object // @__func__.f2fs_fill_super
.L__func__.f2fs_fill_super:
	.asciz	"f2fs_fill_super"
	.size	.L__func__.f2fs_fill_super, 16

	.type	.L.str.358,@object      // @.str.358
.L.str.358:
	.asciz	"\0013Cannot recover all fsync data errno=%d"
	.size	.L.str.358, 41

	.type	.L.str.359,@object      // @.str.359
.L.str.359:
	.asciz	"\0013Need to recover fsync data"
	.size	.L.str.359, 29

	.type	.L.str.360,@object      // @.str.360
.L.str.360:
	.asciz	"\0016Try to recover %dth superblock, ret: %d"
	.size	.L.str.360, 42

	.type	.L.str.361,@object      // @.str.361
.L.str.361:
	.asciz	"\0015Mounted with checkpoint version = %llx"
	.size	.L.str.361, 41

	.type	.L.str.362,@object      // @.str.362
.L.str.362:
	.asciz	"\0013Unable to read %dth superblock"
	.size	.L.str.362, 33

	.type	.L.str.363,@object      // @.str.363
.L.str.363:
	.asciz	"\0013Can't find valid F2FS filesystem in %dth superblock"
	.size	.L.str.363, 54

	.type	.L.str.364,@object      // @.str.364
.L.str.364:
	.asciz	"\0016Magic Mismatch, valid(0x%x) - read(0x%x)"
	.size	.L.str.364, 43

	.type	.L.str.365,@object      // @.str.365
.L.str.365:
	.asciz	"\0016Invalid SB checksum offset: %zu"
	.size	.L.str.365, 34

	.type	.L.str.366,@object      // @.str.366
.L.str.366:
	.asciz	"\0016Invalid SB checksum value: %u"
	.size	.L.str.366, 32

	.type	.L.str.367,@object      // @.str.367
.L.str.367:
	.asciz	"\0016Invalid log_blocksize (%u), supports only %u"
	.size	.L.str.367, 47

	.type	.L.str.368,@object      // @.str.368
.L.str.368:
	.asciz	"\0016Invalid log blocks per segment (%u)"
	.size	.L.str.368, 38

	.type	.L.str.369,@object      // @.str.369
.L.str.369:
	.asciz	"\0016Invalid log sectorsize (%u)"
	.size	.L.str.369, 30

	.type	.L.str.370,@object      // @.str.370
.L.str.370:
	.asciz	"\0016Invalid log sectors per block(%u) log sectorsize(%u)"
	.size	.L.str.370, 55

	.type	.L.str.371,@object      // @.str.371
.L.str.371:
	.asciz	"\0016Invalid segment count (%u)"
	.size	.L.str.371, 29

	.type	.L.str.372,@object      // @.str.372
.L.str.372:
	.asciz	"\0016Invalid segment/section count (%u, %u x %u)"
	.size	.L.str.372, 46

	.type	.L.str.373,@object      // @.str.373
.L.str.373:
	.asciz	"\0016Invalid segment/section count (%u != %u * %u)"
	.size	.L.str.373, 48

	.type	.L.str.374,@object      // @.str.374
.L.str.374:
	.asciz	"\0016Small segment_count (%u < %u * %u)"
	.size	.L.str.374, 37

	.type	.L.str.375,@object      // @.str.375
.L.str.375:
	.asciz	"\0016Wrong segment_count / block_count (%u > %llu)"
	.size	.L.str.375, 48

	.type	.L.str.376,@object      // @.str.376
.L.str.376:
	.asciz	"\0016Segment count (%u) mismatch with total segments from devices (%u)"
	.size	.L.str.376, 68

	.type	.L.str.377,@object      // @.str.377
.L.str.377:
	.asciz	"\0016Zoned block device path is missing"
	.size	.L.str.377, 37

	.type	.L.str.378,@object      // @.str.378
.L.str.378:
	.asciz	"\0016Wrong secs_per_zone / total_sections (%u, %u)"
	.size	.L.str.378, 48

	.type	.L.str.379,@object      // @.str.379
.L.str.379:
	.asciz	"\0016Corrupted extension count (%u + %u > %u)"
	.size	.L.str.379, 43

	.type	.L.str.380,@object      // @.str.380
.L.str.380:
	.asciz	"\0016Insane cp_payload (%u > %u)"
	.size	.L.str.380, 30

	.type	.L.str.381,@object      // @.str.381
.L.str.381:
	.asciz	"\0016Invalid Fs Meta Ino: node(%u) meta(%u) root(%u)"
	.size	.L.str.381, 50

	.type	.L.str.382,@object      // @.str.382
.L.str.382:
	.asciz	"\0016Mismatch start address, segment0(%u) cp_blkaddr(%u)"
	.size	.L.str.382, 54

	.type	.L.str.383,@object      // @.str.383
.L.str.383:
	.asciz	"\0016Wrong CP boundary, start(%u) end(%u) blocks(%u)"
	.size	.L.str.383, 50

	.type	.L.str.384,@object      // @.str.384
.L.str.384:
	.asciz	"\0016Wrong SIT boundary, start(%u) end(%u) blocks(%u)"
	.size	.L.str.384, 51

	.type	.L.str.385,@object      // @.str.385
.L.str.385:
	.asciz	"\0016Wrong NAT boundary, start(%u) end(%u) blocks(%u)"
	.size	.L.str.385, 51

	.type	.L.str.386,@object      // @.str.386
.L.str.386:
	.asciz	"\0016Wrong SSA boundary, start(%u) end(%u) blocks(%u)"
	.size	.L.str.386, 51

	.type	.L.str.387,@object      // @.str.387
.L.str.387:
	.asciz	"\0016Wrong MAIN_AREA boundary, start(%u) end(%llu) block(%u)"
	.size	.L.str.387, 58

	.type	.L.str.388,@object      // @.str.388
.L.str.388:
	.asciz	"internally"
	.size	.L.str.388, 11

	.type	.L.str.389,@object      // @.str.389
.L.str.389:
	.asciz	"failed"
	.size	.L.str.389, 7

	.type	.L.str.390,@object      // @.str.390
.L.str.390:
	.asciz	"done"
	.size	.L.str.390, 5

	.type	.L.str.391,@object      // @.str.391
.L.str.391:
	.asciz	"\0016Fix alignment : %s, start(%u) end(%llu) block(%u)"
	.size	.L.str.391, 52

	.type	.L.str.392,@object      // @.str.392
.L.str.392:
	.asciz	","
	.size	.L.str.392, 2

	.type	f2fs_tokens,@object     // @f2fs_tokens
	.data
	.p2align	3
f2fs_tokens:
	.word	0                       // 0x0
	.zero	4
	.xword	.L.str.429
	.word	1                       // 0x1
	.zero	4
	.xword	.L.str.430
	.word	2                       // 0x2
	.zero	4
	.xword	.L.str.431
	.word	3                       // 0x3
	.zero	4
	.xword	.L.str.432
	.word	4                       // 0x4
	.zero	4
	.xword	.L.str.433
	.word	5                       // 0x5
	.zero	4
	.xword	.L.str.434
	.word	6                       // 0x6
	.zero	4
	.xword	.L.str.435
	.word	7                       // 0x7
	.zero	4
	.xword	.L.str.436
	.word	8                       // 0x8
	.zero	4
	.xword	.L.str.437
	.word	9                       // 0x9
	.zero	4
	.xword	.L.str.438
	.word	10                      // 0xa
	.zero	4
	.xword	.L.str.439
	.word	11                      // 0xb
	.zero	4
	.xword	.L.str.440
	.word	12                      // 0xc
	.zero	4
	.xword	.L.str.441
	.word	13                      // 0xd
	.zero	4
	.xword	.L.str.442
	.word	14                      // 0xe
	.zero	4
	.xword	.L.str.443
	.word	15                      // 0xf
	.zero	4
	.xword	.L.str.444
	.word	16                      // 0x10
	.zero	4
	.xword	.L.str.445
	.word	17                      // 0x11
	.zero	4
	.xword	.L.str.446
	.word	18                      // 0x12
	.zero	4
	.xword	.L.str.447
	.word	19                      // 0x13
	.zero	4
	.xword	.L.str.251
	.word	20                      // 0x14
	.zero	4
	.xword	.L.str.448
	.word	21                      // 0x15
	.zero	4
	.xword	.L.str.250
	.word	22                      // 0x16
	.zero	4
	.xword	.L.str.449
	.word	23                      // 0x17
	.zero	4
	.xword	.L.str.450
	.word	24                      // 0x18
	.zero	4
	.xword	.L.str.451
	.word	25                      // 0x19
	.zero	4
	.xword	.L.str.452
	.word	26                      // 0x1a
	.zero	4
	.xword	.L.str.453
	.word	27                      // 0x1b
	.zero	4
	.xword	.L.str.454
	.word	28                      // 0x1c
	.zero	4
	.xword	.L.str.455
	.word	29                      // 0x1d
	.zero	4
	.xword	.L.str.456
	.word	30                      // 0x1e
	.zero	4
	.xword	.L.str.457
	.word	31                      // 0x1f
	.zero	4
	.xword	.L.str.458
	.word	32                      // 0x20
	.zero	4
	.xword	.L.str.459
	.word	33                      // 0x21
	.zero	4
	.xword	.L.str.460
	.word	34                      // 0x22
	.zero	4
	.xword	.L.str.461
	.word	35                      // 0x23
	.zero	4
	.xword	.L.str.462
	.word	36                      // 0x24
	.zero	4
	.xword	.L.str.463
	.word	37                      // 0x25
	.zero	4
	.xword	.L.str.464
	.word	38                      // 0x26
	.zero	4
	.xword	.L.str.465
	.word	39                      // 0x27
	.zero	4
	.xword	.L.str.466
	.word	40                      // 0x28
	.zero	4
	.xword	.L.str.467
	.word	41                      // 0x29
	.zero	4
	.xword	.L.str.468
	.word	42                      // 0x2a
	.zero	4
	.xword	.L.str.469
	.word	43                      // 0x2b
	.zero	4
	.xword	.L.str.470
	.word	44                      // 0x2c
	.zero	4
	.xword	.L.str.471
	.word	45                      // 0x2d
	.zero	4
	.xword	.L.str.472
	.word	46                      // 0x2e
	.zero	4
	.xword	.L.str.473
	.word	47                      // 0x2f
	.zero	4
	.xword	.L.str.474
	.word	48                      // 0x30
	.zero	4
	.xword	.L.str.475
	.word	49                      // 0x31
	.zero	4
	.xword	.L.str.476
	.word	50                      // 0x32
	.zero	4
	.xword	.L.str.477
	.word	51                      // 0x33
	.zero	4
	.xword	.L.str.478
	.word	52                      // 0x34
	.zero	4
	.xword	.L.str.479
	.word	53                      // 0x35
	.zero	4
	.xword	.L.str.480
	.word	53                      // 0x35
	.zero	4
	.xword	.L.str.481
	.word	54                      // 0x36
	.zero	4
	.xword	.L.str.482
	.word	55                      // 0x37
	.zero	4
	.xword	.L.str.483
	.word	56                      // 0x38
	.zero	4
	.xword	.L.str.484
	.word	57                      // 0x39
	.zero	4
	.xword	.L.str.485
	.word	58                      // 0x3a
	.zero	4
	.xword	.L.str.486
	.word	59                      // 0x3b
	.zero	4
	.xword	.L.str.487
	.word	60                      // 0x3c
	.zero	4
	.xword	.L.str.488
	.word	61                      // 0x3d
	.zero	4
	.xword	.L.str.489
	.word	62                      // 0x3e
	.zero	4
	.xword	.L.str.490
	.word	63                      // 0x3f
	.zero	4
	.xword	.L.str.491
	.word	64                      // 0x40
	.zero	4
	.xword	.L.str.492
	.word	65                      // 0x41
	.zero	4
	.xword	.L.str.493
	.word	66                      // 0x42
	.zero	4
	.xword	.L.str.494
	.word	67                      // 0x43
	.zero	4
	.xword	.L.str.495
	.word	68                      // 0x44
	.zero	4
	.xword	.L.str.496
	.word	69                      // 0x45
	.zero	4
	.xword	.L.str.497
	.word	70                      // 0x46
	.zero	4
	.xword	.L.str.498
	.word	71                      // 0x47
	.zero	4
	.xword	0
	.size	f2fs_tokens, 1168

	.type	.L.str.393,@object      // @.str.393
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.393:
	.asciz	"on"
	.size	.L.str.393, 3

	.type	.L.str.394,@object      // @.str.394
.L.str.394:
	.asciz	"off"
	.size	.L.str.394, 4

	.type	.L.str.395,@object      // @.str.395
.L.str.395:
	.asciz	"\0014discard is required for zoned block devices"
	.size	.L.str.395, 46

	.type	.L.str.396,@object      // @.str.396
.L.str.396:
	.asciz	"\0016Preserve previous reserve_root=%u"
	.size	.L.str.396, 36

	.type	.L.str.397,@object      // @.str.397
.L.str.397:
	.asciz	"\0013Invalid uid value %d"
	.size	.L.str.397, 23

	.type	.L.str.398,@object      // @.str.398
.L.str.398:
	.asciz	"\0013Invalid gid value %d"
	.size	.L.str.398, 23

	.type	.L.str.399,@object      // @.str.399
.L.str.399:
	.asciz	"adaptive"
	.size	.L.str.399, 9

	.type	.L.str.400,@object      // @.str.400
.L.str.400:
	.asciz	"\0014adaptive mode is not allowed with zoned block device feature"
	.size	.L.str.400, 63

	.type	.L.str.401,@object      // @.str.401
.L.str.401:
	.asciz	"lfs"
	.size	.L.str.401, 4

	.type	.L.str.402,@object      // @.str.402
.L.str.402:
	.asciz	"\0014Not support %d, larger than %d"
	.size	.L.str.402, 33

	.type	.L.str.403,@object      // @.str.403
.L.str.403:
	.asciz	"\0016fault_injection options not supported"
	.size	.L.str.403, 40

	.type	.L.str.404,@object      // @.str.404
.L.str.404:
	.asciz	"\0016fault_type options not supported"
	.size	.L.str.404, 35

	.type	.L.str.405,@object      // @.str.405
.L.str.405:
	.asciz	"user-based"
	.size	.L.str.405, 11

	.type	.L.str.406,@object      // @.str.406
.L.str.406:
	.asciz	"fs-based"
	.size	.L.str.406, 9

	.type	.L.str.407,@object      // @.str.407
.L.str.407:
	.asciz	"default"
	.size	.L.str.407, 8

	.type	.L.str.408,@object      // @.str.408
.L.str.408:
	.asciz	"reuse"
	.size	.L.str.408, 6

	.type	.L.str.409,@object      // @.str.409
.L.str.409:
	.asciz	"posix"
	.size	.L.str.409, 6

	.type	.L.str.410,@object      // @.str.410
.L.str.410:
	.asciz	"strict"
	.size	.L.str.410, 7

	.type	.L.str.411,@object      // @.str.411
.L.str.411:
	.asciz	"\0016Image doesn't support compression"
	.size	.L.str.411, 36

	.type	.L.str.412,@object      // @.str.412
.L.str.412:
	.asciz	"lzo"
	.size	.L.str.412, 4

	.type	.L.str.413,@object      // @.str.413
.L.str.413:
	.asciz	"lz4"
	.size	.L.str.413, 4

	.type	.L.str.414,@object      // @.str.414
.L.str.414:
	.asciz	"zstd"
	.size	.L.str.414, 5

	.type	.L.str.415,@object      // @.str.415
.L.str.415:
	.asciz	"lzo-rle"
	.size	.L.str.415, 8

	.type	.L.str.416,@object      // @.str.416
.L.str.416:
	.asciz	"\0013Compress cluster log size is out of range"
	.size	.L.str.416, 44

	.type	.L.str.417,@object      // @.str.417
.L.str.417:
	.asciz	"\0013invalid extension length/number"
	.size	.L.str.417, 34

	.type	.L.str.418,@object      // @.str.418
.L.str.418:
	.asciz	"fs"
	.size	.L.str.418, 3

	.type	.L.str.419,@object      // @.str.419
.L.str.419:
	.asciz	"user"
	.size	.L.str.419, 5

	.type	.L.str.420,@object      // @.str.420
.L.str.420:
	.asciz	"\0016inline_encrypt option not supported"
	.size	.L.str.420, 38

	.type	.L.str.421,@object      // @.str.421
.L.str.421:
	.asciz	"\0013Unrecognized mount option \"%s\" or missing value"
	.size	.L.str.421, 50

	.type	.L.str.422,@object      // @.str.422
.L.str.422:
	.asciz	"\0013Zoned block device support is not enabled"
	.size	.L.str.422, 44

	.type	.L.str.423,@object      // @.str.423
.L.str.423:
	.asciz	"\0013Should set mode=lfs with %uKB-sized IO"
	.size	.L.str.423, 41

	.type	.L.str.424,@object      // @.str.424
.L.str.424:
	.asciz	"\0013extra_attr or flexible_inline_xattr feature is off"
	.size	.L.str.424, 53

	.type	.L.str.425,@object      // @.str.425
.L.str.425:
	.asciz	"\0013inline_xattr_size option should be set with inline_xattr option"
	.size	.L.str.425, 66

	.type	.L.str.426,@object      // @.str.426
.L.str.426:
	.asciz	"\0013inline xattr size is out of range: %d ~ %d"
	.size	.L.str.426, 45

	.type	.L.str.427,@object      // @.str.427
.L.str.427:
	.asciz	"\0013LFS not compatible with checkpoint=disable"
	.size	.L.str.427, 45

	.type	.L.str.428,@object      // @.str.428
.L.str.428:
	.asciz	"\0013Allow to mount readonly mode only"
	.size	.L.str.428, 36

	.type	.L.str.429,@object      // @.str.429
.L.str.429:
	.asciz	"background_gc=%s"
	.size	.L.str.429, 17

	.type	.L.str.430,@object      // @.str.430
.L.str.430:
	.asciz	"disable_roll_forward"
	.size	.L.str.430, 21

	.type	.L.str.431,@object      // @.str.431
.L.str.431:
	.asciz	"norecovery"
	.size	.L.str.431, 11

	.type	.L.str.432,@object      // @.str.432
.L.str.432:
	.asciz	"discard"
	.size	.L.str.432, 8

	.type	.L.str.433,@object      // @.str.433
.L.str.433:
	.asciz	"nodiscard"
	.size	.L.str.433, 10

	.type	.L.str.434,@object      // @.str.434
.L.str.434:
	.asciz	"no_heap"
	.size	.L.str.434, 8

	.type	.L.str.435,@object      // @.str.435
.L.str.435:
	.asciz	"heap"
	.size	.L.str.435, 5

	.type	.L.str.436,@object      // @.str.436
.L.str.436:
	.asciz	"user_xattr"
	.size	.L.str.436, 11

	.type	.L.str.437,@object      // @.str.437
.L.str.437:
	.asciz	"nouser_xattr"
	.size	.L.str.437, 13

	.type	.L.str.438,@object      // @.str.438
.L.str.438:
	.asciz	"acl"
	.size	.L.str.438, 4

	.type	.L.str.439,@object      // @.str.439
.L.str.439:
	.asciz	"noacl"
	.size	.L.str.439, 6

	.type	.L.str.440,@object      // @.str.440
.L.str.440:
	.asciz	"active_logs=%u"
	.size	.L.str.440, 15

	.type	.L.str.441,@object      // @.str.441
.L.str.441:
	.asciz	"disable_ext_identify"
	.size	.L.str.441, 21

	.type	.L.str.442,@object      // @.str.442
.L.str.442:
	.asciz	"inline_xattr"
	.size	.L.str.442, 13

	.type	.L.str.443,@object      // @.str.443
.L.str.443:
	.asciz	"noinline_xattr"
	.size	.L.str.443, 15

	.type	.L.str.444,@object      // @.str.444
.L.str.444:
	.asciz	"inline_xattr_size=%u"
	.size	.L.str.444, 21

	.type	.L.str.445,@object      // @.str.445
.L.str.445:
	.asciz	"inline_data"
	.size	.L.str.445, 12

	.type	.L.str.446,@object      // @.str.446
.L.str.446:
	.asciz	"inline_dentry"
	.size	.L.str.446, 14

	.type	.L.str.447,@object      // @.str.447
.L.str.447:
	.asciz	"noinline_dentry"
	.size	.L.str.447, 16

	.type	.L.str.448,@object      // @.str.448
.L.str.448:
	.asciz	"noflush_merge"
	.size	.L.str.448, 14

	.type	.L.str.449,@object      // @.str.449
.L.str.449:
	.asciz	"fastboot"
	.size	.L.str.449, 9

	.type	.L.str.450,@object      // @.str.450
.L.str.450:
	.asciz	"extent_cache"
	.size	.L.str.450, 13

	.type	.L.str.451,@object      // @.str.451
.L.str.451:
	.asciz	"noextent_cache"
	.size	.L.str.451, 15

	.type	.L.str.452,@object      // @.str.452
.L.str.452:
	.asciz	"noinline_data"
	.size	.L.str.452, 14

	.type	.L.str.453,@object      // @.str.453
.L.str.453:
	.asciz	"data_flush"
	.size	.L.str.453, 11

	.type	.L.str.454,@object      // @.str.454
.L.str.454:
	.asciz	"reserve_root=%u"
	.size	.L.str.454, 16

	.type	.L.str.455,@object      // @.str.455
.L.str.455:
	.asciz	"resgid=%u"
	.size	.L.str.455, 10

	.type	.L.str.456,@object      // @.str.456
.L.str.456:
	.asciz	"resuid=%u"
	.size	.L.str.456, 10

	.type	.L.str.457,@object      // @.str.457
.L.str.457:
	.asciz	"mode=%s"
	.size	.L.str.457, 8

	.type	.L.str.458,@object      // @.str.458
.L.str.458:
	.asciz	"io_bits=%u"
	.size	.L.str.458, 11

	.type	.L.str.459,@object      // @.str.459
.L.str.459:
	.asciz	"fault_injection=%u"
	.size	.L.str.459, 19

	.type	.L.str.460,@object      // @.str.460
.L.str.460:
	.asciz	"fault_type=%u"
	.size	.L.str.460, 14

	.type	.L.str.461,@object      // @.str.461
.L.str.461:
	.asciz	"lazytime"
	.size	.L.str.461, 9

	.type	.L.str.462,@object      // @.str.462
.L.str.462:
	.asciz	"nolazytime"
	.size	.L.str.462, 11

	.type	.L.str.463,@object      // @.str.463
.L.str.463:
	.asciz	"quota"
	.size	.L.str.463, 6

	.type	.L.str.464,@object      // @.str.464
.L.str.464:
	.asciz	"noquota"
	.size	.L.str.464, 8

	.type	.L.str.465,@object      // @.str.465
.L.str.465:
	.asciz	"usrquota"
	.size	.L.str.465, 9

	.type	.L.str.466,@object      // @.str.466
.L.str.466:
	.asciz	"grpquota"
	.size	.L.str.466, 9

	.type	.L.str.467,@object      // @.str.467
.L.str.467:
	.asciz	"prjquota"
	.size	.L.str.467, 9

	.type	.L.str.468,@object      // @.str.468
.L.str.468:
	.asciz	"usrjquota=%s"
	.size	.L.str.468, 13

	.type	.L.str.469,@object      // @.str.469
.L.str.469:
	.asciz	"grpjquota=%s"
	.size	.L.str.469, 13

	.type	.L.str.470,@object      // @.str.470
.L.str.470:
	.asciz	"prjjquota=%s"
	.size	.L.str.470, 13

	.type	.L.str.471,@object      // @.str.471
.L.str.471:
	.asciz	"usrjquota="
	.size	.L.str.471, 11

	.type	.L.str.472,@object      // @.str.472
.L.str.472:
	.asciz	"grpjquota="
	.size	.L.str.472, 11

	.type	.L.str.473,@object      // @.str.473
.L.str.473:
	.asciz	"prjjquota="
	.size	.L.str.473, 11

	.type	.L.str.474,@object      // @.str.474
.L.str.474:
	.asciz	"jqfmt=vfsold"
	.size	.L.str.474, 13

	.type	.L.str.475,@object      // @.str.475
.L.str.475:
	.asciz	"jqfmt=vfsv0"
	.size	.L.str.475, 12

	.type	.L.str.476,@object      // @.str.476
.L.str.476:
	.asciz	"jqfmt=vfsv1"
	.size	.L.str.476, 12

	.type	.L.str.477,@object      // @.str.477
.L.str.477:
	.asciz	"whint_mode=%s"
	.size	.L.str.477, 14

	.type	.L.str.478,@object      // @.str.478
.L.str.478:
	.asciz	"alloc_mode=%s"
	.size	.L.str.478, 14

	.type	.L.str.479,@object      // @.str.479
.L.str.479:
	.asciz	"fsync_mode=%s"
	.size	.L.str.479, 14

	.type	.L.str.480,@object      // @.str.480
.L.str.480:
	.asciz	"test_dummy_encryption=%s"
	.size	.L.str.480, 25

	.type	.L.str.481,@object      // @.str.481
.L.str.481:
	.asciz	"test_dummy_encryption"
	.size	.L.str.481, 22

	.type	.L.str.482,@object      // @.str.482
.L.str.482:
	.asciz	"inlinecrypt"
	.size	.L.str.482, 12

	.type	.L.str.483,@object      // @.str.483
.L.str.483:
	.asciz	"checkpoint=disable"
	.size	.L.str.483, 19

	.type	.L.str.484,@object      // @.str.484
.L.str.484:
	.asciz	"checkpoint=disable:%u"
	.size	.L.str.484, 22

	.type	.L.str.485,@object      // @.str.485
.L.str.485:
	.asciz	"checkpoint=disable:%u%%"
	.size	.L.str.485, 24

	.type	.L.str.486,@object      // @.str.486
.L.str.486:
	.asciz	"checkpoint=enable"
	.size	.L.str.486, 18

	.type	.L.str.487,@object      // @.str.487
.L.str.487:
	.asciz	"checkpoint_merge"
	.size	.L.str.487, 17

	.type	.L.str.488,@object      // @.str.488
.L.str.488:
	.asciz	"nocheckpoint_merge"
	.size	.L.str.488, 19

	.type	.L.str.489,@object      // @.str.489
.L.str.489:
	.asciz	"compress_algorithm=%s"
	.size	.L.str.489, 22

	.type	.L.str.490,@object      // @.str.490
.L.str.490:
	.asciz	"compress_log_size=%u"
	.size	.L.str.490, 21

	.type	.L.str.491,@object      // @.str.491
.L.str.491:
	.asciz	"compress_extension=%s"
	.size	.L.str.491, 22

	.type	.L.str.492,@object      // @.str.492
.L.str.492:
	.asciz	"compress_chksum"
	.size	.L.str.492, 16

	.type	.L.str.493,@object      // @.str.493
.L.str.493:
	.asciz	"compress_mode=%s"
	.size	.L.str.493, 17

	.type	.L.str.494,@object      // @.str.494
.L.str.494:
	.asciz	"compress_cache"
	.size	.L.str.494, 15

	.type	.L.str.495,@object      // @.str.495
.L.str.495:
	.asciz	"atgc"
	.size	.L.str.495, 5

	.type	.L.str.496,@object      // @.str.496
.L.str.496:
	.asciz	"inline_encrypt"
	.size	.L.str.496, 15

	.type	.L.str.497,@object      // @.str.497
.L.str.497:
	.asciz	"turbozonev2"
	.size	.L.str.497, 12

	.type	.L.str.498,@object      // @.str.498
.L.str.498:
	.asciz	"file_dedup"
	.size	.L.str.498, 11

	.type	.L.str.499,@object      // @.str.499
.L.str.499:
	.asciz	"\0013Cannot change journaled quota options when quota turned on"
	.size	.L.str.499, 61

	.type	.L.str.500,@object      // @.str.500
.L.str.500:
	.asciz	"\0016QUOTA feature is enabled, so ignore qf_name"
	.size	.L.str.500, 46

	.type	.L.str.501,@object      // @.str.501
.L.str.501:
	.asciz	"\0013Not enough memory for storing quotafile name"
	.size	.L.str.501, 47

	.type	.L.str.502,@object      // @.str.502
.L.str.502:
	.asciz	"\0013%s quota file already specified"
	.size	.L.str.502, 34

	.type	quotatypes,@object      // @quotatypes
	.section	.rodata,"a",@progbits
	.p2align	3
quotatypes:
	.xword	.L.str.419
	.xword	.L.str.504
	.xword	.L.str.505
	.xword	.L.str.506
	.size	quotatypes, 32

	.type	.L.str.503,@object      // @.str.503
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.503:
	.asciz	"\0013quotafile must be on filesystem root"
	.size	.L.str.503, 39

	.type	.L.str.504,@object      // @.str.504
.L.str.504:
	.asciz	"group"
	.size	.L.str.504, 6

	.type	.L.str.505,@object      // @.str.505
.L.str.505:
	.asciz	"project"
	.size	.L.str.505, 8

	.type	.L.str.506,@object      // @.str.506
.L.str.506:
	.asciz	"undefined"
	.size	.L.str.506, 10

	.type	.L.str.507,@object      // @.str.507
.L.str.507:
	.asciz	"\0013Encrypt feature is off"
	.size	.L.str.507, 25

	.type	.L.str.508,@object      // @.str.508
.L.str.508:
	.asciz	"\0014Can't set test_dummy_encryption on remount"
	.size	.L.str.508, 45

	.type	.L.str.509,@object      // @.str.509
.L.str.509:
	.asciz	"\0014Can't change test_dummy_encryption on remount"
	.size	.L.str.509, 48

	.type	.L.str.510,@object      // @.str.510
.L.str.510:
	.asciz	"\0014Value of option \"%s\" is unrecognized"
	.size	.L.str.510, 39

	.type	.L.str.511,@object      // @.str.511
.L.str.511:
	.asciz	"\0014Error processing option \"%s\" [%d]"
	.size	.L.str.511, 36

	.type	.L.str.512,@object      // @.str.512
.L.str.512:
	.asciz	"\0014Test dummy encryption mode enabled"
	.size	.L.str.512, 37

	.type	.L.str.513,@object      // @.str.513
.L.str.513:
	.asciz	"\0016wrong format, e.g. <alg_name>:<compr_level>"
	.size	.L.str.513, 46

	.type	.L.str.514,@object      // @.str.514
.L.str.514:
	.asciz	"\0016invalid lz4hc compress level: %d"
	.size	.L.str.514, 35

	.type	.L.str.515,@object      // @.str.515
.L.str.515:
	.asciz	"\0016invalid zstd compress level: %d"
	.size	.L.str.515, 34

	.type	.L.str.516,@object      // @.str.516
.L.str.516:
	.asciz	"\0013Project quota feature not enabled. Cannot enable project quota enforcement."
	.size	.L.str.516, 78

	.type	.L.str.517,@object      // @.str.517
.L.str.517:
	.asciz	"\0013old and new quota format mixing"
	.size	.L.str.517, 34

	.type	.L.str.518,@object      // @.str.518
.L.str.518:
	.asciz	"\0013journaled quota format not specified"
	.size	.L.str.518, 39

	.type	.L.str.519,@object      // @.str.519
.L.str.519:
	.asciz	"\0016QUOTA feature is enabled, so ignore jquota_fmt"
	.size	.L.str.519, 49

	.type	.L.str.520,@object      // @.str.520
.L.str.520:
	.asciz	"\0013Encoding requested by superblock is unknown"
	.size	.L.str.520, 46

	.type	.L.str.521,@object      // @.str.521
.L.str.521:
	.asciz	"\0013can't mount with superblock charset: %s-%s not supported by the kernel. flags: 0x%x."
	.size	.L.str.521, 87

	.type	.L.str.522,@object      // @.str.522
.L.str.522:
	.asciz	"\0016Using encoding defined by superblock: %s-%s with flags 0x%hx"
	.size	.L.str.522, 63

	.type	.L.str.524,@object      // @.str.524
.L.str.524:
	.asciz	"utf8"
	.size	.L.str.524, 5

	.type	.L.str.525,@object      // @.str.525
.L.str.525:
	.asciz	"12.1.0"
	.size	.L.str.525, 7

	.type	.L.str.526,@object      // @.str.526
.L.str.526:
	.asciz	"\0013quota sysfile already exists"
	.size	.L.str.526, 31

	.type	f2fs_inode_cachep,@object // @f2fs_inode_cachep
	.local	f2fs_inode_cachep
	.comm	f2fs_inode_cachep,8,8
	.type	f2fs_alloc_inode.__key,@object // @f2fs_alloc_inode.__key
	.local	f2fs_alloc_inode.__key
	.comm	f2fs_alloc_inode.__key,1,1
	.type	.L.str.527,@object      // @.str.527
.L.str.527:
	.asciz	"&fi->i_sem"
	.size	.L.str.527, 11

	.type	f2fs_alloc_inode.__key.528,@object // @f2fs_alloc_inode.__key.528
	.local	f2fs_alloc_inode.__key.528
	.comm	f2fs_alloc_inode.__key.528,1,1
	.type	.L.str.529,@object      // @.str.529
.L.str.529:
	.asciz	"&fi->inmem_lock"
	.size	.L.str.529, 16

	.type	f2fs_alloc_inode.__key.530,@object // @f2fs_alloc_inode.__key.530
	.local	f2fs_alloc_inode.__key.530
	.comm	f2fs_alloc_inode.__key.530,1,1
	.type	.L.str.531,@object      // @.str.531
.L.str.531:
	.asciz	"&fi->i_gc_rwsem[READ]"
	.size	.L.str.531, 22

	.type	f2fs_alloc_inode.__key.532,@object // @f2fs_alloc_inode.__key.532
	.local	f2fs_alloc_inode.__key.532
	.comm	f2fs_alloc_inode.__key.532,1,1
	.type	.L.str.533,@object      // @.str.533
.L.str.533:
	.asciz	"&fi->i_gc_rwsem[WRITE]"
	.size	.L.str.533, 23

	.type	f2fs_alloc_inode.__key.534,@object // @f2fs_alloc_inode.__key.534
	.local	f2fs_alloc_inode.__key.534
	.comm	f2fs_alloc_inode.__key.534,1,1
	.type	.L.str.535,@object      // @.str.535
.L.str.535:
	.asciz	"&fi->i_mmap_sem"
	.size	.L.str.535, 16

	.type	f2fs_alloc_inode.__key.536,@object // @f2fs_alloc_inode.__key.536
	.local	f2fs_alloc_inode.__key.536
	.comm	f2fs_alloc_inode.__key.536,1,1
	.type	.L.str.537,@object      // @.str.537
.L.str.537:
	.asciz	"&fi->i_xattr_sem"
	.size	.L.str.537, 17

	.type	f2fs_alloc_inode.__key.538,@object // @f2fs_alloc_inode.__key.538
	.local	f2fs_alloc_inode.__key.538
	.comm	f2fs_alloc_inode.__key.538,1,1
	.type	.L.str.539,@object      // @.str.539
.L.str.539:
	.asciz	"&fi->dedup_wq"
	.size	.L.str.539, 14

	.type	.L.str.540,@object      // @.str.540
.L.str.540:
	.asciz	"\0015f2fs begin to put super"
	.size	.L.str.540, 26

	.type	.L__const.f2fs_put_super.cpc.541,@object // @__const.f2fs_put_super.cpc.541
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	3
.L__const.f2fs_put_super.cpc.541:
	.word	33                      // 0x21
	.zero	4
	.xword	0                       // 0x0
	.xword	0                       // 0x0
	.xword	0                       // 0x0
	.size	.L__const.f2fs_put_super.cpc.541, 32

	.type	.L.str.542,@object      // @.str.542
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.542:
	.asciz	"F2FS bug: %s:%d\n"
	.size	.L.str.542, 17

	.type	.L__func__.f2fs_put_super,@object // @__func__.f2fs_put_super
.L__func__.f2fs_put_super:
	.asciz	"f2fs_put_super"
	.size	.L__func__.f2fs_put_super, 15

	.type	.L.str.543,@object      // @.str.543
.L.str.543:
	.asciz	"\0015f2fs put super sucessfully"
	.size	.L.str.543, 29

	.type	.L.str.544,@object      // @.str.544
.L.str.544:
	.asciz	"\0015f2fs begin to remount"
	.size	.L.str.544, 24

	.type	.L.str.545,@object      // @.str.545
.L.str.545:
	.asciz	"\0016Try to recover all the superblocks, ret: %d"
	.size	.L.str.545, 46

	.type	.L.str.546,@object      // @.str.546
.L.str.546:
	.asciz	"\0014switch atgc option is not allowed"
	.size	.L.str.546, 36

	.type	.L.str.547,@object      // @.str.547
.L.str.547:
	.asciz	"\0014switch extent_cache option is not allowed"
	.size	.L.str.547, 44

	.type	.L.str.548,@object      // @.str.548
.L.str.548:
	.asciz	"\0014switch io_bits option is not allowed"
	.size	.L.str.548, 39

	.type	.L.str.549,@object      // @.str.549
.L.str.549:
	.asciz	"\0014switch compress_cache option is not allowed"
	.size	.L.str.549, 46

	.type	.L.str.550,@object      // @.str.550
.L.str.550:
	.asciz	"\0014disabling checkpoint not compatible with read-only"
	.size	.L.str.550, 53

	.type	.L.str.551,@object      // @.str.551
.L.str.551:
	.asciz	"\0015f2fs remount successfully"
	.size	.L.str.551, 28

	.type	.L.str.552,@object      // @.str.552
.L.str.552:
	.asciz	"\0014background flush thread has stopped"
	.size	.L.str.552, 38

	.type	.L.str.553,@object      // @.str.553
.L.str.553:
	.asciz	"\0014background ckpt thread has stopped"
	.size	.L.str.553, 37

	.type	.L.str.554,@object      // @.str.554
.L.str.554:
	.asciz	"\0014background gc thread has stopped"
	.size	.L.str.554, 35

	.type	.L.str.555,@object      // @.str.555
.L.str.555:
	.asciz	",background_gc=%s"
	.size	.L.str.555, 18

	.type	.L.str.556,@object      // @.str.556
.L.str.556:
	.asciz	",disable_roll_forward"
	.size	.L.str.556, 22

	.type	.L.str.557,@object      // @.str.557
.L.str.557:
	.asciz	",norecovery"
	.size	.L.str.557, 12

	.type	.L.str.558,@object      // @.str.558
.L.str.558:
	.asciz	",discard"
	.size	.L.str.558, 9

	.type	.L.str.559,@object      // @.str.559
.L.str.559:
	.asciz	",nodiscard"
	.size	.L.str.559, 11

	.type	.L.str.560,@object      // @.str.560
.L.str.560:
	.asciz	",no_heap"
	.size	.L.str.560, 9

	.type	.L.str.561,@object      // @.str.561
.L.str.561:
	.asciz	",heap"
	.size	.L.str.561, 6

	.type	.L.str.562,@object      // @.str.562
.L.str.562:
	.asciz	",user_xattr"
	.size	.L.str.562, 12

	.type	.L.str.563,@object      // @.str.563
.L.str.563:
	.asciz	",nouser_xattr"
	.size	.L.str.563, 14

	.type	.L.str.564,@object      // @.str.564
.L.str.564:
	.asciz	",inline_xattr"
	.size	.L.str.564, 14

	.type	.L.str.565,@object      // @.str.565
.L.str.565:
	.asciz	",noinline_xattr"
	.size	.L.str.565, 16

	.type	.L.str.566,@object      // @.str.566
.L.str.566:
	.asciz	",inline_xattr_size=%u"
	.size	.L.str.566, 22

	.type	.L.str.567,@object      // @.str.567
.L.str.567:
	.asciz	",acl"
	.size	.L.str.567, 5

	.type	.L.str.568,@object      // @.str.568
.L.str.568:
	.asciz	",noacl"
	.size	.L.str.568, 7

	.type	.L.str.569,@object      // @.str.569
.L.str.569:
	.asciz	",disable_ext_identify"
	.size	.L.str.569, 22

	.type	.L.str.570,@object      // @.str.570
.L.str.570:
	.asciz	",inline_data"
	.size	.L.str.570, 13

	.type	.L.str.571,@object      // @.str.571
.L.str.571:
	.asciz	",noinline_data"
	.size	.L.str.571, 15

	.type	.L.str.572,@object      // @.str.572
.L.str.572:
	.asciz	",inline_dentry"
	.size	.L.str.572, 15

	.type	.L.str.573,@object      // @.str.573
.L.str.573:
	.asciz	",noinline_dentry"
	.size	.L.str.573, 17

	.type	.L.str.574,@object      // @.str.574
.L.str.574:
	.asciz	",flush_merge"
	.size	.L.str.574, 13

	.type	.L.str.575,@object      // @.str.575
.L.str.575:
	.asciz	",nobarrier"
	.size	.L.str.575, 11

	.type	.L.str.576,@object      // @.str.576
.L.str.576:
	.asciz	",fastboot"
	.size	.L.str.576, 10

	.type	.L.str.577,@object      // @.str.577
.L.str.577:
	.asciz	",extent_cache"
	.size	.L.str.577, 14

	.type	.L.str.578,@object      // @.str.578
.L.str.578:
	.asciz	",noextent_cache"
	.size	.L.str.578, 16

	.type	.L.str.579,@object      // @.str.579
.L.str.579:
	.asciz	",data_flush"
	.size	.L.str.579, 12

	.type	.L.str.580,@object      // @.str.580
.L.str.580:
	.asciz	",mode="
	.size	.L.str.580, 7

	.type	.L.str.581,@object      // @.str.581
.L.str.581:
	.asciz	",inline_encrypt"
	.size	.L.str.581, 16

	.type	.L.str.582,@object      // @.str.582
.L.str.582:
	.asciz	",active_logs=%u"
	.size	.L.str.582, 16

	.type	.L.str.583,@object      // @.str.583
.L.str.583:
	.asciz	",reserve_root=%u,resuid=%u,resgid=%u"
	.size	.L.str.583, 37

	.type	.L.str.584,@object      // @.str.584
.L.str.584:
	.asciz	",io_bits=%u"
	.size	.L.str.584, 12

	.type	.L.str.585,@object      // @.str.585
.L.str.585:
	.asciz	",quota"
	.size	.L.str.585, 7

	.type	.L.str.586,@object      // @.str.586
.L.str.586:
	.asciz	",usrquota"
	.size	.L.str.586, 10

	.type	.L.str.587,@object      // @.str.587
.L.str.587:
	.asciz	",grpquota"
	.size	.L.str.587, 10

	.type	.L.str.588,@object      // @.str.588
.L.str.588:
	.asciz	",prjquota"
	.size	.L.str.588, 10

	.type	.L.str.589,@object      // @.str.589
.L.str.589:
	.asciz	",whint_mode=%s"
	.size	.L.str.589, 15

	.type	.L.str.590,@object      // @.str.590
.L.str.590:
	.asciz	",inlinecrypt"
	.size	.L.str.590, 13

	.type	.L.str.591,@object      // @.str.591
.L.str.591:
	.asciz	",alloc_mode=%s"
	.size	.L.str.591, 15

	.type	.L.str.592,@object      // @.str.592
.L.str.592:
	.asciz	",checkpoint=disable:%u"
	.size	.L.str.592, 23

	.type	.L.str.593,@object      // @.str.593
.L.str.593:
	.asciz	",checkpoint_merge"
	.size	.L.str.593, 18

	.type	.L.str.594,@object      // @.str.594
.L.str.594:
	.asciz	",nocheckpoint_merge"
	.size	.L.str.594, 20

	.type	.L.str.595,@object      // @.str.595
.L.str.595:
	.asciz	",fsync_mode=%s"
	.size	.L.str.595, 15

	.type	.L.str.596,@object      // @.str.596
.L.str.596:
	.asciz	",atgc"
	.size	.L.str.596, 6

	.type	.L.str.597,@object      // @.str.597
.L.str.597:
	.asciz	"vfsold"
	.size	.L.str.597, 7

	.type	.L.str.598,@object      // @.str.598
.L.str.598:
	.asciz	"vfsv0"
	.size	.L.str.598, 6

	.type	.L.str.599,@object      // @.str.599
.L.str.599:
	.asciz	"vfsv1"
	.size	.L.str.599, 6

	.type	.L.str.600,@object      // @.str.600
.L.str.600:
	.asciz	",jqfmt=%s"
	.size	.L.str.600, 10

	.type	.L.str.601,@object      // @.str.601
.L.str.601:
	.asciz	"usrjquota"
	.size	.L.str.601, 10

	.type	.L.str.602,@object      // @.str.602
.L.str.602:
	.asciz	"grpjquota"
	.size	.L.str.602, 10

	.type	.L.str.603,@object      // @.str.603
.L.str.603:
	.asciz	"prjjquota"
	.size	.L.str.603, 10

	.type	.L.str.604,@object      // @.str.604
.L.str.604:
	.asciz	",= \t\n\\"
	.size	.L.str.604, 7

	.type	.L.str.605,@object      // @.str.605
.L.str.605:
	.asciz	", \t\n\\"
	.size	.L.str.605, 6

	.type	.L.str.606,@object      // @.str.606
.L.str.606:
	.asciz	",compress_algorithm=%s"
	.size	.L.str.606, 23

	.type	.L.str.607,@object      // @.str.607
.L.str.607:
	.asciz	":%d"
	.size	.L.str.607, 4

	.type	.L.str.608,@object      // @.str.608
.L.str.608:
	.asciz	",compress_log_size=%u"
	.size	.L.str.608, 22

	.type	.L.str.609,@object      // @.str.609
.L.str.609:
	.asciz	",compress_extension=%s"
	.size	.L.str.609, 23

	.type	.L.str.610,@object      // @.str.610
.L.str.610:
	.asciz	",compress_chksum"
	.size	.L.str.610, 17

	.type	.L.str.611,@object      // @.str.611
.L.str.611:
	.asciz	",compress_mode=%s"
	.size	.L.str.611, 18

	.type	.L.str.612,@object      // @.str.612
.L.str.612:
	.asciz	",compress_cache"
	.size	.L.str.612, 16

	.type	.L.str.613,@object      // @.str.613
.L.str.613:
	.asciz	"\0013Failed to read quota file (type=%d, err=%ld)."
	.size	.L.str.613, 48

	.type	.L.str.614,@object      // @.str.614
.L.str.614:
	.asciz	"\0013Failed to read quota file (type=%d, err=EIO)."
	.size	.L.str.614, 48

	.type	.L__func__.f2fs_put_page,@object // @__func__.f2fs_put_page
.L__func__.f2fs_put_page:
	.asciz	"f2fs_put_page"
	.size	.L__func__.f2fs_put_page, 14

	.type	.L.str.615,@object      // @.str.615
.L.str.615:
	.asciz	"\0013Failed to write quota file (type=%d, err=%d)."
	.size	.L.str.615, 48

	.type	.L.str.617,@object      // @.str.617
.L.str.617:
	.asciz	"f2fs:"
	.size	.L.str.617, 6

	.type	init_sb_info.__key,@object // @init_sb_info.__key
	.local	init_sb_info.__key
	.comm	init_sb_info.__key,1,1
	.type	.L.str.618,@object      // @.str.618
.L.str.618:
	.asciz	"&sbi->umount_mutex"
	.size	.L.str.618, 19

	.type	init_sb_info.__key.619,@object // @init_sb_info.__key.619
	.local	init_sb_info.__key.619
	.comm	init_sb_info.__key.619,1,1
	.type	.L.str.620,@object      // @.str.620
.L.str.620:
	.asciz	"&sbi->io_order_lock"
	.size	.L.str.620, 20

	.type	init_sb_info.__key.621,@object // @init_sb_info.__key.621
	.local	init_sb_info.__key.621
	.comm	init_sb_info.__key.621,1,1
	.type	.L.str.622,@object      // @.str.622
.L.str.622:
	.asciz	"&sbi->sb_lock"
	.size	.L.str.622, 14

	.type	init_sb_info.__key.623,@object // @init_sb_info.__key.623
	.local	init_sb_info.__key.623
	.comm	init_sb_info.__key.623,1,1
	.type	.L.str.624,@object      // @.str.624
.L.str.624:
	.asciz	"&sbi->pin_sem"
	.size	.L.str.624, 14

	.type	init_percpu_info.__key,@object // @init_percpu_info.__key
	.local	init_percpu_info.__key
	.comm	init_percpu_info.__key,1,1
	.type	init_percpu_info.__key.625,@object // @init_percpu_info.__key.625
	.local	init_percpu_info.__key.625
	.comm	init_percpu_info.__key.625,1,1
	.type	.L.str.626,@object      // @.str.626
.L.str.626:
	.asciz	"RESERVED"
	.size	.L.str.626, 9

	.type	.L.str.627,@object      // @.str.627
.L.str.627:
	.asciz	"\0016Mount Device [%2d]: %20s, %8u, %8x - %8x"
	.size	.L.str.627, 43

	.type	.L.str.628,@object      // @.str.628
.L.str.628:
	.asciz	"\0016IO Block Size: %8d KB"
	.size	.L.str.628, 24

	.type	.L.str.629,@object      // @.str.629
.L.str.629:
	.asciz	"\0016Reduce reserved blocks for root = %u"
	.size	.L.str.629, 39

	.type	.L.str.630,@object      // @.str.630
.L.str.630:
	.asciz	"\0016Ignore s_resuid=%u, s_resgid=%u w/o reserve_root"
	.size	.L.str.630, 51

	.type	.L.str.631,@object      // @.str.631
.L.str.631:
	.asciz	"\0016Adjust unusable cap for checkpoint=disable = %u / %u%%"
	.size	.L.str.631, 57

	.type	.L.str.632,@object      // @.str.632
.L.str.632:
	.asciz	"\0013checkpoint=disable on readonly fs"
	.size	.L.str.632, 36

	.type	.L__const.kill_f2fs_super.cpc,@object // @__const.kill_f2fs_super.cpc
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	3
.L__const.kill_f2fs_super.cpc:
	.word	1                       // 0x1
	.zero	4
	.xword	0                       // 0x0
	.xword	0                       // 0x0
	.xword	0                       // 0x0
	.size	.L__const.kill_f2fs_super.cpc, 32

	.type	.L.str.633,@object      // @.str.633
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.633:
	.asciz	"f2fs_inode_cache"
	.size	.L.str.633, 17

	.type	.L.str.634,@object      // @.str.634
.L.str.634:
	.asciz	"f2fs_casefolded_name"
	.size	.L.str.634, 21

	.type	f2fssys_table,@object   // @f2fssys_table
	.data
	.p2align	3
f2fssys_table:
	.xword	.L.str.418
	.xword	0
	.word	0                       // 0x0
	.hword	365                     // 0x16d
	.zero	2
	.xword	f2fs_table
	.xword	0
	.xword	0
	.xword	0
	.xword	0
	.zero	64
	.size	f2fssys_table, 128

	.type	f2fs_table,@object      // @f2fs_table
	.p2align	3
f2fs_table:
	.xword	.L.str.635
	.xword	0
	.word	0                       // 0x0
	.hword	365                     // 0x16d
	.zero	2
	.xword	fs_pw_stats_table
	.xword	0
	.xword	0
	.xword	0
	.xword	0
	.zero	64
	.size	f2fs_table, 128

	.type	.L.str.635,@object      // @.str.635
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.635:
	.asciz	"f2fs_wbopt"
	.size	.L.str.635, 11

	.type	fs_pw_stats_table,@object // @fs_pw_stats_table
	.data
	.p2align	3
fs_pw_stats_table:
	.xword	.L.str.636
	.xword	write_opt
	.word	4                       // 0x4
	.hword	420                     // 0x1a4
	.zero	2
	.xword	0
	.xword	proc_dointvec_minmax
	.xword	0
	.xword	write_opt_off
	.xword	write_opt_on
	.zero	64
	.size	fs_pw_stats_table, 128

	.type	.L.str.636,@object      // @.str.636
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.636:
	.asciz	"write_opt"
	.size	.L.str.636, 10

	.type	write_opt_off,@object   // @write_opt_off
	.local	write_opt_off
	.comm	write_opt_off,4,4
	.type	write_opt_on,@object    // @write_opt_on
	.data
	.p2align	2
write_opt_on:
	.word	1                       // 0x1
	.size	write_opt_on, 4

	.type	.Lswitch.table.f2fs_show_options,@object // @switch.table.f2fs_show_options
	.section	.rodata,"a",@progbits
	.p2align	3
.Lswitch.table.f2fs_show_options:
	.xword	.L.str.412
	.xword	.L.str.413
	.xword	.L.str.414
	.xword	.L.str.415
	.size	.Lswitch.table.f2fs_show_options, 32

	.type	.Lswitch.table.f2fs_show_options.637,@object // @switch.table.f2fs_show_options.637
	.p2align	3
.Lswitch.table.f2fs_show_options.637:
	.xword	.L.str.393
	.xword	.L.str.394
	.xword	.L.str.130
	.size	.Lswitch.table.f2fs_show_options.637, 24

	.type	.Lswitch.table.f2fs_show_options.638,@object // @switch.table.f2fs_show_options.638
	.p2align	3
.Lswitch.table.f2fs_show_options.638:
	.xword	.L.str.409
	.xword	.L.str.410
	.xword	.L.str.250
	.size	.Lswitch.table.f2fs_show_options.638, 24

	.ident	"Android (6443078 based on r383902) clang version 11.0.1 (https://android.googlesource.com/toolchain/llvm-project b397f81060ce6d701042b782172ed13bee898b79)"
	.section	".note.GNU-stack","",@progbits
